

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Mar 19 01:03:11 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           ; Version 1.44
    31                           ; Generated 14/09/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  000E5A                     __pidataCOMRAM:
    67                           	opt stack 0
    68                           
    69                           ;initializer for _factoryResetCode
    70  000E5A  08                 	db	8
    71  000E5B  00                 	db	0
    72  000E5C  08                 	db	8
    73  000E5D  00                 	db	0
    74                           
    75                           ;initializer for _factoryResetCodeLenght
    76  000E5E  04                 	db	4
    77                           
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt stack 0
    81  000800  00                 	db	0
    82  000801                     _defaultPassCode:
    83                           	opt stack 0
    84  000801  09                 	db	9
    85  000802  08                 	db	8
    86  000803  07                 	db	7
    87  000804  06                 	db	6
    88  000805  05                 	db	5
    89  000806  04                 	db	4
    90  000807  03                 	db	3
    91  000808  02                 	db	2
    92  000809  01                 	db	1
    93  00080A                     __end_of_defaultPassCode:
    94                           	opt stack 0
    95  00080A                     _defaultPassCode2:
    96                           	opt stack 0
    97  00080A  01                 	db	1
    98  00080B  02                 	db	2
    99  00080C  03                 	db	3
   100  00080D                     __end_of_defaultPassCode2:
   101                           	opt stack 0
   102  00080D                     _defaultPassCode2Lenght:
   103                           	opt stack 0
   104  00080D  03                 	db	3
   105  00080E                     __end_of_defaultPassCode2Lenght:
   106                           	opt stack 0
   107  00080E                     _defaultPassCodeLenght:
   108                           	opt stack 0
   109  00080E  09                 	db	9
   110  00080F                     __end_of_defaultPassCodeLenght:
   111                           	opt stack 0
   112  0000                     _TMR1	set	4046
   113  0000                     _PORTA	set	3968
   114  0000                     _PIR1bits	set	3998
   115  0000                     _PIE1bits	set	3997
   116  0000                     _T1CONbits	set	4045
   117  0000                     _CCPR1L	set	4030
   118  0000                     _T2CON	set	4042
   119  0000                     _PR2	set	4043
   120  0000                     _CCP1CON	set	4029
   121  0000                     _PORTB	set	3969
   122  0000                     _INTCON2bits	set	4081
   123  0000                     _LATB	set	3978
   124  0000                     _TRISB	set	3987
   125  0000                     _EECON2	set	4007
   126  0000                     _INTCONbits	set	4082
   127  0000                     _EEDATA	set	4008
   128  0000                     _EEADR	set	4009
   129  0000                     _EECON1bits	set	4006
   130  0000                     _RBIF	set	32656
   131  0000                     _TRISA3	set	31891
   132                           
   133                           ; #config settings
   134  00080F  00                 	db	0	; dummy byte at the end
   135  0000                     
   136                           	psect	cinit
   137  000D00                     __pcinit:
   138                           	opt stack 0
   139  000D00                     start_initialization:
   140                           	opt stack 0
   141  000D00                     __initialization:
   142                           	opt stack 0
   143                           
   144                           ; Initialize objects allocated to COMRAM (5 bytes)
   145                           ; load TBLPTR registers with __pidataCOMRAM
   146  000D00  0E5A               	movlw	low __pidataCOMRAM
   147  000D02  6EF6               	movwf	tblptrl,c
   148  000D04  0E0E               	movlw	high __pidataCOMRAM
   149  000D06  6EF7               	movwf	tblptrh,c
   150  000D08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   151  000D0A  6EF8               	movwf	tblptru,c
   152  000D0C  EE00  F048         	lfsr	0,__pdataCOMRAM
   153  000D10  EE10 F005          	lfsr	1,5
   154  000D14                     copy_data0:
   155  000D14  0009               	tblrd		*+
   156  000D16  CFF5 FFEE          	movff	tablat,postinc0
   157  000D1A  50E5               	movf	postdec1,w,c
   158  000D1C  50E1               	movf	fsr1l,w,c
   159  000D1E  E1FA               	bnz	copy_data0
   160                           
   161                           ; Clear objects allocated to BANK0 (100 bytes)
   162  000D20  EE00  F060         	lfsr	0,__pbssBANK0
   163  000D24  0E64               	movlw	100
   164  000D26                     clear_0:
   165  000D26  6AEE               	clrf	postinc0,c
   166  000D28  06E8               	decf	wreg,f,c
   167  000D2A  E1FD               	bnz	clear_0
   168                           
   169                           ; Clear objects allocated to COMRAM (27 bytes)
   170  000D2C  EE00  F02D         	lfsr	0,__pbssCOMRAM
   171  000D30  0E1B               	movlw	27
   172  000D32                     clear_1:
   173  000D32  6AEE               	clrf	postinc0,c
   174  000D34  06E8               	decf	wreg,f,c
   175  000D36  E1FD               	bnz	clear_1
   176  000D38                     end_of_initialization:
   177                           	opt stack 0
   178  000D38                     __end_of__initialization:
   179                           	opt stack 0
   180  000D38  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   181  000D3A  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   182  000D3C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   183  000D3E  6EF8               	movwf	tblptru,c
   184  000D40  0E08               	movlw	high __Lsmallconst
   185  000D42  6EF7               	movwf	tblptrh,c
   186  000D44  0100               	movlb	0
   187  000D46  EF50  F005         	goto	_main	;jump to C main() function
   188                           tblptru	equ	0xFF8
   189                           tblptrh	equ	0xFF7
   190                           tblptrl	equ	0xFF6
   191                           tablat	equ	0xFF5
   192                           postinc0	equ	0xFEE
   193                           wreg	equ	0xFE8
   194                           postdec1	equ	0xFE5
   195                           fsr1l	equ	0xFE1
   196                           
   197                           	psect	bssCOMRAM
   198  00002D                     __pbssCOMRAM:
   199                           	opt stack 0
   200  00002D                     _soundOut:
   201                           	opt stack 0
   202  00002D                     	ds	6
   203  000033                     _soundStuff:
   204                           	opt stack 0
   205  000033                     	ds	6
   206  000039                     _eepromCode:
   207                           	opt stack 0
   208  000039                     	ds	2
   209  00003B                     _timer2OVFcount:
   210                           	opt stack 0
   211  00003B                     	ds	2
   212  00003D                     	ds	1
   213  00003E                     _currentTimerState:
   214                           	opt stack 0
   215  00003E                     	ds	1
   216  00003F                     	ds	1
   217  000040                     _tempCodeKeyPressCount:
   218                           	opt stack 0
   219  000040                     	ds	1
   220  000041                     _LASTPASSCODE:
   221                           	opt stack 0
   222  000041                     	ds	1
   223  000042                     _bufferPtr:
   224                           	opt stack 0
   225  000042                     	ds	1
   226  000043                     _wrongCodeEnteredCount:
   227                           	opt stack 0
   228  000043                     	ds	1
   229  000044                     _timer1OVFcount:
   230                           	opt stack 0
   231  000044                     	ds	1
   232  000045                     _keyPressCount:
   233                           	opt stack 0
   234  000045                     	ds	1
   235  000046                     _systemStateReg2:
   236                           	opt stack 0
   237  000046                     	ds	1
   238  000047                     _systemStateReg:
   239                           	opt stack 0
   240  000047                     	ds	1
   241                           tblptru	equ	0xFF8
   242                           tblptrh	equ	0xFF7
   243                           tblptrl	equ	0xFF6
   244                           tablat	equ	0xFF5
   245                           postinc0	equ	0xFEE
   246                           wreg	equ	0xFE8
   247                           postdec1	equ	0xFE5
   248                           fsr1l	equ	0xFE1
   249                           
   250                           	psect	dataCOMRAM
   251  000048                     __pdataCOMRAM:
   252                           	opt stack 0
   253  000048                     _factoryResetCode:
   254                           	opt stack 0
   255  000048                     	ds	4
   256  00004C                     _factoryResetCodeLenght:
   257                           	opt stack 0
   258  00004C                     	ds	1
   259                           tblptru	equ	0xFF8
   260                           tblptrh	equ	0xFF7
   261                           tblptrl	equ	0xFF6
   262                           tablat	equ	0xFF5
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           postdec1	equ	0xFE5
   266                           fsr1l	equ	0xFE1
   267                           
   268                           	psect	bssBANK0
   269  000060                     __pbssBANK0:
   270                           	opt stack 0
   271  000060                     	ds	25
   272  000079                     _tempCodeBuffer:
   273                           	opt stack 0
   274  000079                     	ds	25
   275  000092                     _keyBuffer:
   276                           	opt stack 0
   277  000092                     	ds	25
   278  0000AB                     	ds	25
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           postdec1	equ	0xFE5
   286                           fsr1l	equ	0xFE1
   287                           
   288                           	psect	cstackCOMRAM
   289  000001                     __pcstackCOMRAM:
   290                           	opt stack 0
   291  000001                     ??_ISR:
   292  000001                     
   293                           ; 2 bytes @ 0x0
   294  000001                     	ds	18
   295  000013                     writeEEPROM@datas:
   296                           	opt stack 0
   297  000013                     readEEPROM@address:
   298                           	opt stack 0
   299  000013                     check_lock_num_validity@validity:
   300                           	opt stack 0
   301  000013                     delay_ms@time:
   302                           	opt stack 0
   303  000013                     arr_to_num@arr:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x12
   307  000013                     	ds	1
   308  000014                     writeEEPROM@address:
   309                           	opt stack 0
   310  000014                     check_lock_num_validity@lock_num:
   311                           	opt stack 0
   312  000014                     check_password_presence@lock_num:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x13
   316  000014                     	ds	1
   317  000015                     writeEEPROM@gie_Status:
   318                           	opt stack 0
   319  000015                     arr_to_num@num_of_elements:
   320                           	opt stack 0
   321  000015                     check_password_presence@addr:
   322                           	opt stack 0
   323  000015                     delay_ms@i:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x14
   327  000015                     	ds	1
   328  000016                     eepromWriteCode@codeLenght:
   329                           	opt stack 0
   330  000016                     check_password_presence@validity:
   331                           	opt stack 0
   332  000016                     arr_to_num@number:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x15
   336  000016                     	ds	1
   337  000017                     eepromWriteCode@codeBuffer:
   338                           	opt stack 0
   339  000017                     delay_ms@j:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x16
   343  000017                     	ds	1
   344  000018                     
   345                           ; 1 bytes @ 0x17
   346  000018                     	ds	1
   347  000019                     eepromWriteCode@eepromWriteAddr:
   348                           	opt stack 0
   349  000019                     arr_to_num@a:
   350                           	opt stack 0
   351  000019                     getKey@KeypadStatus:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x18
   355  000019                     	ds	1
   356  00001A                     eepromWriteCode@i:
   357                           	opt stack 0
   358  00001A                     arr_to_num@b:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x19
   362  00001A                     	ds	1
   363  00001B                     getKey@buttonPressed:
   364                           	opt stack 0
   365  00001B                     arr_to_num@validity:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x1A
   369  00001B                     	ds	1
   370  00001C                     main@keypressArray:
   371                           	opt stack 0
   372                           
   373                           ; 10 bytes @ 0x1B
   374  00001C                     	ds	10
   375  000026                     main@addr:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x25
   379  000026                     	ds	1
   380  000027                     main@currentSystemState:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x26
   384  000027                     	ds	1
   385  000028                     main@a:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x27
   389  000028                     	ds	1
   390  000029                     main@numOfKeysPressed:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x28
   394  000029                     	ds	1
   395  00002A                     main@locker_num:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x29
   399  00002A                     	ds	1
   400  00002B                     main@currentKeypadStatus:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x2A
   404  00002B                     	ds	2
   405                           tblptru	equ	0xFF8
   406                           tblptrh	equ	0xFF7
   407                           tblptrl	equ	0xFF6
   408                           tablat	equ	0xFF5
   409                           postinc0	equ	0xFEE
   410                           wreg	equ	0xFE8
   411                           postdec1	equ	0xFE5
   412                           fsr1l	equ	0xFE1
   413                           
   414 ;;
   415 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   416 ;;
   417 ;; *************** function _main *****************
   418 ;; Defined at:
   419 ;;		line 294 in file "main.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;		None
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  a               1   39[COMRAM] unsigned char 
   424 ;;  keypressArra   10   27[COMRAM] unsigned char [10]
   425 ;;  currentKeypa    2   42[COMRAM] struct .
   426 ;;  locker_num      1   41[COMRAM] unsigned char 
   427 ;;  numOfKeysPre    1   40[COMRAM] unsigned char 
   428 ;;  currentSyste    1   38[COMRAM] enum E4105
   429 ;;  addr            1   37[COMRAM] unsigned char 
   430 ;; Return value:  Size  Location     Type
   431 ;;                  2  265[None  ] int 
   432 ;; Registers used:
   433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   439 ;;      Params:         0       0       0       0       0       0       0       0       0
   440 ;;      Locals:        17       0       0       0       0       0       0       0       0
   441 ;;      Temps:          0       0       0       0       0       0       0       0       0
   442 ;;      Totals:        17       0       0       0       0       0       0       0       0
   443 ;;Total ram usage:       17 bytes
   444 ;; Hardware stack levels required when called:    3
   445 ;; This function calls:
   446 ;;		_arr_to_num
   447 ;;		_check_lock_num_validity
   448 ;;		_check_password_presence
   449 ;;		_eepromWriteCode
   450 ;;		_getKey
   451 ;;		_initControllerIO
   452 ;;		_initKeypad
   453 ;;		_initStandbyTimer
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text0
   460  000AA0                     __ptext0:
   461                           	opt stack 0
   462  000AA0                     _main:
   463                           	opt stack 28
   464                           
   465                           ;main.c: 296: keypadStatus currentKeypadStatus;
   466                           ;main.c: 297: systemState_t currentSystemState = NORMAL;
   467                           
   468                           ;incstack = 0
   469  000AA0  0E00               	movlw	0
   470  000AA2  6E27               	movwf	main@currentSystemState,c
   471                           
   472                           ;main.c: 298: unsigned char keypressArray[10];
   473                           ;main.c: 299: unsigned char numOfKeysPressed = 0;
   474  000AA4  0E00               	movlw	0
   475  000AA6  6E29               	movwf	main@numOfKeysPressed,c
   476                           
   477                           ;main.c: 300: unsigned char locker_num = 0;
   478  000AA8  0E00               	movlw	0
   479  000AAA  6E2A               	movwf	main@locker_num,c
   480                           
   481                           ;main.c: 301: unsigned char addr = 0;
   482  000AAC  0E00               	movlw	0
   483  000AAE  6E26               	movwf	main@addr,c
   484                           
   485                           ;main.c: 302: initControllerIO();
   486  000AB0  EC30  F007         	call	_initControllerIO	;wreg free
   487                           
   488                           ;main.c: 303: initKeypad();
   489  000AB4  EC21  F007         	call	_initKeypad	;wreg free
   490                           
   491                           ;main.c: 304: initStandbyTimer();
   492  000AB8  EC19  F007         	call	_initStandbyTimer	;wreg free
   493                           
   494                           ;main.c: 306: INTCONbits.PEIE = 1;
   495  000ABC  8CF2               	bsf	intcon,6,c	;volatile
   496                           
   497                           ;main.c: 307: INTCONbits.GIE = 1;
   498  000ABE  8EF2               	bsf	intcon,7,c	;volatile
   499                           
   500                           ;main.c: 320: for(unsigned char a = 0; a < 10; a++)
   501  000AC0  0E00               	movlw	0
   502  000AC2  6E28               	movwf	main@a,c
   503  000AC4                     l1723:
   504  000AC4  0E09               	movlw	9
   505  000AC6  6428               	cpfsgt	main@a,c
   506  000AC8  D001               	goto	l266
   507  000ACA  D00C               	goto	u820
   508  000ACC                     l266:
   509                           
   510                           ;main.c: 321: keypressArray[a] = 0;
   511  000ACC  5028               	movf	main@a,w,c
   512  000ACE  0D01               	mullw	1
   513  000AD0  0E1C               	movlw	low main@keypressArray
   514  000AD2  24F3               	addwf	prodl,w,c
   515  000AD4  6ED9               	movwf	fsr2l,c
   516  000AD6  0E00               	movlw	high main@keypressArray
   517  000AD8  20F4               	addwfc	prodh,w,c
   518  000ADA  6EDA               	movwf	fsr2h,c
   519  000ADC  0E00               	movlw	0
   520  000ADE  6EDF               	movwf	indf2,c
   521  000AE0  2A28               	incf	main@a,f,c
   522  000AE2  D7F0               	goto	l1723
   523  000AE4                     u820:
   524                           
   525                           ;main.c: 324: {
   526                           ;main.c: 326: getKey(&currentKeypadStatus);
   527                           
   528                           ;main.c: 323: while(1)
   529  000AE4  0E2B               	movlw	low main@currentKeypadStatus
   530  000AE6  6E19               	movwf	getKey@KeypadStatus,c
   531  000AE8  0E00               	movlw	high main@currentKeypadStatus
   532  000AEA  6E1A               	movwf	getKey@KeypadStatus+1,c
   533  000AEC  EC08  F004         	call	_getKey	;wreg free
   534                           
   535                           ;main.c: 328: if(currentKeypadStatus.keyPressIndicator == 1)
   536  000AF0  A02B               	btfss	main@currentKeypadStatus,0,c
   537  000AF2  D7F8               	goto	u820
   538                           
   539                           ;main.c: 329: {
   540                           ;main.c: 330: if(currentKeypadStatus.keyPressed == SP_FUNC_A)
   541  000AF4  0E0B               	movlw	11
   542  000AF6  182C               	xorwf	main@currentKeypadStatus+1,w,c
   543  000AF8  B4D8               	btfsc	status,2,c
   544  000AFA  D7F4               	goto	u820
   545                           
   546                           ;main.c: 334: else if(currentKeypadStatus.keyPressed == SP_FUNC_B)
   547                           
   548                           ;main.c: 331: {
   549                           ;main.c: 333: }
   550  000AFC  0E0C               	movlw	12
   551  000AFE  182C               	xorwf	main@currentKeypadStatus+1,w,c
   552  000B00  B4D8               	btfsc	status,2,c
   553  000B02  D7F0               	goto	u820
   554                           
   555                           ;main.c: 338: else if(currentKeypadStatus.keyPressed == SP_FUNC_ENTER)
   556                           
   557                           ;main.c: 335: {
   558                           ;main.c: 337: }
   559  000B04  0E0F               	movlw	15
   560  000B06  182C               	xorwf	main@currentKeypadStatus+1,w,c
   561  000B08  A4D8               	btfss	status,2,c
   562  000B0A  D01D               	goto	l274
   563                           
   564                           ;main.c: 339: {
   565                           ;main.c: 341: if(currentSystemState == NORMAL)
   566  000B0C  5027               	movf	main@currentSystemState,w,c
   567  000B0E  A4D8               	btfss	status,2,c
   568  000B10  D7E9               	goto	u820
   569                           
   570                           ;main.c: 342: {
   571                           ;main.c: 344: if(0 == arr_to_num(keypressArray, numOfKeysPressed, &locker_num))
   572  000B12  0E1C               	movlw	low main@keypressArray
   573  000B14  6E13               	movwf	arr_to_num@arr,c
   574  000B16  0E00               	movlw	high main@keypressArray
   575  000B18  6E14               	movwf	arr_to_num@arr+1,c
   576  000B1A  C029  F015         	movff	main@numOfKeysPressed,arr_to_num@num_of_elements
   577  000B1E  0E2A               	movlw	low main@locker_num
   578  000B20  6E16               	movwf	arr_to_num@number,c
   579  000B22  0E00               	movlw	high main@locker_num
   580  000B24  6E17               	movwf	arr_to_num@number+1,c
   581  000B26  EC38  F006         	call	_arr_to_num	;wreg free
   582  000B2A  0900               	iorlw	0
   583  000B2C  B4D8               	btfsc	status,2,c
   584  000B2E  EF07  F000         	goto	start
   585                           
   586                           ;main.c: 350: else if(0 == check_lock_num_validity(locker_num))
   587                           
   588                           ;main.c: 348: }
   589                           
   590                           ;main.c: 345: {
   591                           ;main.c: 347: break;
   592  000B32  502A               	movf	main@locker_num,w,c
   593  000B34  EC0A  F007         	call	_check_lock_num_validity
   594  000B38  0900               	iorlw	0
   595  000B3A  B4D8               	btfsc	status,2,c
   596  000B3C  EF07  F000         	goto	start
   597                           
   598                           ;main.c: 355: else
   599                           ;main.c: 356: {
   600                           ;main.c: 357: currentSystemState = UID_ENTERED;
   601                           
   602                           ;main.c: 354: }
   603                           
   604                           ;main.c: 351: {
   605                           ;main.c: 353: break;
   606  000B40  0E01               	movlw	1
   607  000B42  6E27               	movwf	main@currentSystemState,c
   608                           
   609                           ;main.c: 364: }
   610                           ;main.c: 365: }
   611                           
   612                           ;main.c: 361: {
   613                           
   614                           ;main.c: 358: }
   615                           ;main.c: 359: }
   616  000B44  D7CF               	goto	u820
   617  000B46                     l274:
   618                           
   619                           ;main.c: 366: else if(currentKeypadStatus.keyPressed == SP_FUNC_OFF)
   620  000B46  0E0E               	movlw	14
   621  000B48  182C               	xorwf	main@currentKeypadStatus+1,w,c
   622  000B4A  B4D8               	btfsc	status,2,c
   623  000B4C  D7CB               	goto	u820
   624                           
   625                           ;main.c: 370: else if(currentKeypadStatus.keyPressed == SP_FUNC_ON)
   626                           
   627                           ;main.c: 367: {
   628                           ;main.c: 369: }
   629  000B4E  0E0D               	movlw	13
   630  000B50  182C               	xorwf	main@currentKeypadStatus+1,w,c
   631  000B52  A4D8               	btfss	status,2,c
   632  000B54  D018               	goto	l286
   633                           
   634                           ;main.c: 371: {
   635                           ;main.c: 372: if(currentSystemState == UID_ENTERED)
   636  000B56  0427               	decf	main@currentSystemState,w,c
   637  000B58  A4D8               	btfss	status,2,c
   638  000B5A  D7C4               	goto	u820
   639                           
   640                           ;main.c: 373: {
   641                           ;main.c: 375: if(0 == check_password_presence(locker_num))
   642  000B5C  502A               	movf	main@locker_num,w,c
   643  000B5E  ECF9  F006         	call	_check_password_presence
   644  000B62  0900               	iorlw	0
   645  000B64  A4D8               	btfss	status,2,c
   646  000B66  D7BE               	goto	u820
   647                           
   648                           ;main.c: 376: {
   649                           ;main.c: 378: addr = (locker_num - 1) * 10;
   650  000B68  042A               	decf	main@locker_num,w,c
   651  000B6A  0D0A               	mullw	10
   652  000B6C  CFF3 F026          	movff	prodl,main@addr
   653                           
   654                           ;main.c: 379: eepromWriteCode(addr, numOfKeysPressed, keypressArray);
   655  000B70  C029  F016         	movff	main@numOfKeysPressed,eepromWriteCode@codeLenght
   656  000B74  0E1C               	movlw	low main@keypressArray
   657  000B76  6E17               	movwf	eepromWriteCode@codeBuffer,c
   658  000B78  0E00               	movlw	high main@keypressArray
   659  000B7A  6E18               	movwf	eepromWriteCode@codeBuffer+1,c
   660  000B7C  5026               	movf	main@addr,w,c
   661  000B7E  ECC3  F006         	call	_eepromWriteCode
   662                           
   663                           ;main.c: 380: break;
   664  000B82  EF07  F000         	goto	start
   665  000B86                     l286:
   666                           
   667                           ;main.c: 389: else
   668                           ;main.c: 390: {
   669                           ;main.c: 391: keypressArray[numOfKeysPressed++] = currentKeypadStatus.keyPressed;
   670  000B86  5029               	movf	main@numOfKeysPressed,w,c
   671  000B88  0D01               	mullw	1
   672  000B8A  0E1C               	movlw	low main@keypressArray
   673  000B8C  24F3               	addwf	prodl,w,c
   674  000B8E  6ED9               	movwf	fsr2l,c
   675  000B90  0E00               	movlw	high main@keypressArray
   676  000B92  20F4               	addwfc	prodh,w,c
   677  000B94  6EDA               	movwf	fsr2h,c
   678  000B96  C02C  FFDF         	movff	main@currentKeypadStatus+1,indf2
   679  000B9A  2A29               	incf	main@numOfKeysPressed,f,c
   680                           
   681                           ;main.c: 392: if(numOfKeysPressed > 10)
   682  000B9C  0E0A               	movlw	10
   683  000B9E  6429               	cpfsgt	main@numOfKeysPressed,c
   684  000BA0  D7A1               	goto	u820
   685                           
   686                           ;main.c: 393: {
   687                           ;main.c: 394: numOfKeysPressed = 0;
   688  000BA2  0E00               	movlw	0
   689  000BA4  6E29               	movwf	main@numOfKeysPressed,c
   690  000BA6  D79E               	goto	u820
   691  000BA8                     __end_of_main:
   692                           	opt stack 0
   693                           tblptru	equ	0xFF8
   694                           tblptrh	equ	0xFF7
   695                           tblptrl	equ	0xFF6
   696                           tablat	equ	0xFF5
   697                           prodh	equ	0xFF4
   698                           prodl	equ	0xFF3
   699                           intcon	equ	0xFF2
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           indf2	equ	0xFDF
   705                           fsr2h	equ	0xFDA
   706                           fsr2l	equ	0xFD9
   707                           status	equ	0xFD8
   708                           
   709 ;; *************** function _initStandbyTimer *****************
   710 ;; Defined at:
   711 ;;		line 96 in file "timer.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;		None
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg, status,2
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   725 ;;      Params:         0       0       0       0       0       0       0       0       0
   726 ;;      Locals:         0       0       0       0       0       0       0       0       0
   727 ;;      Temps:          0       0       0       0       0       0       0       0       0
   728 ;;      Totals:         0       0       0       0       0       0       0       0       0
   729 ;;Total ram usage:        0 bytes
   730 ;; Hardware stack levels used:    1
   731 ;; Hardware stack levels required when called:    1
   732 ;; This function calls:
   733 ;;		Nothing
   734 ;; This function is called by:
   735 ;;		_main
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           	psect	text1
   740  000E32                     __ptext1:
   741                           	opt stack 0
   742  000E32                     _initStandbyTimer:
   743                           	opt stack 29
   744                           
   745                           ;timer.c: 98: T1CONbits.T1CKPS0 = 1;
   746                           
   747                           ;incstack = 0
   748  000E32  88CD               	bsf	4045,4,c	;volatile
   749                           
   750                           ;timer.c: 99: T1CONbits.T1CKPS1 = 1;
   751  000E34  8ACD               	bsf	4045,5,c	;volatile
   752                           
   753                           ;timer.c: 100: TMR1 = 0;
   754  000E36  0E00               	movlw	0
   755  000E38  6ECF               	movwf	4047,c	;volatile
   756  000E3A  0E00               	movlw	0
   757  000E3C  6ECE               	movwf	4046,c	;volatile
   758                           
   759                           ;timer.c: 101: PIE1bits.TMR1IE = 1;
   760  000E3E  809D               	bsf	3997,0,c	;volatile
   761  000E40  0012               	return		;funcret
   762  000E42                     __end_of_initStandbyTimer:
   763                           	opt stack 0
   764                           tblptru	equ	0xFF8
   765                           tblptrh	equ	0xFF7
   766                           tblptrl	equ	0xFF6
   767                           tablat	equ	0xFF5
   768                           prodh	equ	0xFF4
   769                           prodl	equ	0xFF3
   770                           intcon	equ	0xFF2
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           postdec1	equ	0xFE5
   774                           fsr1l	equ	0xFE1
   775                           indf2	equ	0xFDF
   776                           fsr2h	equ	0xFDA
   777                           fsr2l	equ	0xFD9
   778                           status	equ	0xFD8
   779                           
   780 ;; *************** function _initKeypad *****************
   781 ;; Defined at:
   782 ;;		line 14 in file "Keypad4X4.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, status,2
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   796 ;;      Params:         0       0       0       0       0       0       0       0       0
   797 ;;      Locals:         0       0       0       0       0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0
   799 ;;      Totals:         0       0       0       0       0       0       0       0       0
   800 ;;Total ram usage:        0 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    1
   803 ;; This function calls:
   804 ;;		Nothing
   805 ;; This function is called by:
   806 ;;		_main
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text2
   811  000E42                     __ptext2:
   812                           	opt stack 0
   813  000E42                     _initKeypad:
   814                           	opt stack 29
   815                           
   816                           ;Keypad4X4.c: 16: TRISB = 0x0F;
   817                           
   818                           ;incstack = 0
   819  000E42  0E0F               	movlw	15
   820  000E44  6E93               	movwf	3987,c	;volatile
   821                           
   822                           ;Keypad4X4.c: 17: LATB = 0xFF;
   823  000E46  688A               	setf	3978,c	;volatile
   824                           
   825                           ;Keypad4X4.c: 18: INTCON2bits.RBPU = 0;
   826  000E48  9EF1               	bcf	intcon2,7,c	;volatile
   827                           
   828                           ;Keypad4X4.c: 19: INTCONbits.RBIE = 1;
   829  000E4A  86F2               	bsf	intcon,3,c	;volatile
   830  000E4C  0012               	return		;funcret
   831  000E4E                     __end_of_initKeypad:
   832                           	opt stack 0
   833                           tblptru	equ	0xFF8
   834                           tblptrh	equ	0xFF7
   835                           tblptrl	equ	0xFF6
   836                           tablat	equ	0xFF5
   837                           prodh	equ	0xFF4
   838                           prodl	equ	0xFF3
   839                           intcon	equ	0xFF2
   840                           intcon2	equ	0xFF1
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           postdec1	equ	0xFE5
   844                           fsr1l	equ	0xFE1
   845                           indf2	equ	0xFDF
   846                           fsr2h	equ	0xFDA
   847                           fsr2l	equ	0xFD9
   848                           status	equ	0xFD8
   849                           
   850 ;; *************** function _initControllerIO *****************
   851 ;; Defined at:
   852 ;;		line 250 in file "main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;		None
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		None
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   866 ;;      Params:         0       0       0       0       0       0       0       0       0
   867 ;;      Locals:         0       0       0       0       0       0       0       0       0
   868 ;;      Temps:          0       0       0       0       0       0       0       0       0
   869 ;;      Totals:         0       0       0       0       0       0       0       0       0
   870 ;;Total ram usage:        0 bytes
   871 ;; Hardware stack levels used:    1
   872 ;; Hardware stack levels required when called:    1
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_main
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text3
   881  000E60                     __ptext3:
   882                           	opt stack 0
   883  000E60                     _initControllerIO:
   884                           	opt stack 29
   885                           
   886                           ;incstack = 0
   887  000E60  0012               	return		;funcret
   888  000E62                     __end_of_initControllerIO:
   889                           	opt stack 0
   890                           tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           tblptrl	equ	0xFF6
   893                           tablat	equ	0xFF5
   894                           prodh	equ	0xFF4
   895                           prodl	equ	0xFF3
   896                           intcon	equ	0xFF2
   897                           intcon2	equ	0xFF1
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           postdec1	equ	0xFE5
   901                           fsr1l	equ	0xFE1
   902                           indf2	equ	0xFDF
   903                           fsr2h	equ	0xFDA
   904                           fsr2l	equ	0xFD9
   905                           status	equ	0xFD8
   906                           
   907 ;; *************** function _getKey *****************
   908 ;; Defined at:
   909 ;;		line 28 in file "Keypad4X4.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;  KeypadStatus    2   24[COMRAM] PTR struct .
   912 ;;		 -> main@currentKeypadStatus(2), buttonPressedIndicator@KeypadStatus(2), 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  buttonPresse    1   26[COMRAM] enum E3790
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   924 ;;      Params:         2       0       0       0       0       0       0       0       0
   925 ;;      Locals:         1       0       0       0       0       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0       0       0       0       0
   927 ;;      Totals:         3       0       0       0       0       0       0       0       0
   928 ;;Total ram usage:        3 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    2
   931 ;; This function calls:
   932 ;;		_delay_ms
   933 ;; This function is called by:
   934 ;;		_main
   935 ;;		_buttonPressedIndicator
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text4
   940  000810                     __ptext4:
   941                           	opt stack 0
   942  000810                     _getKey:
   943                           	opt stack 28
   944                           
   945                           ;Keypad4X4.c: 30: enum button buttonPressed;
   946                           ;Keypad4X4.c: 32: LATB = 0x7F;
   947                           
   948                           ;incstack = 0
   949  000810  0E7F               	movlw	127
   950  000812  6E8A               	movwf	3978,c	;volatile
   951                           
   952                           ;Keypad4X4.c: 33: if ((PORTB & 0x08) == 0x00)
   953  000814  B681               	btfsc	3969,3,c	;volatile
   954  000816  D012               	goto	l47
   955                           
   956                           ;Keypad4X4.c: 34: {
   957                           ;Keypad4X4.c: 35: delay_ms(5);
   958  000818  0E00               	movlw	0
   959  00081A  6E14               	movwf	delay_ms@time+1,c
   960  00081C  0E05               	movlw	5
   961  00081E  6E13               	movwf	delay_ms@time,c
   962  000820  ECA5  F006         	call	_delay_ms	;wreg free
   963                           
   964                           ;Keypad4X4.c: 36: buttonPressed = button_1;
   965  000824  0E01               	movlw	1
   966  000826                     L1:
   967  000826  6E1B               	movwf	getKey@buttonPressed,c
   968  000828  D013               	goto	l1481
   969  00082A                     l1471:
   970                           
   971                           ;Keypad4X4.c: 38: KeypadStatus->keyPressed = buttonPressed;
   972  00082A  EE20 F001          	lfsr	2,1
   973  00082E  5019               	movf	getKey@KeypadStatus,w,c
   974  000830  26D9               	addwf	fsr2l,f,c
   975  000832  501A               	movf	getKey@KeypadStatus+1,w,c
   976  000834  22DA               	addwfc	fsr2h,f,c
   977  000836  C01B  FFDF         	movff	getKey@buttonPressed,indf2
   978                           
   979                           ;Keypad4X4.c: 39: return;
   980  00083A  0012               	return	
   981  00083C                     l47:
   982                           
   983                           ;Keypad4X4.c: 42: else if ((PORTB & 0x04) == 0x00)
   984  00083C  B481               	btfsc	3969,2,c	;volatile
   985  00083E  D00E               	goto	l50
   986                           
   987                           ;Keypad4X4.c: 43: {
   988                           ;Keypad4X4.c: 44: delay_ms(5);
   989  000840  0E00               	movlw	0
   990  000842  6E14               	movwf	delay_ms@time+1,c
   991  000844  0E05               	movlw	5
   992  000846  6E13               	movwf	delay_ms@time,c
   993  000848  ECA5  F006         	call	_delay_ms	;wreg free
   994                           
   995                           ;Keypad4X4.c: 45: buttonPressed = button_2;
   996  00084C  0E02               	movlw	2
   997  00084E  D7EB               	goto	L1
   998  000850                     l1481:
   999                           
  1000                           ;Keypad4X4.c: 46: KeypadStatus->keyPressIndicator = 1;
  1001  000850  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1002  000854  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1003  000858  80DF               	bsf	indf2,0,c
  1004  00085A  D7E7               	goto	l1471
  1005  00085C                     l50:
  1006                           
  1007                           ;Keypad4X4.c: 51: else if ((PORTB & 0x02) == 0x00)
  1008  00085C  B281               	btfsc	3969,1,c	;volatile
  1009  00085E  D008               	goto	l52
  1010                           
  1011                           ;Keypad4X4.c: 52: {
  1012                           ;Keypad4X4.c: 53: delay_ms(5);
  1013  000860  0E00               	movlw	0
  1014  000862  6E14               	movwf	delay_ms@time+1,c
  1015  000864  0E05               	movlw	5
  1016  000866  6E13               	movwf	delay_ms@time,c
  1017  000868  ECA5  F006         	call	_delay_ms	;wreg free
  1018                           
  1019                           ;Keypad4X4.c: 54: buttonPressed = button_3;
  1020  00086C  0E03               	movlw	3
  1021  00086E  D7DB               	goto	L1
  1022  000870                     l52:
  1023                           
  1024                           ;Keypad4X4.c: 60: else if ((PORTB & 0x01) == 0x00)
  1025  000870  B081               	btfsc	3969,0,c	;volatile
  1026  000872  D016               	goto	l54
  1027                           
  1028                           ;Keypad4X4.c: 61: {
  1029                           ;Keypad4X4.c: 62: delay_ms(5);
  1030  000874  0E00               	movlw	0
  1031  000876  6E14               	movwf	delay_ms@time+1,c
  1032  000878  0E05               	movlw	5
  1033  00087A  6E13               	movwf	delay_ms@time,c
  1034  00087C  ECA5  F006         	call	_delay_ms	;wreg free
  1035                           
  1036                           ;Keypad4X4.c: 63: buttonPressed = NO_KEY_TUNE;
  1037  000880  0E0A               	movlw	10
  1038  000882  6E1B               	movwf	getKey@buttonPressed,c
  1039                           
  1040                           ;Keypad4X4.c: 64: KeypadStatus->keyPressIndicator = 1;
  1041  000884  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1042  000888  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1043  00088C  80DF               	bsf	indf2,0,c
  1044                           
  1045                           ;Keypad4X4.c: 65: KeypadStatus->keyPressed = buttonPressed;
  1046  00088E  EE20 F001          	lfsr	2,1
  1047  000892  5019               	movf	getKey@KeypadStatus,w,c
  1048  000894  26D9               	addwf	fsr2l,f,c
  1049  000896  501A               	movf	getKey@KeypadStatus+1,w,c
  1050  000898  22DA               	addwfc	fsr2h,f,c
  1051  00089A  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1052                           
  1053                           ;Keypad4X4.c: 66: return;
  1054  00089E  0012               	return	
  1055  0008A0                     l54:
  1056                           
  1057                           ;Keypad4X4.c: 67: }
  1058                           ;Keypad4X4.c: 69: LATB = 0xBF;
  1059  0008A0  0EBF               	movlw	191
  1060  0008A2  6E8A               	movwf	3978,c	;volatile
  1061                           
  1062                           ;Keypad4X4.c: 70: if ((PORTB & 0x08) == 0x00)
  1063  0008A4  B681               	btfsc	3969,3,c	;volatile
  1064  0008A6  D012               	goto	l55
  1065                           
  1066                           ;Keypad4X4.c: 71: {
  1067                           ;Keypad4X4.c: 72: delay_ms(5);
  1068  0008A8  0E00               	movlw	0
  1069  0008AA  6E14               	movwf	delay_ms@time+1,c
  1070  0008AC  0E05               	movlw	5
  1071  0008AE  6E13               	movwf	delay_ms@time,c
  1072  0008B0  ECA5  F006         	call	_delay_ms	;wreg free
  1073                           
  1074                           ;Keypad4X4.c: 73: buttonPressed = button_4;
  1075  0008B4  0E04               	movlw	4
  1076  0008B6                     L2:
  1077  0008B6  6E1B               	movwf	getKey@buttonPressed,c
  1078  0008B8  D013               	goto	l1531
  1079  0008BA                     l1521:
  1080                           
  1081                           ;Keypad4X4.c: 75: KeypadStatus->keyPressed = buttonPressed;
  1082  0008BA  EE20 F001          	lfsr	2,1
  1083  0008BE  5019               	movf	getKey@KeypadStatus,w,c
  1084  0008C0  26D9               	addwf	fsr2l,f,c
  1085  0008C2  501A               	movf	getKey@KeypadStatus+1,w,c
  1086  0008C4  22DA               	addwfc	fsr2h,f,c
  1087  0008C6  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1088                           
  1089                           ;Keypad4X4.c: 76: return;
  1090  0008CA  0012               	return	
  1091  0008CC                     l55:
  1092                           
  1093                           ;Keypad4X4.c: 79: else if ((PORTB & 0x04) == 0x00)
  1094  0008CC  B481               	btfsc	3969,2,c	;volatile
  1095  0008CE  D00E               	goto	l57
  1096                           
  1097                           ;Keypad4X4.c: 80: {
  1098                           ;Keypad4X4.c: 81: delay_ms(5);
  1099  0008D0  0E00               	movlw	0
  1100  0008D2  6E14               	movwf	delay_ms@time+1,c
  1101  0008D4  0E05               	movlw	5
  1102  0008D6  6E13               	movwf	delay_ms@time,c
  1103  0008D8  ECA5  F006         	call	_delay_ms	;wreg free
  1104                           
  1105                           ;Keypad4X4.c: 82: buttonPressed = button_5;
  1106  0008DC  0E05               	movlw	5
  1107  0008DE  D7EB               	goto	L2
  1108  0008E0                     l1531:
  1109                           
  1110                           ;Keypad4X4.c: 83: KeypadStatus->keyPressIndicator = 1;
  1111  0008E0  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1112  0008E4  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1113  0008E8  80DF               	bsf	indf2,0,c
  1114  0008EA  D7E7               	goto	l1521
  1115  0008EC                     l57:
  1116                           
  1117                           ;Keypad4X4.c: 88: else if ((PORTB & 0x02) == 0x00)
  1118  0008EC  B281               	btfsc	3969,1,c	;volatile
  1119  0008EE  D008               	goto	l59
  1120                           
  1121                           ;Keypad4X4.c: 89: {
  1122                           ;Keypad4X4.c: 90: delay_ms(5);
  1123  0008F0  0E00               	movlw	0
  1124  0008F2  6E14               	movwf	delay_ms@time+1,c
  1125  0008F4  0E05               	movlw	5
  1126  0008F6  6E13               	movwf	delay_ms@time,c
  1127  0008F8  ECA5  F006         	call	_delay_ms	;wreg free
  1128                           
  1129                           ;Keypad4X4.c: 91: buttonPressed = button_6;
  1130  0008FC  0E06               	movlw	6
  1131  0008FE  D7DB               	goto	L2
  1132  000900                     l59:
  1133                           
  1134                           ;Keypad4X4.c: 97: else if ((PORTB & 0x01) == 0x00)
  1135  000900  B081               	btfsc	3969,0,c	;volatile
  1136  000902  D016               	goto	l61
  1137                           
  1138                           ;Keypad4X4.c: 98: {
  1139                           ;Keypad4X4.c: 99: delay_ms(5);
  1140  000904  0E00               	movlw	0
  1141  000906  6E14               	movwf	delay_ms@time+1,c
  1142  000908  0E05               	movlw	5
  1143  00090A  6E13               	movwf	delay_ms@time,c
  1144  00090C  ECA5  F006         	call	_delay_ms	;wreg free
  1145                           
  1146                           ;Keypad4X4.c: 100: buttonPressed = SP_FUNC_A;
  1147  000910  0E0B               	movlw	11
  1148  000912  6E1B               	movwf	getKey@buttonPressed,c
  1149                           
  1150                           ;Keypad4X4.c: 101: KeypadStatus->keyPressIndicator = 1;
  1151  000914  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1152  000918  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1153  00091C  80DF               	bsf	indf2,0,c
  1154                           
  1155                           ;Keypad4X4.c: 102: KeypadStatus->keyPressed = buttonPressed;
  1156  00091E  EE20 F001          	lfsr	2,1
  1157  000922  5019               	movf	getKey@KeypadStatus,w,c
  1158  000924  26D9               	addwf	fsr2l,f,c
  1159  000926  501A               	movf	getKey@KeypadStatus+1,w,c
  1160  000928  22DA               	addwfc	fsr2h,f,c
  1161  00092A  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1162                           
  1163                           ;Keypad4X4.c: 103: return;
  1164  00092E  0012               	return	
  1165  000930                     l61:
  1166                           
  1167                           ;Keypad4X4.c: 104: }
  1168                           ;Keypad4X4.c: 106: LATB = 0xDF;
  1169  000930  0EDF               	movlw	223
  1170  000932  6E8A               	movwf	3978,c	;volatile
  1171                           
  1172                           ;Keypad4X4.c: 107: if ((PORTB & 0x08) == 0x00)
  1173  000934  B681               	btfsc	3969,3,c	;volatile
  1174  000936  D012               	goto	l62
  1175                           
  1176                           ;Keypad4X4.c: 108: {
  1177                           ;Keypad4X4.c: 109: delay_ms(5);
  1178  000938  0E00               	movlw	0
  1179  00093A  6E14               	movwf	delay_ms@time+1,c
  1180  00093C  0E05               	movlw	5
  1181  00093E  6E13               	movwf	delay_ms@time,c
  1182  000940  ECA5  F006         	call	_delay_ms	;wreg free
  1183                           
  1184                           ;Keypad4X4.c: 110: buttonPressed = button_7;
  1185  000944  0E07               	movlw	7
  1186  000946                     L3:
  1187  000946  6E1B               	movwf	getKey@buttonPressed,c
  1188  000948  D013               	goto	l1581
  1189  00094A                     l1571:
  1190                           
  1191                           ;Keypad4X4.c: 112: KeypadStatus->keyPressed = buttonPressed;
  1192  00094A  EE20 F001          	lfsr	2,1
  1193  00094E  5019               	movf	getKey@KeypadStatus,w,c
  1194  000950  26D9               	addwf	fsr2l,f,c
  1195  000952  501A               	movf	getKey@KeypadStatus+1,w,c
  1196  000954  22DA               	addwfc	fsr2h,f,c
  1197  000956  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1198                           
  1199                           ;Keypad4X4.c: 113: return;
  1200  00095A  0012               	return	
  1201  00095C                     l62:
  1202                           
  1203                           ;Keypad4X4.c: 116: else if ((PORTB & 0x04) == 0x00)
  1204  00095C  B481               	btfsc	3969,2,c	;volatile
  1205  00095E  D00E               	goto	l64
  1206                           
  1207                           ;Keypad4X4.c: 117: {
  1208                           ;Keypad4X4.c: 118: delay_ms(5);
  1209  000960  0E00               	movlw	0
  1210  000962  6E14               	movwf	delay_ms@time+1,c
  1211  000964  0E05               	movlw	5
  1212  000966  6E13               	movwf	delay_ms@time,c
  1213  000968  ECA5  F006         	call	_delay_ms	;wreg free
  1214                           
  1215                           ;Keypad4X4.c: 119: buttonPressed = button_8;
  1216  00096C  0E08               	movlw	8
  1217  00096E  D7EB               	goto	L3
  1218  000970                     l1581:
  1219                           
  1220                           ;Keypad4X4.c: 120: KeypadStatus->keyPressIndicator = 1;
  1221  000970  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1222  000974  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1223  000978  80DF               	bsf	indf2,0,c
  1224  00097A  D7E7               	goto	l1571
  1225  00097C                     l64:
  1226                           
  1227                           ;Keypad4X4.c: 125: else if ((PORTB & 0x02) == 0x00)
  1228  00097C  B281               	btfsc	3969,1,c	;volatile
  1229  00097E  D008               	goto	l66
  1230                           
  1231                           ;Keypad4X4.c: 126: {
  1232                           ;Keypad4X4.c: 127: delay_ms(5);
  1233  000980  0E00               	movlw	0
  1234  000982  6E14               	movwf	delay_ms@time+1,c
  1235  000984  0E05               	movlw	5
  1236  000986  6E13               	movwf	delay_ms@time,c
  1237  000988  ECA5  F006         	call	_delay_ms	;wreg free
  1238                           
  1239                           ;Keypad4X4.c: 128: buttonPressed = button_9;
  1240  00098C  0E09               	movlw	9
  1241  00098E  D7DB               	goto	L3
  1242  000990                     l66:
  1243                           
  1244                           ;Keypad4X4.c: 134: else if ((PORTB & 0x01) == 0x00)
  1245  000990  B081               	btfsc	3969,0,c	;volatile
  1246  000992  D016               	goto	l68
  1247                           
  1248                           ;Keypad4X4.c: 135: {
  1249                           ;Keypad4X4.c: 136: delay_ms(5);
  1250  000994  0E00               	movlw	0
  1251  000996  6E14               	movwf	delay_ms@time+1,c
  1252  000998  0E05               	movlw	5
  1253  00099A  6E13               	movwf	delay_ms@time,c
  1254  00099C  ECA5  F006         	call	_delay_ms	;wreg free
  1255                           
  1256                           ;Keypad4X4.c: 137: buttonPressed = SP_FUNC_B;
  1257  0009A0  0E0C               	movlw	12
  1258  0009A2  6E1B               	movwf	getKey@buttonPressed,c
  1259                           
  1260                           ;Keypad4X4.c: 138: KeypadStatus->keyPressIndicator = 1;
  1261  0009A4  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1262  0009A8  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1263  0009AC  80DF               	bsf	indf2,0,c
  1264                           
  1265                           ;Keypad4X4.c: 139: KeypadStatus->keyPressed = buttonPressed;
  1266  0009AE  EE20 F001          	lfsr	2,1
  1267  0009B2  5019               	movf	getKey@KeypadStatus,w,c
  1268  0009B4  26D9               	addwf	fsr2l,f,c
  1269  0009B6  501A               	movf	getKey@KeypadStatus+1,w,c
  1270  0009B8  22DA               	addwfc	fsr2h,f,c
  1271  0009BA  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1272                           
  1273                           ;Keypad4X4.c: 140: return;
  1274  0009BE  0012               	return	
  1275  0009C0                     l68:
  1276                           
  1277                           ;Keypad4X4.c: 141: }
  1278                           ;Keypad4X4.c: 143: LATB = 0xEF;
  1279  0009C0  0EEF               	movlw	239
  1280  0009C2  6E8A               	movwf	3978,c	;volatile
  1281                           
  1282                           ;Keypad4X4.c: 144: if ((PORTB & 0x08) == 0x00)
  1283  0009C4  B681               	btfsc	3969,3,c	;volatile
  1284  0009C6  D016               	goto	l69
  1285                           
  1286                           ;Keypad4X4.c: 145: {
  1287                           ;Keypad4X4.c: 146: delay_ms(5);
  1288  0009C8  0E00               	movlw	0
  1289  0009CA  6E14               	movwf	delay_ms@time+1,c
  1290  0009CC  0E05               	movlw	5
  1291  0009CE  6E13               	movwf	delay_ms@time,c
  1292  0009D0  ECA5  F006         	call	_delay_ms	;wreg free
  1293                           
  1294                           ;Keypad4X4.c: 147: buttonPressed = SP_FUNC_ON;
  1295  0009D4  0E0D               	movlw	13
  1296  0009D6  6E1B               	movwf	getKey@buttonPressed,c
  1297                           
  1298                           ;Keypad4X4.c: 148: KeypadStatus->keyPressIndicator = 1;
  1299  0009D8  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1300  0009DC  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1301  0009E0  80DF               	bsf	indf2,0,c
  1302                           
  1303                           ;Keypad4X4.c: 149: KeypadStatus->keyPressed = buttonPressed;
  1304  0009E2  EE20 F001          	lfsr	2,1
  1305  0009E6  5019               	movf	getKey@KeypadStatus,w,c
  1306  0009E8  26D9               	addwf	fsr2l,f,c
  1307  0009EA  501A               	movf	getKey@KeypadStatus+1,w,c
  1308  0009EC  22DA               	addwfc	fsr2h,f,c
  1309  0009EE  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1310                           
  1311                           ;Keypad4X4.c: 151: }
  1312                           
  1313                           ;Keypad4X4.c: 150: return;
  1314  0009F2  0012               	return	
  1315  0009F4                     l69:
  1316                           
  1317                           ;Keypad4X4.c: 153: else if ((PORTB & 0x04) == 0x00)
  1318  0009F4  B481               	btfsc	3969,2,c	;volatile
  1319  0009F6  D016               	goto	l71
  1320                           
  1321                           ;Keypad4X4.c: 154: {
  1322                           ;Keypad4X4.c: 155: delay_ms(5);
  1323  0009F8  0E00               	movlw	0
  1324  0009FA  6E14               	movwf	delay_ms@time+1,c
  1325  0009FC  0E05               	movlw	5
  1326  0009FE  6E13               	movwf	delay_ms@time,c
  1327  000A00  ECA5  F006         	call	_delay_ms	;wreg free
  1328                           
  1329                           ;Keypad4X4.c: 156: buttonPressed = button_0;
  1330  000A04  0E00               	movlw	0
  1331  000A06  6E1B               	movwf	getKey@buttonPressed,c
  1332                           
  1333                           ;Keypad4X4.c: 157: KeypadStatus->keyPressIndicator = 1;
  1334  000A08  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1335  000A0C  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1336  000A10  80DF               	bsf	indf2,0,c
  1337                           
  1338                           ;Keypad4X4.c: 158: KeypadStatus->keyPressed = buttonPressed;
  1339  000A12  EE20 F001          	lfsr	2,1
  1340  000A16  5019               	movf	getKey@KeypadStatus,w,c
  1341  000A18  26D9               	addwf	fsr2l,f,c
  1342  000A1A  501A               	movf	getKey@KeypadStatus+1,w,c
  1343  000A1C  22DA               	addwfc	fsr2h,f,c
  1344  000A1E  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1345                           
  1346                           ;Keypad4X4.c: 160: }
  1347                           
  1348                           ;Keypad4X4.c: 159: return;
  1349  000A22  0012               	return	
  1350  000A24                     l71:
  1351                           
  1352                           ;Keypad4X4.c: 162: else if ((PORTB & 0x02) == 0x00)
  1353  000A24  B281               	btfsc	3969,1,c	;volatile
  1354  000A26  D016               	goto	l73
  1355                           
  1356                           ;Keypad4X4.c: 163: {
  1357                           ;Keypad4X4.c: 164: delay_ms(5);
  1358  000A28  0E00               	movlw	0
  1359  000A2A  6E14               	movwf	delay_ms@time+1,c
  1360  000A2C  0E05               	movlw	5
  1361  000A2E  6E13               	movwf	delay_ms@time,c
  1362  000A30  ECA5  F006         	call	_delay_ms	;wreg free
  1363                           
  1364                           ;Keypad4X4.c: 165: buttonPressed = SP_FUNC_ENTER;
  1365  000A34  0E0F               	movlw	15
  1366  000A36  6E1B               	movwf	getKey@buttonPressed,c
  1367                           
  1368                           ;Keypad4X4.c: 166: KeypadStatus->keyPressIndicator = 1;
  1369  000A38  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1370  000A3C  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1371  000A40  80DF               	bsf	indf2,0,c
  1372                           
  1373                           ;Keypad4X4.c: 167: KeypadStatus->keyPressed = buttonPressed;
  1374  000A42  EE20 F001          	lfsr	2,1
  1375  000A46  5019               	movf	getKey@KeypadStatus,w,c
  1376  000A48  26D9               	addwf	fsr2l,f,c
  1377  000A4A  501A               	movf	getKey@KeypadStatus+1,w,c
  1378  000A4C  22DA               	addwfc	fsr2h,f,c
  1379  000A4E  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1380                           
  1381                           ;Keypad4X4.c: 169: }
  1382                           
  1383                           ;Keypad4X4.c: 168: return;
  1384  000A52  0012               	return	
  1385  000A54                     l73:
  1386                           
  1387                           ;Keypad4X4.c: 171: else if ((PORTB & 0x01) == 0x00)
  1388  000A54  B081               	btfsc	3969,0,c	;volatile
  1389  000A56  D016               	goto	l75
  1390                           
  1391                           ;Keypad4X4.c: 172: {
  1392                           ;Keypad4X4.c: 173: delay_ms(5);
  1393  000A58  0E00               	movlw	0
  1394  000A5A  6E14               	movwf	delay_ms@time+1,c
  1395  000A5C  0E05               	movlw	5
  1396  000A5E  6E13               	movwf	delay_ms@time,c
  1397  000A60  ECA5  F006         	call	_delay_ms	;wreg free
  1398                           
  1399                           ;Keypad4X4.c: 174: buttonPressed = SP_FUNC_OFF;
  1400  000A64  0E0E               	movlw	14
  1401  000A66  6E1B               	movwf	getKey@buttonPressed,c
  1402                           
  1403                           ;Keypad4X4.c: 175: KeypadStatus->keyPressIndicator = 1;
  1404  000A68  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1405  000A6C  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1406  000A70  80DF               	bsf	indf2,0,c
  1407                           
  1408                           ;Keypad4X4.c: 176: KeypadStatus->keyPressed = buttonPressed;
  1409  000A72  EE20 F001          	lfsr	2,1
  1410  000A76  5019               	movf	getKey@KeypadStatus,w,c
  1411  000A78  26D9               	addwf	fsr2l,f,c
  1412  000A7A  501A               	movf	getKey@KeypadStatus+1,w,c
  1413  000A7C  22DA               	addwfc	fsr2h,f,c
  1414  000A7E  C01B  FFDF         	movff	getKey@buttonPressed,indf2
  1415                           
  1416                           ;Keypad4X4.c: 178: }
  1417                           
  1418                           ;Keypad4X4.c: 177: return;
  1419  000A82  0012               	return	
  1420  000A84                     l75:
  1421                           
  1422                           ;Keypad4X4.c: 180: else {
  1423                           ;Keypad4X4.c: 181: KeypadStatus->keyPressIndicator = 0;
  1424  000A84  C019  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1425  000A88  C01A  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1426  000A8C  90DF               	bcf	indf2,0,c
  1427                           
  1428                           ;Keypad4X4.c: 182: KeypadStatus->keyPressed = NONE;
  1429  000A8E  EE20 F001          	lfsr	2,1
  1430  000A92  5019               	movf	getKey@KeypadStatus,w,c
  1431  000A94  26D9               	addwf	fsr2l,f,c
  1432  000A96  501A               	movf	getKey@KeypadStatus+1,w,c
  1433  000A98  22DA               	addwfc	fsr2h,f,c
  1434  000A9A  0E10               	movlw	16
  1435  000A9C  6EDF               	movwf	indf2,c
  1436                           
  1437                           ;Keypad4X4.c: 183: return;
  1438  000A9E  0012               	return	
  1439  000AA0                     __end_of_getKey:
  1440                           	opt stack 0
  1441                           tblptru	equ	0xFF8
  1442                           tblptrh	equ	0xFF7
  1443                           tblptrl	equ	0xFF6
  1444                           tablat	equ	0xFF5
  1445                           prodh	equ	0xFF4
  1446                           prodl	equ	0xFF3
  1447                           intcon	equ	0xFF2
  1448                           intcon2	equ	0xFF1
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           postdec1	equ	0xFE5
  1452                           fsr1l	equ	0xFE1
  1453                           indf2	equ	0xFDF
  1454                           fsr2h	equ	0xFDA
  1455                           fsr2l	equ	0xFD9
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _delay_ms *****************
  1459 ;; Defined at:
  1460 ;;		line 197 in file "Keypad4X4.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  time            2   18[COMRAM] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  j               2   22[COMRAM] int 
  1465 ;;  i               2   20[COMRAM] int 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1475 ;;      Params:         2       0       0       0       0       0       0       0       0
  1476 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1477 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1478 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1479 ;;Total ram usage:        6 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    1
  1482 ;; This function calls:
  1483 ;;		Nothing
  1484 ;; This function is called by:
  1485 ;;		_getKey
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text5
  1490  000D4A                     __ptext5:
  1491                           	opt stack 0
  1492  000D4A                     _delay_ms:
  1493                           	opt stack 28
  1494                           
  1495                           ;Keypad4X4.c: 199: int i, j;
  1496                           ;Keypad4X4.c: 200: for(i=0;i<5000;i++)
  1497                           
  1498                           ;incstack = 0
  1499  000D4A  0E00               	movlw	0
  1500  000D4C  6E16               	movwf	delay_ms@i+1,c
  1501  000D4E  0E00               	movlw	0
  1502  000D50  6E15               	movwf	delay_ms@i,c
  1503  000D52                     l1431:
  1504  000D52  BE16               	btfsc	delay_ms@i+1,7,c
  1505  000D54  D006               	goto	l84
  1506  000D56  0E88               	movlw	136
  1507  000D58  5C15               	subwf	delay_ms@i,w,c
  1508  000D5A  0E13               	movlw	19
  1509  000D5C  5816               	subwfb	delay_ms@i+1,w,c
  1510  000D5E  B0D8               	btfsc	status,0,c
  1511  000D60  0012               	return	
  1512  000D62                     l84:
  1513                           
  1514                           ;Keypad4X4.c: 201: {
  1515                           ;Keypad4X4.c: 202: for(j=0;j<2;j++)
  1516  000D62  0E00               	movlw	0
  1517  000D64  6E18               	movwf	delay_ms@j+1,c
  1518  000D66  0E00               	movlw	0
  1519  000D68  6E17               	movwf	delay_ms@j,c
  1520  000D6A                     l1437:
  1521  000D6A  BE18               	btfsc	delay_ms@j+1,7,c
  1522  000D6C  D006               	goto	l86
  1523  000D6E  5018               	movf	delay_ms@j+1,w,c
  1524  000D70  E107               	bnz	l1445
  1525  000D72  0E02               	movlw	2
  1526  000D74  5C17               	subwf	delay_ms@j,w,c
  1527  000D76  B0D8               	btfsc	status,0,c
  1528  000D78  D003               	goto	u570
  1529  000D7A                     l86:
  1530                           
  1531                           ;Keypad4X4.c: 203: {
  1532  000D7A  4A17               	infsnz	delay_ms@j,f,c
  1533  000D7C  2A18               	incf	delay_ms@j+1,f,c
  1534  000D7E  D7F5               	goto	l1437
  1535  000D80                     u570:
  1536  000D80                     l1445:
  1537  000D80  4A15               	infsnz	delay_ms@i,f,c
  1538  000D82  2A16               	incf	delay_ms@i+1,f,c
  1539  000D84  D7E6               	goto	l1431
  1540  000D86                     __end_of_delay_ms:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           prodh	equ	0xFF4
  1547                           prodl	equ	0xFF3
  1548                           intcon	equ	0xFF2
  1549                           intcon2	equ	0xFF1
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           fsr1l	equ	0xFE1
  1554                           indf2	equ	0xFDF
  1555                           fsr2h	equ	0xFDA
  1556                           fsr2l	equ	0xFD9
  1557                           status	equ	0xFD8
  1558                           
  1559 ;; *************** function _eepromWriteCode *****************
  1560 ;; Defined at:
  1561 ;;		line 8 in file "eeprom_functions.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  eepromWriteA    1    wreg     unsigned char 
  1564 ;;  codeLenght      1   21[COMRAM] unsigned char 
  1565 ;;  codeBuffer      2   22[COMRAM] PTR unsigned char 
  1566 ;;		 -> main@keypressArray(10), 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  eepromWriteA    1   24[COMRAM] unsigned char 
  1569 ;;  i               1   25[COMRAM] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1579 ;;      Params:         3       0       0       0       0       0       0       0       0
  1580 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1582 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1583 ;;Total ram usage:        5 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    2
  1586 ;; This function calls:
  1587 ;;		_writeEEPROM
  1588 ;; This function is called by:
  1589 ;;		_main
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text6
  1594  000D86                     __ptext6:
  1595                           	opt stack 0
  1596  000D86                     _eepromWriteCode:
  1597                           	opt stack 28
  1598                           
  1599                           ;incstack = 0
  1600                           ;eepromWriteCode@eepromWriteAddr stored from wreg
  1601  000D86  6E19               	movwf	eepromWriteCode@eepromWriteAddr,c
  1602                           
  1603                           ;eeprom_functions.c: 10: writeEEPROM(eepromWriteAddr, codeLenght);
  1604  000D88  C016  F013         	movff	eepromWriteCode@codeLenght,writeEEPROM@datas
  1605  000D8C  5019               	movf	eepromWriteCode@eepromWriteAddr,w,c
  1606  000D8E  ECE0  F006         	call	_writeEEPROM
  1607                           
  1608                           ;eeprom_functions.c: 11: for(unsigned char i=0; i <= codeLenght; i++)
  1609  000D92  0E00               	movlw	0
  1610  000D94  6E1A               	movwf	eepromWriteCode@i,c
  1611  000D96  D00F               	goto	l17
  1612  000D98                     
  1613                           ;eeprom_functions.c: 12: {
  1614                           ;eeprom_functions.c: 13: eepromWriteAddr++;
  1615  000D98  2A19               	incf	eepromWriteCode@eepromWriteAddr,f,c
  1616                           
  1617                           ;eeprom_functions.c: 15: writeEEPROM(eepromWriteAddr, *(codeBuffer + i));
  1618  000D9A  501A               	movf	eepromWriteCode@i,w,c
  1619  000D9C  0D01               	mullw	1
  1620  000D9E  50F3               	movf	prodl,w,c
  1621  000DA0  2417               	addwf	eepromWriteCode@codeBuffer,w,c
  1622  000DA2  6ED9               	movwf	fsr2l,c
  1623  000DA4  50F4               	movf	prodh,w,c
  1624  000DA6  2018               	addwfc	eepromWriteCode@codeBuffer+1,w,c
  1625  000DA8  6EDA               	movwf	fsr2h,c
  1626  000DAA  50DF               	movf	indf2,w,c
  1627  000DAC  6E13               	movwf	writeEEPROM@datas,c
  1628  000DAE  5019               	movf	eepromWriteCode@eepromWriteAddr,w,c
  1629  000DB0  ECE0  F006         	call	_writeEEPROM
  1630  000DB4  2A1A               	incf	eepromWriteCode@i,f,c
  1631  000DB6                     l17:
  1632  000DB6  501A               	movf	eepromWriteCode@i,w,c
  1633  000DB8  5C16               	subwf	eepromWriteCode@codeLenght,w,c
  1634  000DBA  A0D8               	btfss	status,0,c
  1635  000DBC  0012               	return	
  1636  000DBE  D7EC               	goto	l18
  1637  000DC0                     __end_of_eepromWriteCode:
  1638                           	opt stack 0
  1639                           tblptru	equ	0xFF8
  1640                           tblptrh	equ	0xFF7
  1641                           tblptrl	equ	0xFF6
  1642                           tablat	equ	0xFF5
  1643                           prodh	equ	0xFF4
  1644                           prodl	equ	0xFF3
  1645                           intcon	equ	0xFF2
  1646                           intcon2	equ	0xFF1
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           postdec1	equ	0xFE5
  1650                           fsr1l	equ	0xFE1
  1651                           indf2	equ	0xFDF
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           
  1656 ;; *************** function _writeEEPROM *****************
  1657 ;; Defined at:
  1658 ;;		line 19 in file "eeprom_functions.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  address         1    wreg     unsigned char 
  1661 ;;  datas           1   18[COMRAM] unsigned char 
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;  address         1   19[COMRAM] unsigned char 
  1664 ;;  gie_Status      1   20[COMRAM] unsigned char 
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  1    wreg      void 
  1667 ;; Registers used:
  1668 ;;		wreg, status,2
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1674 ;;      Params:         1       0       0       0       0       0       0       0       0
  1675 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1677 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1678 ;;Total ram usage:        3 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    1
  1681 ;; This function calls:
  1682 ;;		Nothing
  1683 ;; This function is called by:
  1684 ;;		_eepromWriteCode
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text7
  1689  000DC0                     __ptext7:
  1690                           	opt stack 0
  1691  000DC0                     _writeEEPROM:
  1692                           	opt stack 28
  1693                           
  1694                           ;incstack = 0
  1695                           ;writeEEPROM@address stored from wreg
  1696  000DC0  6E14               	movwf	writeEEPROM@address,c
  1697  000DC2                     
  1698                           ;eeprom_functions.c: 21: unsigned char gie_Status;
  1699                           ;eeprom_functions.c: 23: while(EECON1bits.WR);
  1700  000DC2  B2A6               	btfsc	4006,1,c	;volsfr
  1701  000DC4  D7FE               	goto	l1407
  1702                           
  1703                           ;eeprom_functions.c: 24: EEADR = address;
  1704  000DC6  C014  FFA9         	movff	writeEEPROM@address,4009	;volatile
  1705                           
  1706                           ;eeprom_functions.c: 25: EEDATA = datas;
  1707  000DCA  C013  FFA8         	movff	writeEEPROM@datas,4008	;volatile
  1708                           
  1709                           ;eeprom_functions.c: 26: EECON1bits.WREN = 1;
  1710  000DCE  84A6               	bsf	4006,2,c	;volsfr
  1711                           
  1712                           ;eeprom_functions.c: 27: gie_Status = INTCONbits.GIE;
  1713  000DD0  0E00               	movlw	0
  1714  000DD2  BEF2               	btfsc	intcon,7,c	;volatile
  1715  000DD4  0E01               	movlw	1
  1716  000DD6  6E15               	movwf	writeEEPROM@gie_Status,c
  1717                           
  1718                           ;eeprom_functions.c: 28: INTCONbits.GIE = 0;
  1719  000DD8  9EF2               	bcf	intcon,7,c	;volatile
  1720                           
  1721                           ;eeprom_functions.c: 29: EECON2 = 0x55;
  1722  000DDA  0E55               	movlw	85
  1723  000DDC  6EA7               	movwf	4007,c	;volsfr
  1724                           
  1725                           ;eeprom_functions.c: 30: EECON2 = 0xaa;
  1726  000DDE  0EAA               	movlw	170
  1727  000DE0  6EA7               	movwf	4007,c	;volsfr
  1728                           
  1729                           ;eeprom_functions.c: 31: EECON1bits.WR = 1;
  1730  000DE2  82A6               	bsf	4006,1,c	;volsfr
  1731                           
  1732                           ;eeprom_functions.c: 32: INTCONbits.GIE = gie_Status;
  1733  000DE4  B015               	btfsc	writeEEPROM@gie_Status,0,c
  1734  000DE6  D002               	bra	u545
  1735  000DE8  9EF2               	bcf	intcon,7,c	;volatile
  1736  000DEA  D001               	bra	u546
  1737  000DEC                     u545:
  1738  000DEC  8EF2               	bsf	intcon,7,c	;volatile
  1739  000DEE                     u546:
  1740                           
  1741                           ;eeprom_functions.c: 33: EECON1bits.WREN = 0;
  1742  000DEE  94A6               	bcf	4006,2,c	;volsfr
  1743  000DF0  0012               	return		;funcret
  1744  000DF2                     __end_of_writeEEPROM:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           prodh	equ	0xFF4
  1751                           prodl	equ	0xFF3
  1752                           intcon	equ	0xFF2
  1753                           intcon2	equ	0xFF1
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           postdec1	equ	0xFE5
  1757                           fsr1l	equ	0xFE1
  1758                           indf2	equ	0xFDF
  1759                           fsr2h	equ	0xFDA
  1760                           fsr2l	equ	0xFD9
  1761                           status	equ	0xFD8
  1762                           
  1763 ;; *************** function _check_password_presence *****************
  1764 ;; Defined at:
  1765 ;;		line 129 in file "main.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  lock_num        1    wreg     unsigned char 
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;  lock_num        1   19[COMRAM] unsigned char 
  1770 ;;  validity        1   21[COMRAM] unsigned char 
  1771 ;;  addr            1   20[COMRAM] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      unsigned char 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0
  1782 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1784 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1785 ;;Total ram usage:        3 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    2
  1788 ;; This function calls:
  1789 ;;		_readEEPROM
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text8
  1796  000DF2                     __ptext8:
  1797                           	opt stack 0
  1798  000DF2                     _check_password_presence:
  1799                           	opt stack 28
  1800                           
  1801                           ;incstack = 0
  1802                           ;check_password_presence@lock_num stored from wreg
  1803  000DF2  6E14               	movwf	check_password_presence@lock_num,c
  1804                           
  1805                           ;main.c: 131: unsigned char validity = 0;
  1806  000DF4  0E00               	movlw	0
  1807  000DF6  6E16               	movwf	check_password_presence@validity,c
  1808                           
  1809                           ;main.c: 133: unsigned char addr = (lock_num - 1) * 10;
  1810  000DF8  0414               	decf	check_password_presence@lock_num,w,c
  1811  000DFA  0D0A               	mullw	10
  1812  000DFC  CFF3 F015          	movff	prodl,check_password_presence@addr
  1813                           
  1814                           ;main.c: 135: if(readEEPROM(addr))
  1815  000E00  5015               	movf	check_password_presence@addr,w,c
  1816  000E02  EC27  F007         	call	_readEEPROM
  1817  000E06  0900               	iorlw	0
  1818  000E08  B4D8               	btfsc	status,2,c
  1819  000E0A  D002               	goto	l248
  1820                           
  1821                           ;main.c: 136: validity = 1;
  1822  000E0C  0E01               	movlw	1
  1823  000E0E  6E16               	movwf	check_password_presence@validity,c
  1824  000E10                     l248:
  1825                           
  1826                           ;main.c: 137: return validity;
  1827  000E10  5016               	movf	check_password_presence@validity,w,c
  1828  000E12  0012               	return	
  1829  000E14                     __end_of_check_password_presence:
  1830                           	opt stack 0
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodh	equ	0xFF4
  1836                           prodl	equ	0xFF3
  1837                           intcon	equ	0xFF2
  1838                           intcon2	equ	0xFF1
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           postdec1	equ	0xFE5
  1842                           fsr1l	equ	0xFE1
  1843                           indf2	equ	0xFDF
  1844                           fsr2h	equ	0xFDA
  1845                           fsr2l	equ	0xFD9
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _readEEPROM *****************
  1849 ;; Defined at:
  1850 ;;		line 36 in file "eeprom_functions.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  address         1    wreg     unsigned char 
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;  address         1   18[COMRAM] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      unsigned char 
  1857 ;; Registers used:
  1858 ;;		wreg, status,2
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1864 ;;      Params:         0       0       0       0       0       0       0       0       0
  1865 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1867 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1868 ;;Total ram usage:        1 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    1
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_check_password_presence
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text9
  1879  000E4E                     __ptext9:
  1880                           	opt stack 0
  1881  000E4E                     _readEEPROM:
  1882                           	opt stack 28
  1883                           
  1884                           ;incstack = 0
  1885                           ;readEEPROM@address stored from wreg
  1886  000E4E  6E13               	movwf	readEEPROM@address,c
  1887                           
  1888                           ;eeprom_functions.c: 38: EEADR = address;
  1889  000E50  C013  FFA9         	movff	readEEPROM@address,4009	;volatile
  1890                           
  1891                           ;eeprom_functions.c: 40: EECON1bits.RD = 1;
  1892  000E54  80A6               	bsf	4006,0,c	;volsfr
  1893                           
  1894                           ;eeprom_functions.c: 41: return EEDATA;
  1895  000E56  50A8               	movf	4008,w,c	;volatile
  1896  000E58  0012               	return	
  1897  000E5A                     __end_of_readEEPROM:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           prodh	equ	0xFF4
  1904                           prodl	equ	0xFF3
  1905                           intcon	equ	0xFF2
  1906                           intcon2	equ	0xFF1
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1l	equ	0xFE1
  1911                           indf2	equ	0xFDF
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function _check_lock_num_validity *****************
  1917 ;; Defined at:
  1918 ;;		line 119 in file "main.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  lock_num        1    wreg     unsigned char 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  lock_num        1   19[COMRAM] unsigned char 
  1923 ;;  validity        1   18[COMRAM] unsigned char 
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  1    wreg      unsigned char 
  1926 ;; Registers used:
  1927 ;;		wreg, status,2, status,0
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1933 ;;      Params:         0       0       0       0       0       0       0       0       0
  1934 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1936 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1937 ;;Total ram usage:        2 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:    1
  1940 ;; This function calls:
  1941 ;;		Nothing
  1942 ;; This function is called by:
  1943 ;;		_main
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text10
  1948  000E14                     __ptext10:
  1949                           	opt stack 0
  1950  000E14                     _check_lock_num_validity:
  1951                           	opt stack 29
  1952                           
  1953                           ;incstack = 0
  1954                           ;check_lock_num_validity@lock_num stored from wreg
  1955  000E14  6E14               	movwf	check_lock_num_validity@lock_num,c
  1956                           
  1957                           ;main.c: 121: unsigned char validity = 0;
  1958  000E16  0E00               	movlw	0
  1959  000E18  6E13               	movwf	check_lock_num_validity@validity,c
  1960                           
  1961                           ;main.c: 122: if(lock_num)
  1962  000E1A  5014               	movf	check_lock_num_validity@lock_num,w,c
  1963  000E1C  B4D8               	btfsc	status,2,c
  1964  000E1E  D007               	goto	l244
  1965                           
  1966                           ;main.c: 123: {
  1967                           ;main.c: 124: lock_num <= 21 ? validity = 1 : validity = 0;
  1968  000E20  0E16               	movlw	22
  1969  000E22  6014               	cpfslt	check_lock_num_validity@lock_num,c
  1970  000E24  D002               	goto	l242
  1971  000E26  0E01               	movlw	1
  1972  000E28  D001               	goto	L4
  1973  000E2A                     l242:
  1974  000E2A  0E00               	movlw	0
  1975  000E2C                     L4:
  1976  000E2C  6E13               	movwf	check_lock_num_validity@validity,c
  1977  000E2E                     l244:
  1978                           
  1979                           ;main.c: 125: }
  1980                           ;main.c: 126: return validity;
  1981  000E2E  5013               	movf	check_lock_num_validity@validity,w,c
  1982  000E30  0012               	return	
  1983  000E32                     __end_of_check_lock_num_validity:
  1984                           	opt stack 0
  1985                           tblptru	equ	0xFF8
  1986                           tblptrh	equ	0xFF7
  1987                           tblptrl	equ	0xFF6
  1988                           tablat	equ	0xFF5
  1989                           prodh	equ	0xFF4
  1990                           prodl	equ	0xFF3
  1991                           intcon	equ	0xFF2
  1992                           intcon2	equ	0xFF1
  1993                           postinc0	equ	0xFEE
  1994                           wreg	equ	0xFE8
  1995                           postdec1	equ	0xFE5
  1996                           fsr1l	equ	0xFE1
  1997                           indf2	equ	0xFDF
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _arr_to_num *****************
  2003 ;; Defined at:
  2004 ;;		line 100 in file "main.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  arr             2   18[COMRAM] PTR unsigned char 
  2007 ;;		 -> main@keypressArray(10), 
  2008 ;;  num_of_eleme    1   20[COMRAM] unsigned char 
  2009 ;;  number          2   21[COMRAM] PTR unsigned char 
  2010 ;;		 -> main@locker_num(1), 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  b               1   25[COMRAM] unsigned char 
  2013 ;;  a               1   24[COMRAM] unsigned char 
  2014 ;;  validity        1   26[COMRAM] unsigned char 
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  1    wreg      unsigned char 
  2017 ;; Registers used:
  2018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2024 ;;      Params:         5       0       0       0       0       0       0       0       0
  2025 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2026 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2027 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2028 ;;Total ram usage:        9 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; Hardware stack levels required when called:    1
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text11
  2039  000C70                     __ptext11:
  2040                           	opt stack 0
  2041  000C70                     _arr_to_num:
  2042                           	opt stack 29
  2043                           
  2044                           ;main.c: 102: unsigned char validity = 0;
  2045                           
  2046                           ;incstack = 0
  2047  000C70  0E00               	movlw	0
  2048  000C72  6E1B               	movwf	arr_to_num@validity,c
  2049                           
  2050                           ;main.c: 103: *number = 0;
  2051  000C74  C016  FFD9         	movff	arr_to_num@number,fsr2l
  2052  000C78  C017  FFDA         	movff	arr_to_num@number+1,fsr2h
  2053  000C7C  0E00               	movlw	0
  2054  000C7E  6EDF               	movwf	indf2,c
  2055                           
  2056                           ;main.c: 105: if(num_of_elements > 3)
  2057  000C80  0E03               	movlw	3
  2058  000C82  6415               	cpfsgt	arr_to_num@num_of_elements,c
  2059  000C84  D002               	goto	l232
  2060                           
  2061                           ;main.c: 106: return validity;
  2062  000C86  501B               	movf	arr_to_num@validity,w,c
  2063  000C88  0012               	return	
  2064  000C8A                     l232:
  2065                           
  2066                           ;main.c: 108: if((num_of_elements == 3) && (arr[0] == 2) && (arr[1] == 5) && (arr[2] == 
      +                          6))
  2067  000C8A  0E03               	movlw	3
  2068  000C8C  1815               	xorwf	arr_to_num@num_of_elements,w,c
  2069  000C8E  A4D8               	btfss	status,2,c
  2070  000C90  D01E               	goto	l234
  2071  000C92  C013  FFD9         	movff	arr_to_num@arr,fsr2l
  2072  000C96  C014  FFDA         	movff	arr_to_num@arr+1,fsr2h
  2073  000C9A  0E02               	movlw	2
  2074  000C9C  18DE               	xorwf	postinc2,w,c
  2075  000C9E  A4D8               	btfss	status,2,c
  2076  000CA0  D016               	goto	l234
  2077  000CA2  EE20 F001          	lfsr	2,1
  2078  000CA6  5013               	movf	arr_to_num@arr,w,c
  2079  000CA8  26D9               	addwf	fsr2l,f,c
  2080  000CAA  5014               	movf	arr_to_num@arr+1,w,c
  2081  000CAC  22DA               	addwfc	fsr2h,f,c
  2082  000CAE  0E05               	movlw	5
  2083  000CB0  18DE               	xorwf	postinc2,w,c
  2084  000CB2  A4D8               	btfss	status,2,c
  2085  000CB4  D00C               	goto	l234
  2086  000CB6  EE20 F002          	lfsr	2,2
  2087  000CBA  5013               	movf	arr_to_num@arr,w,c
  2088  000CBC  26D9               	addwf	fsr2l,f,c
  2089  000CBE  5014               	movf	arr_to_num@arr+1,w,c
  2090  000CC0  22DA               	addwfc	fsr2h,f,c
  2091  000CC2  0E06               	movlw	6
  2092  000CC4  18DE               	xorwf	postinc2,w,c
  2093  000CC6  A4D8               	btfss	status,2,c
  2094  000CC8  D002               	goto	l234
  2095                           
  2096                           ;main.c: 109: return validity;
  2097  000CCA  501B               	movf	arr_to_num@validity,w,c
  2098  000CCC  0012               	return	
  2099  000CCE                     l234:
  2100                           
  2101                           ;main.c: 110: for(unsigned char a = 0, b = (num_of_elements - 1); a < num_of_elements, b
      +                           >= 0; a++, b--)
  2102  000CCE  0E00               	movlw	0
  2103  000CD0  6E19               	movwf	arr_to_num@a,c
  2104  000CD2  0415               	decf	arr_to_num@num_of_elements,w,c
  2105  000CD4  6E1A               	movwf	arr_to_num@b,c
  2106  000CD6                     
  2107                           ;main.c: 111: {
  2108                           ;main.c: 112: *number += (arr[a] * 10 * b);
  2109  000CD6  5019               	movf	arr_to_num@a,w,c
  2110  000CD8  0D01               	mullw	1
  2111  000CDA  50F3               	movf	prodl,w,c
  2112  000CDC  2413               	addwf	arr_to_num@arr,w,c
  2113  000CDE  6ED9               	movwf	fsr2l,c
  2114  000CE0  50F4               	movf	prodh,w,c
  2115  000CE2  2014               	addwfc	arr_to_num@arr+1,w,c
  2116  000CE4  6EDA               	movwf	fsr2h,c
  2117  000CE6  50DF               	movf	indf2,w,c
  2118  000CE8  021A               	mulwf	arr_to_num@b,c
  2119  000CEA  50F3               	movf	prodl,w,c
  2120  000CEC  0D0A               	mullw	10
  2121  000CEE  C016  FFD9         	movff	arr_to_num@number,fsr2l
  2122  000CF2  C017  FFDA         	movff	arr_to_num@number+1,fsr2h
  2123  000CF6  50F3               	movf	prodl,w,c
  2124  000CF8  26DF               	addwf	indf2,f,c
  2125  000CFA  2A19               	incf	arr_to_num@a,f,c
  2126  000CFC  061A               	decf	arr_to_num@b,f,c
  2127  000CFE  D7EB               	goto	l236
  2128  000D00                     __end_of_arr_to_num:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           intcon	equ	0xFF2
  2137                           intcon2	equ	0xFF1
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           postdec1	equ	0xFE5
  2141                           fsr1l	equ	0xFE1
  2142                           indf2	equ	0xFDF
  2143                           postinc2	equ	0xFDE
  2144                           fsr2h	equ	0xFDA
  2145                           fsr2l	equ	0xFD9
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _ISR *****************
  2149 ;; Defined at:
  2150 ;;		line 140 in file "main.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;		None
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      void 
  2157 ;; Registers used:
  2158 ;;		wreg, status,2, status,0
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2164 ;;      Params:         0       0       0       0       0       0       0       0       0
  2165 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2166 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2167 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2168 ;;Total ram usage:       18 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; This function calls:
  2171 ;;		Nothing
  2172 ;; This function is called by:
  2173 ;;		Interrupt level 2
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	intcode
  2178  000008                     __pintcode:
  2179                           	opt stack 0
  2180  000008                     _ISR:
  2181                           	opt stack 28
  2182                           
  2183                           ;incstack = 0
  2184  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2185  00000A  EDD4  F005         	call	int_func,f	;refresh shadow registers
  2186                           tblptru	equ	0xFF8
  2187                           tblptrh	equ	0xFF7
  2188                           tblptrl	equ	0xFF6
  2189                           tablat	equ	0xFF5
  2190                           prodh	equ	0xFF4
  2191                           prodl	equ	0xFF3
  2192                           intcon	equ	0xFF2
  2193                           intcon2	equ	0xFF1
  2194                           postinc0	equ	0xFEE
  2195                           wreg	equ	0xFE8
  2196                           postdec1	equ	0xFE5
  2197                           fsr1l	equ	0xFE1
  2198                           indf2	equ	0xFDF
  2199                           postinc2	equ	0xFDE
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204                           	psect	intcode_body
  2205  000BA8                     __pintcode_body:
  2206                           	opt stack 28
  2207  000BA8                     int_func:
  2208                           	opt stack 28
  2209  000BA8  0006               	pop		; remove dummy address from shadow register refresh
  2210  000BAA  CFFA F001          	movff	pclath,??_ISR
  2211  000BAE  CFFB F002          	movff	pclatu,??_ISR+1
  2212  000BB2  CFE9 F003          	movff	fsr0l,??_ISR+2
  2213  000BB6  CFEA F004          	movff	fsr0h,??_ISR+3
  2214  000BBA  CFE1 F005          	movff	fsr1l,??_ISR+4
  2215  000BBE  CFE2 F006          	movff	fsr1h,??_ISR+5
  2216  000BC2  CFD9 F007          	movff	fsr2l,??_ISR+6
  2217  000BC6  CFDA F008          	movff	fsr2h,??_ISR+7
  2218  000BCA  CFF3 F009          	movff	prodl,??_ISR+8
  2219  000BCE  CFF4 F00A          	movff	prodh,??_ISR+9
  2220  000BD2  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2221  000BD6  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2222  000BDA  CFF8 F00D          	movff	tblptru,??_ISR+12
  2223  000BDE  CFF5 F00E          	movff	tablat,??_ISR+13
  2224  000BE2  C04D  F00F         	movff	btemp,??_ISR+14
  2225  000BE6  C04E  F010         	movff	btemp+1,??_ISR+15
  2226  000BEA  C04F  F011         	movff	btemp+2,??_ISR+16
  2227  000BEE  C050  F012         	movff	btemp+3,??_ISR+17
  2228                           
  2229                           ;main.c: 142: if(RBIF)
  2230  000BF2  A0F2               	btfss	intcon,0,c	;volatile
  2231  000BF4  D008               	goto	i2l255
  2232                           
  2233                           ;main.c: 143: {
  2234                           ;main.c: 144: RBIF = 0;
  2235  000BF6  90F2               	bcf	intcon,0,c	;volatile
  2236                           
  2237                           ;main.c: 145: ((volatile _io_reg*)&systemStateReg)->bit7 = 0;
  2238  000BF8  9E47               	bcf	_systemStateReg,7,c	;volatile
  2239                           
  2240                           ;main.c: 147: timer1OVFcount = 0;
  2241  000BFA  0E00               	movlw	0
  2242  000BFC  6E44               	movwf	_timer1OVFcount,c	;volatile
  2243                           
  2244                           ;main.c: 148: T1CONbits.TMR1ON = 1;
  2245  000BFE  80CD               	bsf	4045,0,c	;volatile
  2246                           
  2247                           ;main.c: 150: if(PORTB)
  2248  000C00  5081               	movf	3969,w,c	;volatile
  2249  000C02  A4D8               	btfss	status,2,c
  2250                           
  2251                           ;main.c: 151: __nop();
  2252  000C04  F000               	nop	
  2253  000C06                     i2l255:
  2254                           
  2255                           ;main.c: 152: }
  2256                           ;main.c: 153: if(PIR1bits.TMR1IF)
  2257  000C06  A09E               	btfss	3998,0,c	;volatile
  2258  000C08  D00D               	goto	i2l256
  2259                           
  2260                           ;main.c: 154: {
  2261                           ;main.c: 155: timer1OVFcount++;
  2262  000C0A  2A44               	incf	_timer1OVFcount,f,c	;volatile
  2263                           
  2264                           ;main.c: 156: TMR1 = 0;
  2265  000C0C  0E00               	movlw	0
  2266  000C0E  6ECF               	movwf	4047,c	;volatile
  2267  000C10  0E00               	movlw	0
  2268  000C12  6ECE               	movwf	4046,c	;volatile
  2269                           
  2270                           ;main.c: 157: if(timer1OVFcount == 10)
  2271  000C14  0E0A               	movlw	10
  2272  000C16  1844               	xorwf	_timer1OVFcount,w,c	;volatile
  2273  000C18  A4D8               	btfss	status,2,c
  2274  000C1A  D003               	goto	i2l257
  2275                           
  2276                           ;main.c: 158: {
  2277                           ;main.c: 159: ((volatile _io_reg*)&systemStateReg)->bit7 = 1;
  2278  000C1C  8E47               	bsf	_systemStateReg,7,c	;volatile
  2279                           
  2280                           ;main.c: 160: T1CONbits.TMR1ON = 0;
  2281  000C1E  90CD               	bcf	4045,0,c	;volatile
  2282                           
  2283                           ;main.c: 161: ((volatile _io_reg*)&systemStateReg)->bit5 = 1;
  2284  000C20  8A47               	bsf	_systemStateReg,5,c	;volatile
  2285  000C22                     i2l257:
  2286                           
  2287                           ;main.c: 163: }
  2288                           ;main.c: 164: PIR1bits.TMR1IF = 0;
  2289  000C22  909E               	bcf	3998,0,c	;volatile
  2290  000C24                     i2l256:
  2291  000C24  C012  F050         	movff	??_ISR+17,btemp+3
  2292  000C28  C011  F04F         	movff	??_ISR+16,btemp+2
  2293  000C2C  C010  F04E         	movff	??_ISR+15,btemp+1
  2294  000C30  C00F  F04D         	movff	??_ISR+14,btemp
  2295  000C34  C00E  FFF5         	movff	??_ISR+13,tablat
  2296  000C38  C00D  FFF8         	movff	??_ISR+12,tblptru
  2297  000C3C  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2298  000C40  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2299  000C44  C00A  FFF4         	movff	??_ISR+9,prodh
  2300  000C48  C009  FFF3         	movff	??_ISR+8,prodl
  2301  000C4C  C008  FFDA         	movff	??_ISR+7,fsr2h
  2302  000C50  C007  FFD9         	movff	??_ISR+6,fsr2l
  2303  000C54  C006  FFE2         	movff	??_ISR+5,fsr1h
  2304  000C58  C005  FFE1         	movff	??_ISR+4,fsr1l
  2305  000C5C  C004  FFEA         	movff	??_ISR+3,fsr0h
  2306  000C60  C003  FFE9         	movff	??_ISR+2,fsr0l
  2307  000C64  C002  FFFB         	movff	??_ISR+1,pclatu
  2308  000C68  C001  FFFA         	movff	??_ISR,pclath
  2309  000C6C  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2310  000C6E  0011               	retfie		f
  2311  000C70                     __end_of_ISR:
  2312                           	opt stack 0
  2313                           pclatu	equ	0xFFB
  2314                           pclath	equ	0xFFA
  2315                           tblptru	equ	0xFF8
  2316                           tblptrh	equ	0xFF7
  2317                           tblptrl	equ	0xFF6
  2318                           tablat	equ	0xFF5
  2319                           prodh	equ	0xFF4
  2320                           prodl	equ	0xFF3
  2321                           intcon	equ	0xFF2
  2322                           intcon2	equ	0xFF1
  2323                           postinc0	equ	0xFEE
  2324                           fsr0h	equ	0xFEA
  2325                           fsr0l	equ	0xFE9
  2326                           wreg	equ	0xFE8
  2327                           postdec1	equ	0xFE5
  2328                           fsr1h	equ	0xFE2
  2329                           fsr1l	equ	0xFE1
  2330                           indf2	equ	0xFDF
  2331                           postinc2	equ	0xFDE
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8
  2335                           pclatu	equ	0xFFB
  2336                           pclath	equ	0xFFA
  2337                           tblptru	equ	0xFF8
  2338                           tblptrh	equ	0xFF7
  2339                           tblptrl	equ	0xFF6
  2340                           tablat	equ	0xFF5
  2341                           prodh	equ	0xFF4
  2342                           prodl	equ	0xFF3
  2343                           intcon	equ	0xFF2
  2344                           intcon2	equ	0xFF1
  2345                           postinc0	equ	0xFEE
  2346                           fsr0h	equ	0xFEA
  2347                           fsr0l	equ	0xFE9
  2348                           wreg	equ	0xFE8
  2349                           postdec1	equ	0xFE5
  2350                           fsr1h	equ	0xFE2
  2351                           fsr1l	equ	0xFE1
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358                           	psect	rparam
  2359  0000                     pclatu	equ	0xFFB
  2360                           pclath	equ	0xFFA
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           intcon	equ	0xFF2
  2368                           intcon2	equ	0xFF1
  2369                           postinc0	equ	0xFEE
  2370                           fsr0h	equ	0xFEA
  2371                           fsr0l	equ	0xFE9
  2372                           wreg	equ	0xFE8
  2373                           postdec1	equ	0xFE5
  2374                           fsr1h	equ	0xFE2
  2375                           fsr1l	equ	0xFE1
  2376                           indf2	equ	0xFDF
  2377                           postinc2	equ	0xFDE
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382                           	psect	temp
  2383  00004D                     btemp:
  2384                           	opt stack 0
  2385  00004D                     	ds	1
  2386  0000                     int$flags	set	btemp
  2387  0000                     wtemp6	set	btemp+1
  2388                           pclatu	equ	0xFFB
  2389                           pclath	equ	0xFFA
  2390                           tblptru	equ	0xFF8
  2391                           tblptrh	equ	0xFF7
  2392                           tblptrl	equ	0xFF6
  2393                           tablat	equ	0xFF5
  2394                           prodh	equ	0xFF4
  2395                           prodl	equ	0xFF3
  2396                           intcon	equ	0xFF2
  2397                           intcon2	equ	0xFF1
  2398                           postinc0	equ	0xFEE
  2399                           fsr0h	equ	0xFEA
  2400                           fsr0l	equ	0xFE9
  2401                           wreg	equ	0xFE8
  2402                           postdec1	equ	0xFE5
  2403                           fsr1h	equ	0xFE2
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           fsr2h	equ	0xFDA
  2408                           fsr2l	equ	0xFD9
  2409                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    14
    Data        5
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      76
    BANK0           160      0     100
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eepromCode	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    arr_to_num@arr	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(COMRAM[10]), 

    arr_to_num@number	PTR unsigned char  size(2) Largest target is 1
		 -> main@locker_num(COMRAM[1]), 

    getKey@KeypadStatus	PTR struct . size(2) Largest target is 2
		 -> main@currentKeypadStatus(COMRAM[2]), buttonPressedIndicator@KeypadStatus(COMRAM[2]), 

    eepromWriteCode@codeBuffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_arr_to_num
    _main->_getKey
    _getKey->_delay_ms
    _eepromWriteCode->_writeEEPROM
    _check_password_presence->_readEEPROM

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    4425
                                             27 COMRAM    17    17      0
                         _arr_to_num
            _check_lock_num_validity
            _check_password_presence
                    _eepromWriteCode
                             _getKey
                   _initControllerIO
                         _initKeypad
                   _initStandbyTimer
 ---------------------------------------------------------------------------------
 (1) _initStandbyTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initControllerIO                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getKey                                               3     1      2    2576
                                             24 COMRAM     3     1      2
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1308
                                             18 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _eepromWriteCode                                      5     2      3     528
                                             21 COMRAM     5     2      3
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     2      1     219
                                             18 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _check_password_presence                              3     3      0      60
                                             19 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_lock_num_validity                              2     2      0      45
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _arr_to_num                                           9     4      5     542
                                             18 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _arr_to_num
   _check_lock_num_validity
   _check_password_presence
     _readEEPROM
   _eepromWriteCode
     _writeEEPROM
   _getKey
     _delay_ms
   _initControllerIO
   _initKeypad
   _initStandbyTimer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      64       5       62.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B0      20        0.0%
DATA                 0      0      B0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Mar 19 01:03:11 2018

                              l17 0DB6                                l18 0D98  
                              l50 085C                                l52 0870  
                              l61 0930                                l62 095C  
                              l54 08A0                                l71 0A24  
                              l55 08CC                                l47 083C  
                              l64 097C                                l73 0A54  
                              l57 08EC                                l66 0990  
                              l75 0A84                                l59 0900  
                              l84 0D62                                l68 09C0  
                              l69 09F4                                l86 0D7A  
                     __CFG_BOR$ON 000000                       __CFG_BORV$3 000000  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                             l232 0C8A                               l234 0CCE  
                             l242 0E2A                               l236 0CD6  
                             l244 0E2E                               l248 0E10  
                             l274 0B46                               l266 0ACC  
                             l286 0B86  eeprom_functions@eepromCodeBuffer 0060  
                    __CFG_CPB$OFF 000000                               _PR2 000FCB  
                    __CFG_CPD$OFF 000000                               _ISR 0008  
                             u545 0DEC                               u546 0DEE  
                             u570 0D80                               u820 0AE4  
                             prod 000FF3                               wreg 000FE8  
                    __CFG_LVP$OFF 000000                              ?_ISR 0001  
                    __CFG_WDT$OFF 000000                              l1407 0DC2  
                            l1431 0D52                              l1521 08BA  
                            l1531 08E0                              l1445 0D80  
                            l1437 0D6A                              l1471 082A  
                            l1481 0850                              l1571 094A  
                            l1723 0AC4                              l1581 0970  
                            _LATB 000F8A                              _RBIF 007F90  
                            _TMR1 000FCE                       arr_to_num@a 0019  
                     arr_to_num@b 001A                              _main 0AA0  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 004D  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
                     _writeEEPROM 0DC0                             ??_ISR 0001  
                  _systemStateReg 0047   check_lock_num_validity@lock_num 0014  
                   __CFG_PLLDIV$1 000000                writeEEPROM@address 0014  
                           ?_main 0001                             _EEADR 000FA9  
 check_lock_num_validity@validity 0013                             _T2CON 000FCA  
                           i2l255 0C06                             i2l256 0C24  
                           i2l257 0C22                             _PORTA 000F80  
                           _PORTB 000F81                     __CFG_USBDIV$1 000000  
                           _TRISB 000F93                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000         ??_check_lock_num_validity 0013  
                           main@a 0028            _factoryResetCodeLenght 004C  
                           pclath 000FFA                             tablat 000FF5  
                           status 000FD8                             wtemp6 004E  
                  __CFG_ICPRT$OFF 000000                   __initialization 0D00  
                    __end_of_main 0BA8                   _systemStateReg2 0046  
                _initStandbyTimer 0E32                            ??_main 001C  
                   __activetblptr 000001             _tempCodeKeyPressCount 0040  
  eepromWriteCode@eepromWriteAddr 0019                   __CFG_CCP2MX$OFF 000000  
        __size_of_eepromWriteCode 003A                            _EEDATA 000FA8  
                          _CCPR1L 000FBE                            _EECON2 000FA7  
                   _keyPressCount 0045                 main@keypressArray 001C  
                 _defaultPassCode 0801                            _TRISA3 007C93  
         main@currentKeypadStatus 002B                  __end_of_delay_ms 0D86  
        ?_check_password_presence 0001                    __CFG_XINST$OFF 000000  
 __end_of_check_lock_num_validity 0E32                     arr_to_num@arr 0013  
                _factoryResetCode 0048                 ?_initControllerIO 0001  
                  __CFG_STVREN$ON 000000                            _getKey 0810  
              ??_initControllerIO 0013                            clear_0 0D26  
                          clear_1 0D32                      __pdataCOMRAM 0048  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                      __accesstop 0060           __end_of__initialization 0D38  
                 __CFG_PBADEN$OFF 000000                     ___rparam_used 000001  
                  __pcstackCOMRAM 0001           __end_of_defaultPassCode 080A  
                  _tempCodeBuffer 0079                        __pbssBANK0 0060  
               ??_eepromWriteCode 0019                      ?_writeEEPROM 0013  
                         ?_getKey 0019                           _CCP1CON 000FBD  
                      _eepromCode 0039                  _defaultPassCode2 080A  
                       ?_delay_ms 0013                        _arr_to_num 0C70  
   __end_of_defaultPassCodeLenght 080F                   __CFG_VREGEN$OFF 000000  
        __end_of_initStandbyTimer 0E42                        _readEEPROM 0E4E  
                  main@locker_num 002A            main@currentSystemState 0027  
                         __Hparam 0000       check_password_presence@addr 0015  
                         __Lparam 0000                        _initKeypad 0E42  
          _defaultPassCode2Lenght 080D                   __size_of_getKey 0290  
                    __psmallconst 0800                           __pcinit 0D00  
                         __ramtop 0800                           __ptext0 0AA0  
                         __ptext1 0E32                           __ptext2 0E42  
                         __ptext3 0E60                           __ptext4 0810  
                         __ptext5 0D4A                           __ptext6 0D86  
                         __ptext7 0DC0                           __ptext8 0DF2  
                         __ptext9 0E4E                      __size_of_ISR 0C68  
                       _T1CONbits 000FCD                        ??_delay_ms 0015  
                eepromWriteCode@i 001A                    __pintcode_body 0BA8  
            end_of_initialization 0D38                           int_func 0BA8  
              timer@timerOVFcount 003D                    _timer1OVFcount 0044  
                         postdec1 000FE5                           postinc0 000FEE  
                         postinc2 000FDE                    _timer2OVFcount 003B  
                    _LASTPASSCODE 0041  __size_of_check_password_presence 0022  
        ?_check_lock_num_validity 0001         __size_of_initControllerIO 0002  
                     ?_arr_to_num 0013                 readEEPROM@address 0013  
                      _soundStuff 0033                       ?_readEEPROM 0001  
                writeEEPROM@datas 0013                       ?_initKeypad 0001  
            __size_of_writeEEPROM 0032                     __pidataCOMRAM 0E5A  
                  __end_of_getKey 0AA0               getKey@buttonPressed 001B  
              arr_to_num@validity 001B               start_initialization 0D00  
                     __end_of_ISR 0C70                   _eepromWriteCode 0D86  
        __end_of_defaultPassCode2 080D               __size_of_arr_to_num 0090  
                        ??_getKey 001B                  __CFG_LPT1OSC$OFF 000000  
             __size_of_readEEPROM 000C                       __pbssCOMRAM 002D  
                arr_to_num@number 0016               __size_of_initKeypad 000C  
               __size_of_delay_ms 003C                 ?_initStandbyTimer 0001  
              ??_initStandbyTimer 0013                         __pintcode 0008  
                       _bufferPtr 0042           _check_password_presence 0DF2  
         __end_of_eepromWriteCode 0DC0              main@numOfKeysPressed 0029  
                     __smallconst 0800                         _keyBuffer 0092  
       arr_to_num@num_of_elements 0015                  _initControllerIO 0E60  
              getKey@KeypadStatus 0019    __end_of_defaultPassCode2Lenght 080E  
                       delay_ms@i 0015                         delay_ms@j 0017  
           _defaultPassCodeLenght 080E                          _PIE1bits 000F9D  
           writeEEPROM@gie_Status 0015                          _PIR1bits 000F9E  
                __CFG_WDTPS$32768 000000   check_password_presence@lock_num 0014  
 check_password_presence@validity 0016                      ??_arr_to_num 0018  
                     _INTCON2bits 000FF1                      delay_ms@time 0013  
                       copy_data0 0D14  __size_of_check_lock_num_validity 001E  
                    ??_readEEPROM 0013                        _EECON1bits 000FA6  
                        __Hrparam 0000                          __Lrparam 0000  
                    __Lsmallconst 0800                      ??_initKeypad 0013  
       ??_check_password_presence 0014                     _timerOVFcount 003F  
              __end_of_arr_to_num 0D00                  ?_eepromWriteCode 0016  
           __CFG_FOSC$INTOSCIO_EC 000000                __end_of_readEEPROM 0E5A  
                        _delay_ms 0D4A                          __ptext10 0E14  
                        __ptext11 0C70                __end_of_initKeypad 0E4E  
                   __size_of_main 0108                     ??_writeEEPROM 0014  
                        int$flags 004D                          main@addr 0026  
                        _soundOut 002D             __CFG_CPUDIV$OSC1_PLL2 000000  
                      _INTCONbits 000FF2   __end_of_check_password_presence 0E14  
                        intlevel2 0000                 _currentTimerState 003E  
           _wrongCodeEnteredCount 0043                  _eepromCodeBuffer 00AB  
        __end_of_initControllerIO 0E62               __end_of_writeEEPROM 0DF2  
       __size_of_initStandbyTimer 0010           _check_lock_num_validity 0E14  
       eepromWriteCode@codeBuffer 0017         eepromWriteCode@codeLenght 0016  

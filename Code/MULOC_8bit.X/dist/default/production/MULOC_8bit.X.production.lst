

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Apr 15 13:01:30 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.44
    44                           ; Generated 14/09/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  00134A                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _factoryResetCode
    83  00134A  08                 	db	8
    84  00134B  00                 	db	0
    85  00134C  08                 	db	8
    86  00134D  00                 	db	0
    87                           
    88                           ;initializer for _factoryResetCodeLenght
    89  00134E  04                 	db	4
    90                           
    91                           	psect	smallconst
    92  000800                     __psmallconst:
    93                           	opt stack 0
    94  000800  00                 	db	0
    95  000801                     _defaultPassCode:
    96                           	opt stack 0
    97  000801  09                 	db	9
    98  000802  08                 	db	8
    99  000803  07                 	db	7
   100  000804  06                 	db	6
   101  000805  05                 	db	5
   102  000806  04                 	db	4
   103  000807  03                 	db	3
   104  000808  02                 	db	2
   105  000809  01                 	db	1
   106  00080A                     __end_of_defaultPassCode:
   107                           	opt stack 0
   108  00080A                     _defaultPassCode2:
   109                           	opt stack 0
   110  00080A  01                 	db	1
   111  00080B  02                 	db	2
   112  00080C  03                 	db	3
   113  00080D                     __end_of_defaultPassCode2:
   114                           	opt stack 0
   115  00080D                     _defaultPassCode2Lenght:
   116                           	opt stack 0
   117  00080D  03                 	db	3
   118  00080E                     __end_of_defaultPassCode2Lenght:
   119                           	opt stack 0
   120  00080E                     _defaultPassCodeLenght:
   121                           	opt stack 0
   122  00080E  09                 	db	9
   123  00080F                     __end_of_defaultPassCodeLenght:
   124                           	opt stack 0
   125  0000                     _TMR1	set	4046
   126  0000                     _TMR0	set	4054
   127  0000                     _LATDbits	set	3980
   128  0000                     _LATEbits	set	3981
   129  0000                     _LATCbits	set	3979
   130  0000                     _LATAbits	set	3977
   131  0000                     _LATE	set	3981
   132  0000                     _LATC	set	3979
   133  0000                     _LATD	set	3980
   134  0000                     _TRISA	set	3986
   135  0000                     _TRISE	set	3990
   136  0000                     _TRISC	set	3988
   137  0000                     _TRISD	set	3989
   138  0000                     _TRISAbits	set	3986
   139  0000                     _CMCON	set	4020
   140  0000                     _ADCON1	set	4033
   141  0000                     _PIR1bits	set	3998
   142  0000                     _PIE1bits	set	3997
   143  0000                     _T1CONbits	set	4045
   144  0000                     _T0CONbits	set	4053
   145  0000                     _CCPR1L	set	4030
   146  0000                     _T2CON	set	4042
   147  0000                     _PR2	set	4043
   148  0000                     _CCP1CON	set	4029
   149  0000                     _PORTB	set	3969
   150  0000                     _INTCON2bits	set	4081
   151  0000                     _LATB	set	3978
   152  0000                     _TRISB	set	3987
   153  0000                     _EECON2	set	4007
   154  0000                     _INTCONbits	set	4082
   155  0000                     _EEDATA	set	4008
   156  0000                     _EEADR	set	4009
   157  0000                     _EECON1bits	set	4006
   158  0000                     _RBIF	set	32656
   159  0000                     _TRISA3	set	31891
   160                           
   161                           ; #config settings
   162  00080F  00                 	db	0	; dummy byte at the end
   163  0000                     
   164                           	psect	cinit
   165  001150                     __pcinit:
   166                           	opt stack 0
   167  001150                     start_initialization:
   168                           	opt stack 0
   169  001150                     __initialization:
   170                           	opt stack 0
   171                           
   172                           ; Initialize objects allocated to COMRAM (5 bytes)
   173                           ; load TBLPTR registers with __pidataCOMRAM
   174  001150  0E4A               	movlw	low __pidataCOMRAM
   175  001152  6EF6               	movwf	tblptrl,c
   176  001154  0E13               	movlw	high __pidataCOMRAM
   177  001156  6EF7               	movwf	tblptrh,c
   178  001158  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   179  00115A  6EF8               	movwf	tblptru,c
   180  00115C  EE00  F041         	lfsr	0,__pdataCOMRAM
   181  001160  EE10 F005          	lfsr	1,5
   182  001164                     copy_data0:
   183  001164  0009               	tblrd		*+
   184  001166  CFF5 FFEE          	movff	tablat,postinc0
   185  00116A  50E5               	movf	postdec1,w,c
   186  00116C  50E1               	movf	fsr1l,w,c
   187  00116E  E1FA               	bnz	copy_data0
   188                           
   189                           ; Clear objects allocated to BANK0 (106 bytes)
   190  001170  EE00  F060         	lfsr	0,__pbssBANK0
   191  001174  0E6A               	movlw	106
   192  001176                     clear_0:
   193  001176  6AEE               	clrf	postinc0,c
   194  001178  06E8               	decf	wreg,f,c
   195  00117A  E1FD               	bnz	clear_0
   196                           
   197                           ; Clear objects allocated to COMRAM (32 bytes)
   198  00117C  EE00  F001         	lfsr	0,__pbssCOMRAM
   199  001180  0E20               	movlw	32
   200  001182                     clear_1:
   201  001182  6AEE               	clrf	postinc0,c
   202  001184  06E8               	decf	wreg,f,c
   203  001186  E1FD               	bnz	clear_1
   204  001188                     end_of_initialization:
   205                           	opt stack 0
   206  001188                     __end_of__initialization:
   207                           	opt stack 0
   208  001188  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   209  00118A  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   210  00118C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   211  00118E  6EF8               	movwf	tblptru,c
   212  001190  0100               	movlb	0
   213  001192  EF78  F005         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	bssCOMRAM
   224  000001                     __pbssCOMRAM:
   225                           	opt stack 0
   226  000001                     _open_lock_arr:
   227                           	opt stack 0
   228  000001                     	ds	10
   229  00000B                     _soundStuff:
   230                           	opt stack 0
   231  00000B                     	ds	6
   232  000011                     _eepromCode:
   233                           	opt stack 0
   234  000011                     	ds	2
   235  000013                     _timer2OVFcount:
   236                           	opt stack 0
   237  000013                     	ds	2
   238  000015                     _num_of_doors_open:
   239                           	opt stack 0
   240  000015                     	ds	1
   241  000016                     	ds	1
   242  000017                     _currentTimerState:
   243                           	opt stack 0
   244  000017                     	ds	1
   245  000018                     	ds	1
   246  000019                     _tempCodeKeyPressCount:
   247                           	opt stack 0
   248  000019                     	ds	1
   249  00001A                     _LASTPASSCODE:
   250                           	opt stack 0
   251  00001A                     	ds	1
   252  00001B                     _bufferPtr:
   253                           	opt stack 0
   254  00001B                     	ds	1
   255  00001C                     _wrongCodeEnteredCount:
   256                           	opt stack 0
   257  00001C                     	ds	1
   258  00001D                     _timer1OVFcount:
   259                           	opt stack 0
   260  00001D                     	ds	1
   261  00001E                     _keyPressCount:
   262                           	opt stack 0
   263  00001E                     	ds	1
   264  00001F                     _systemStateReg2:
   265                           	opt stack 0
   266  00001F                     	ds	1
   267  000020                     _systemStateReg:
   268                           	opt stack 0
   269  000020                     	ds	1
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           postdec1	equ	0xFE5
   277                           fsr1l	equ	0xFE1
   278                           
   279                           	psect	dataCOMRAM
   280  000041                     __pdataCOMRAM:
   281                           	opt stack 0
   282  000041                     _factoryResetCode:
   283                           	opt stack 0
   284  000041                     	ds	4
   285  000045                     _factoryResetCodeLenght:
   286                           	opt stack 0
   287  000045                     	ds	1
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           postdec1	equ	0xFE5
   295                           fsr1l	equ	0xFE1
   296                           
   297                           	psect	bssBANK0
   298  000060                     __pbssBANK0:
   299                           	opt stack 0
   300  000060                     	ds	25
   301  000079                     _tempCodeBuffer:
   302                           	opt stack 0
   303  000079                     	ds	25
   304  000092                     _keyBuffer:
   305                           	opt stack 0
   306  000092                     	ds	25
   307  0000AB                     	ds	25
   308  0000C4                     _soundOut:
   309                           	opt stack 0
   310  0000C4                     	ds	6
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           postdec1	equ	0xFE5
   318                           fsr1l	equ	0xFE1
   319                           
   320                           	psect	cstackBANK0
   321  0000CA                     __pcstackBANK0:
   322                           	opt stack 0
   323  0000CA                     ??_passcodeCompare:
   324                           
   325                           ; 1 bytes @ 0x0
   326  0000CA                     	ds	7
   327  0000D1                     main@keypressArray:
   328                           	opt stack 0
   329                           
   330                           ; 10 bytes @ 0x7
   331  0000D1                     	ds	10
   332  0000DB                     main@i:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x11
   336  0000DB                     	ds	1
   337  0000DC                     main@addr:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x12
   341  0000DC                     	ds	1
   342  0000DD                     main@currentSystemState:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x13
   346  0000DD                     	ds	1
   347  0000DE                     main@numOfKeysPressed:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x14
   351  0000DE                     	ds	1
   352  0000DF                     main@locker_num:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x15
   356  0000DF                     	ds	1
   357  0000E0                     main@currentKeypadStatus:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x16
   361  0000E0                     	ds	2
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	cstackCOMRAM
   372  000021                     __pcstackCOMRAM:
   373                           	opt stack 0
   374  000021                     ??i2_beep_error:
   375  000021                     close_lock@lock_num:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x0
   379  000021                     	ds	2
   380  000023                     ??_ISR:
   381                           
   382                           ; 1 bytes @ 0x2
   383  000023                     	ds	20
   384  000037                     ISR@i:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x16
   388  000037                     	ds	1
   389  000038                     ??_beep_error:
   390  000038                     ??_beep:
   391  000038                     ??_beep_long:
   392  000038                     ??_beep_ok:
   393  000038                     writeEEPROM@datas:
   394                           	opt stack 0
   395  000038                     readEEPROM@address:
   396                           	opt stack 0
   397  000038                     state_timer0@state:
   398                           	opt stack 0
   399  000038                     check_lock_num_validity@validity:
   400                           	opt stack 0
   401  000038                     open_lock@lock_num:
   402                           	opt stack 0
   403  000038                     getKey@KeypadStatus:
   404                           	opt stack 0
   405  000038                     arr_to_num@arr:
   406                           	opt stack 0
   407  000038                     clear_keyArray@arr:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x17
   411  000038                     	ds	1
   412  000039                     writeEEPROM@address:
   413                           	opt stack 0
   414  000039                     check_lock_num_validity@lock_num:
   415                           	opt stack 0
   416  000039                     passcodeCompare@keybuffer1:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x18
   420  000039                     	ds	1
   421  00003A                     ??_getKey:
   422  00003A                     writeEEPROM@gie_Status:
   423                           	opt stack 0
   424  00003A                     arr_to_num@num_of_elements:
   425                           	opt stack 0
   426  00003A                     clear_keyArray@a:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x19
   430  00003A                     	ds	1
   431  00003B                     eepromWriteCode@codeLenght:
   432                           	opt stack 0
   433  00003B                     getKey@buttonPressed:
   434                           	opt stack 0
   435  00003B                     passcodeCompare@compareLenght:
   436                           	opt stack 0
   437  00003B                     arr_to_num@number:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x1A
   441  00003B                     	ds	1
   442  00003C                     passcodeCompare@compareAddr:
   443                           	opt stack 0
   444  00003C                     eepromWriteCode@codeBuffer:
   445                           	opt stack 0
   446  00003C                     buttonPressedIndicator@keypad_state:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x1B
   450  00003C                     	ds	1
   451  00003D                     ??_arr_to_num:
   452  00003D                     passcodeCompare@storedCodeLenght:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x1C
   456  00003D                     	ds	1
   457  00003E                     eepromWriteCode@eepromWriteAddr:
   458                           	opt stack 0
   459  00003E                     arr_to_num@a:
   460                           	opt stack 0
   461  00003E                     passcodeCompare@i:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x1D
   465  00003E                     	ds	1
   466  00003F                     eepromWriteCode@i:
   467                           	opt stack 0
   468  00003F                     arr_to_num@validity:
   469                           	opt stack 0
   470  00003F                     passcodeCompare@validity:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x1E
   474  00003F                     	ds	1
   475  000040                     ??_main:
   476                           
   477                           ; 1 bytes @ 0x1F
   478  000040                     	ds	1
   479                           tblptru	equ	0xFF8
   480                           tblptrh	equ	0xFF7
   481                           tblptrl	equ	0xFF6
   482                           tablat	equ	0xFF5
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           postdec1	equ	0xFE5
   486                           fsr1l	equ	0xFE1
   487                           
   488 ;;
   489 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   490 ;;
   491 ;; *************** function _main *****************
   492 ;; Defined at:
   493 ;;		line 526 in file "main.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;  i               1   17[BANK0 ] unsigned char 
   498 ;;  keypressArra   10    7[BANK0 ] unsigned char [10]
   499 ;;  currentKeypa    2   22[BANK0 ] struct .
   500 ;;  locker_num      1   21[BANK0 ] unsigned char 
   501 ;;  numOfKeysPre    1   20[BANK0 ] unsigned char 
   502 ;;  currentSyste    1   19[BANK0 ] enum E4106
   503 ;;  addr            1   18[BANK0 ] unsigned char 
   504 ;; Return value:  Size  Location     Type
   505 ;;                  2  396[None  ] int 
   506 ;; Registers used:
   507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   513 ;;      Params:         0       0       0       0       0       0       0       0       0
   514 ;;      Locals:         0      17       0       0       0       0       0       0       0
   515 ;;      Temps:          1       0       0       0       0       0       0       0       0
   516 ;;      Totals:         1      17       0       0       0       0       0       0       0
   517 ;;Total ram usage:       18 bytes
   518 ;; Hardware stack levels required when called:    4
   519 ;; This function calls:
   520 ;;		_arr_to_num
   521 ;;		_beep
   522 ;;		_beep_error
   523 ;;		_beep_long
   524 ;;		_beep_ok
   525 ;;		_buttonPressedIndicator
   526 ;;		_check_lock_num_validity
   527 ;;		_clear_keyArray
   528 ;;		_configure_door_timer
   529 ;;		_eepromWriteCode
   530 ;;		_getKey
   531 ;;		_initControllerIO
   532 ;;		_initKeypad
   533 ;;		_initStandbyTimer
   534 ;;		_open_lock
   535 ;;		_passcodeCompare
   536 ;;		_start_door_timer
   537 ;;		_state_timer0
   538 ;; This function is called by:
   539 ;;		Startup code after reset
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           	psect	text0
   544  000AF0                     __ptext0:
   545                           	opt stack 0
   546  000AF0                     _main:
   547                           	opt stack 27
   548                           
   549                           ;main.c: 528: keypadStatus currentKeypadStatus;
   550                           ;main.c: 529: systemState_t currentSystemState = NORMAL;
   551                           
   552                           ;incstack = 0
   553  000AF0  0E00               	movlw	0
   554  000AF2  0100               	movlb	0	; () banked
   555  000AF4  6FDD               	movwf	main@currentSystemState& (0+255),b
   556                           
   557                           ;main.c: 530: unsigned char keypressArray[10];
   558                           ;main.c: 531: unsigned char numOfKeysPressed = 0;
   559  000AF6  0E00               	movlw	0
   560  000AF8  6FDE               	movwf	main@numOfKeysPressed& (0+255),b
   561                           
   562                           ;main.c: 532: unsigned char locker_num = 0;
   563  000AFA  0E00               	movlw	0
   564  000AFC  6FDF               	movwf	main@locker_num& (0+255),b
   565                           
   566                           ;main.c: 533: unsigned char addr = 0;
   567  000AFE  0E00               	movlw	0
   568  000B00  6FDC               	movwf	main@addr& (0+255),b
   569                           
   570                           ; BSR set to: 0
   571                           ;main.c: 534: initControllerIO();
   572  000B02  EC1F  F009         	call	_initControllerIO	;wreg free
   573                           
   574                           ;main.c: 535: initKeypad();
   575  000B06  EC93  F009         	call	_initKeypad	;wreg free
   576                           
   577                           ;main.c: 536: initStandbyTimer();
   578  000B0A  EC84  F009         	call	_initStandbyTimer	;wreg free
   579                           
   580                           ;main.c: 537: configure_door_timer();
   581  000B0E  ECA2  F009         	call	_configure_door_timer	;wreg free
   582                           
   583                           ;main.c: 538: INTCONbits.PEIE = 1;
   584  000B12  8CF2               	bsf	intcon,6,c	;volatile
   585                           
   586                           ;main.c: 539: INTCONbits.GIE = 1;
   587  000B14  8EF2               	bsf	intcon,7,c	;volatile
   588                           
   589                           ;main.c: 553: clear_keyArray(keypressArray);
   590  000B16  0ED1               	movlw	low main@keypressArray
   591  000B18  6E38               	movwf	clear_keyArray@arr,c
   592  000B1A  0E00               	movlw	high main@keypressArray
   593  000B1C  6E39               	movwf	clear_keyArray@arr+1,c
   594  000B1E  EC33  F009         	call	_clear_keyArray	;wreg free
   595                           
   596                           ;main.c: 555: beep_error();
   597  000B22  EC42  F008         	call	_beep_error	;wreg free
   598                           
   599                           ;main.c: 556: state_timer0(1);
   600  000B26  0E01               	movlw	1
   601  000B28  EC9E  F009         	call	_state_timer0
   602  000B2C                     
   603                           ;main.c: 559: {
   604                           ;main.c: 561: getKey(&currentKeypadStatus);
   605  000B2C  0EE0               	movlw	low main@currentKeypadStatus
   606  000B2E  6E38               	movwf	getKey@KeypadStatus,c
   607  000B30  0E00               	movlw	high main@currentKeypadStatus
   608  000B32  6E39               	movwf	getKey@KeypadStatus+1,c
   609  000B34  EC08  F004         	call	_getKey	;wreg free
   610                           
   611                           ;main.c: 563: if(currentKeypadStatus.keyPressIndicator == 1)
   612  000B38  0100               	movlb	0	; () banked
   613  000B3A  A1E0               	btfss	main@currentKeypadStatus& (0+255),0,b
   614  000B3C  D0A8               	goto	u1640
   615                           
   616                           ; BSR set to: 0
   617                           ;main.c: 564: {
   618                           ;main.c: 567: if(currentKeypadStatus.keyPressed == SP_FUNC_A)
   619  000B3E  0E0B               	movlw	11
   620  000B40  19E1               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   621  000B42  B4D8               	btfsc	status,2,c
   622  000B44  D09F               	goto	l423
   623                           
   624                           ; BSR set to: 0
   625                           ;main.c: 571: else if(currentKeypadStatus.keyPressed == SP_FUNC_B)
   626                           
   627                           ; BSR set to: 0
   628                           
   629                           ; BSR set to: 0
   630                           ;main.c: 568: {
   631                           ;main.c: 570: }
   632  000B46  0E0C               	movlw	12
   633  000B48  19E1               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   634  000B4A  B4D8               	btfsc	status,2,c
   635  000B4C  D09B               	goto	l423
   636                           
   637                           ; BSR set to: 0
   638                           ;main.c: 575: else if(currentKeypadStatus.keyPressed == SP_FUNC_ENTER)
   639                           
   640                           ; BSR set to: 0
   641                           
   642                           ; BSR set to: 0
   643                           ;main.c: 572: {
   644                           ;main.c: 574: }
   645  000B4E  0E0F               	movlw	15
   646  000B50  19E1               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   647  000B52  A4D8               	btfss	status,2,c
   648  000B54  D050               	goto	l403
   649                           
   650                           ; BSR set to: 0
   651                           ;main.c: 576: {
   652                           ;main.c: 578: if(currentSystemState == NORMAL)
   653  000B56  51DD               	movf	main@currentSystemState& (0+255),w,b
   654  000B58  A4D8               	btfss	status,2,c
   655  000B5A  D01E               	goto	l404
   656                           
   657                           ; BSR set to: 0
   658                           ;main.c: 579: {
   659                           ;main.c: 581: if(0 == arr_to_num(keypressArray, numOfKeysPressed, &locker_num))
   660  000B5C  0ED1               	movlw	low main@keypressArray
   661  000B5E  6E38               	movwf	arr_to_num@arr,c
   662  000B60  0E00               	movlw	high main@keypressArray
   663  000B62  6E39               	movwf	arr_to_num@arr+1,c
   664  000B64  C0DE  F03A         	movff	main@numOfKeysPressed,arr_to_num@num_of_elements
   665  000B68  0EDF               	movlw	low main@locker_num
   666  000B6A  6E3B               	movwf	arr_to_num@number,c
   667  000B6C  0E00               	movlw	high main@locker_num
   668  000B6E  6E3C               	movwf	arr_to_num@number+1,c
   669  000B70  ECAE  F007         	call	_arr_to_num	;wreg free
   670  000B74  0900               	iorlw	0
   671  000B76  B4D8               	btfsc	status,2,c
   672  000B78  EF07  F000         	goto	start
   673                           
   674                           ;main.c: 587: else if(0 == check_lock_num_validity(locker_num))
   675                           
   676                           ;main.c: 585: }
   677                           
   678                           ;main.c: 582: {
   679                           ;main.c: 584: break;
   680  000B7C  0100               	movlb	0	; () banked
   681  000B7E  51DF               	movf	main@locker_num& (0+255),w,b
   682  000B80  EC45  F009         	call	_check_lock_num_validity
   683  000B84  0900               	iorlw	0
   684  000B86  B4D8               	btfsc	status,2,c
   685  000B88  EF07  F000         	goto	start
   686                           
   687                           ;main.c: 592: else
   688                           ;main.c: 593: {
   689                           ;main.c: 594: beep_ok();
   690                           
   691                           ;main.c: 591: }
   692                           
   693                           ;main.c: 588: {
   694                           ;main.c: 590: break;
   695  000B8C  ECE8  F008         	call	_beep_ok	;wreg free
   696                           
   697                           ;main.c: 595: currentSystemState = UID_ENTERED;
   698  000B90  0E01               	movlw	1
   699  000B92  0100               	movlb	0	; () banked
   700  000B94  6FDD               	movwf	main@currentSystemState& (0+255),b
   701                           
   702                           ; BSR set to: 0
   703                           ;main.c: 596: }
   704                           ;main.c: 597: }
   705                           
   706                           ; BSR set to: 0
   707  000B96  D028               	goto	l413
   708  000B98                     l404:
   709                           
   710                           ; BSR set to: 0
   711                           ;main.c: 598: else if(currentSystemState == UID_ENTERED)
   712                           
   713                           ; BSR set to: 0
   714  000B98  05DD               	decf	main@currentSystemState& (0+255),w,b
   715  000B9A  A4D8               	btfss	status,2,c
   716  000B9C  D025               	goto	l413
   717                           
   718                           ; BSR set to: 0
   719                           ;main.c: 599: {
   720                           ;main.c: 601: addr = (locker_num - 1) * 10;
   721  000B9E  05DF               	decf	main@locker_num& (0+255),w,b
   722  000BA0  0D0A               	mullw	10
   723  000BA2  CFF3 F0DC          	movff	prodl,main@addr
   724                           
   725                           ; BSR set to: 0
   726                           ;main.c: 602: if(0 == passcodeCompare(keypressArray, numOfKeysPressed, addr))
   727  000BA6  0ED1               	movlw	low main@keypressArray
   728  000BA8  6E39               	movwf	passcodeCompare@keybuffer1,c
   729  000BAA  0E00               	movlw	high main@keypressArray
   730  000BAC  6E3A               	movwf	passcodeCompare@keybuffer1+1,c
   731  000BAE  C0DE  F03B         	movff	main@numOfKeysPressed,passcodeCompare@compareLenght
   732  000BB2  C0DC  F03C         	movff	main@addr,passcodeCompare@compareAddr
   733  000BB6  EC00  F008         	call	_passcodeCompare	;wreg free
   734  000BBA  0900               	iorlw	0
   735  000BBC  B4D8               	btfsc	status,2,c
   736  000BBE  EF07  F000         	goto	start
   737                           
   738                           ;main.c: 608: else
   739                           ;main.c: 609: {
   740                           ;main.c: 610: beep_ok();
   741                           
   742                           ;main.c: 607: }
   743                           
   744                           ;main.c: 603: {
   745                           ;main.c: 606: break;
   746  000BC2  ECE8  F008         	call	_beep_ok	;wreg free
   747                           
   748                           ;main.c: 611: open_lock(locker_num);
   749  000BC6  0100               	movlb	0	; () banked
   750  000BC8  51DF               	movf	main@locker_num& (0+255),w,b
   751  000BCA  ECE8  F006         	call	_open_lock
   752                           
   753                           ;main.c: 612: start_door_timer();
   754  000BCE  EC9A  F009         	call	_start_door_timer	;wreg free
   755                           
   756                           ;main.c: 613: open_lock_arr[num_of_doors_open++] = locker_num;
   757  000BD2  5015               	movf	_num_of_doors_open,w,c
   758  000BD4  0D01               	mullw	1
   759  000BD6  0E01               	movlw	low _open_lock_arr
   760  000BD8  24F3               	addwf	prodl,w,c
   761  000BDA  6ED9               	movwf	fsr2l,c
   762  000BDC  0E00               	movlw	high _open_lock_arr
   763  000BDE  20F4               	addwfc	prodh,w,c
   764  000BE0  6EDA               	movwf	fsr2h,c
   765  000BE2  C0DF  FFDF         	movff	main@locker_num,indf2
   766  000BE6  2A15               	incf	_num_of_doors_open,f,c
   767  000BE8                     l413:
   768                           
   769                           ;main.c: 615: }
   770                           ;main.c: 616: }
   771                           ;main.c: 617: clear_keyArray(keypressArray);
   772  000BE8  0ED1               	movlw	low main@keypressArray
   773  000BEA  6E38               	movwf	clear_keyArray@arr,c
   774  000BEC  0E00               	movlw	high main@keypressArray
   775  000BEE  6E39               	movwf	clear_keyArray@arr+1,c
   776  000BF0  EC33  F009         	call	_clear_keyArray	;wreg free
   777  000BF4  D022               	goto	l2661
   778  000BF6                     l403:
   779                           
   780                           ; BSR set to: 0
   781                           ;main.c: 620: else if(currentKeypadStatus.keyPressed == SP_FUNC_OFF)
   782                           
   783                           ; BSR set to: 0
   784  000BF6  0E0E               	movlw	14
   785  000BF8  19E1               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   786  000BFA  B4D8               	btfsc	status,2,c
   787  000BFC  D043               	goto	l423
   788                           
   789                           ; BSR set to: 0
   790                           ;main.c: 624: else if(currentKeypadStatus.keyPressed == SP_FUNC_ON)
   791                           
   792                           ; BSR set to: 0
   793                           
   794                           ; BSR set to: 0
   795                           ;main.c: 621: {
   796                           ;main.c: 623: }
   797  000BFE  0E0D               	movlw	13
   798  000C00  19E1               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   799  000C02  A4D8               	btfss	status,2,c
   800  000C04  D01D               	goto	l417
   801                           
   802                           ; BSR set to: 0
   803                           ;main.c: 625: {
   804                           ;main.c: 626: if(currentSystemState == UID_ENTERED)
   805  000C06  05DD               	decf	main@currentSystemState& (0+255),w,b
   806  000C08  A4D8               	btfss	status,2,c
   807  000C0A  D011               	goto	l418
   808                           
   809                           ; BSR set to: 0
   810                           ;main.c: 627: {
   811                           ;main.c: 629: addr = (locker_num - 1) * 10;
   812  000C0C  05DF               	decf	main@locker_num& (0+255),w,b
   813  000C0E  0D0A               	mullw	10
   814  000C10  CFF3 F0DC          	movff	prodl,main@addr
   815                           
   816                           ; BSR set to: 0
   817                           ;main.c: 630: eepromWriteCode(addr, numOfKeysPressed, keypressArray);
   818  000C14  C0DE  F03B         	movff	main@numOfKeysPressed,eepromWriteCode@codeLenght
   819  000C18  0ED1               	movlw	low main@keypressArray
   820  000C1A  6E3C               	movwf	eepromWriteCode@codeBuffer,c
   821  000C1C  0E00               	movlw	high main@keypressArray
   822  000C1E  6E3D               	movwf	eepromWriteCode@codeBuffer+1,c
   823  000C20  51DC               	movf	main@addr& (0+255),w,b
   824  000C22  ECCB  F008         	call	_eepromWriteCode
   825                           
   826                           ;main.c: 631: beep_ok();
   827  000C26  ECE8  F008         	call	_beep_ok	;wreg free
   828                           
   829                           ;main.c: 632: break;
   830  000C2A  EF07  F000         	goto	start
   831  000C2E                     l418:
   832                           
   833                           ;main.c: 633: }
   834                           ;main.c: 634: clear_keyArray(keypressArray);
   835  000C2E  0ED1               	movlw	low main@keypressArray
   836  000C30  6E38               	movwf	clear_keyArray@arr,c
   837  000C32  0E00               	movlw	high main@keypressArray
   838  000C34  6E39               	movwf	clear_keyArray@arr+1,c
   839  000C36  EC33  F009         	call	_clear_keyArray	;wreg free
   840  000C3A                     l2661:
   841                           
   842                           ;main.c: 635: numOfKeysPressed = 0;
   843  000C3A  0E00               	movlw	0
   844  000C3C  0100               	movlb	0	; () banked
   845  000C3E  D021               	goto	L1
   846  000C40                     l417:
   847                           
   848                           ; BSR set to: 0
   849                           ;main.c: 637: else
   850                           ;main.c: 638: {
   851                           ;main.c: 640: for(unsigned char i = 0; i < currentKeypadStatus.keyPressed; i++)
   852                           
   853                           ; BSR set to: 0
   854  000C40  0E00               	movlw	0
   855  000C42  6FDB               	movwf	main@i& (0+255),b
   856  000C44  D00B               	goto	l420
   857  000C46                     
   858                           ; BSR set to: 0
   859                           ;main.c: 641: {
   860                           ;main.c: 642: beep();
   861                           
   862                           ; BSR set to: 0
   863  000C46  EC6F  F009         	call	_beep	;wreg free
   864                           
   865                           ;main.c: 643: _delay((unsigned long)((20)*(8000000/4000.0)));
   866  000C4A  0E34               	movlw	52
   867  000C4C  6E40               	movwf	??_main& (0+255),c
   868  000C4E  0EF2               	movlw	242
   869  000C50                     u1667:
   870  000C50  2EE8               	decfsz	wreg,f,c
   871  000C52  D7FE               	bra	u1667
   872  000C54  2E40               	decfsz	??_main& (0+255),f,c
   873  000C56  D7FC               	bra	u1667
   874  000C58  0100               	movlb	0	; () banked
   875  000C5A  2BDB               	incf	main@i& (0+255),f,b
   876  000C5C                     l420:
   877                           
   878                           ; BSR set to: 0
   879                           
   880                           ; BSR set to: 0
   881  000C5C  51E1               	movf	(main@currentKeypadStatus+1)& (0+255),w,b
   882  000C5E  5DDB               	subwf	main@i& (0+255),w,b
   883  000C60  A0D8               	btfss	status,0,c
   884  000C62  D7F1               	goto	l421
   885                           
   886                           ; BSR set to: 0
   887                           ;main.c: 644: }
   888                           ;main.c: 646: keypressArray[numOfKeysPressed++] = currentKeypadStatus.keyPressed;
   889                           
   890                           ; BSR set to: 0
   891  000C64  51DE               	movf	main@numOfKeysPressed& (0+255),w,b
   892  000C66  0D01               	mullw	1
   893  000C68  0ED1               	movlw	low main@keypressArray
   894  000C6A  24F3               	addwf	prodl,w,c
   895  000C6C  6ED9               	movwf	fsr2l,c
   896  000C6E  0E00               	movlw	high main@keypressArray
   897  000C70  20F4               	addwfc	prodh,w,c
   898  000C72  6EDA               	movwf	fsr2h,c
   899  000C74  C0E1  FFDF         	movff	main@currentKeypadStatus+1,indf2
   900                           
   901                           ; BSR set to: 0
   902  000C78  2BDE               	incf	main@numOfKeysPressed& (0+255),f,b
   903                           
   904                           ; BSR set to: 0
   905                           ;main.c: 647: if(numOfKeysPressed > 10)
   906  000C7A  0E0A               	movlw	10
   907  000C7C  65DE               	cpfsgt	main@numOfKeysPressed& (0+255),b
   908  000C7E  D002               	goto	l423
   909                           
   910                           ; BSR set to: 0
   911                           ;main.c: 648: {
   912                           ;main.c: 649: numOfKeysPressed = 0;
   913  000C80  0E00               	movlw	0
   914  000C82                     L1:
   915  000C82  6FDE               	movwf	main@numOfKeysPressed& (0+255),b
   916  000C84                     l423:
   917                           
   918                           ; BSR set to: 0
   919                           
   920                           ; BSR set to: 0
   921                           
   922                           ; BSR set to: 0
   923                           ;main.c: 651: }
   924                           ;main.c: 652: }
   925                           ;main.c: 653: while(buttonPressedIndicator());
   926                           
   927                           ; BSR set to: 0
   928                           
   929                           ; BSR set to: 0
   930                           
   931                           ; BSR set to: 0
   932                           
   933                           ; BSR set to: 0
   934                           
   935                           ; BSR set to: 0
   936  000C84  EC63  F009         	call	_buttonPressedIndicator	;wreg free
   937  000C88  0900               	iorlw	0
   938  000C8A  A4D8               	btfss	status,2,c
   939  000C8C  D7FB               	goto	l423
   940  000C8E                     u1640:
   941                           
   942                           ;main.c: 654: }
   943                           ;main.c: 657: if(((volatile _io_reg*)&systemStateReg)->bit7 == 1)
   944  000C8E  AE20               	btfss	_systemStateReg,7,c	;volatile
   945  000C90  D74D               	goto	l397
   946                           
   947                           ;main.c: 658: {
   948                           ;main.c: 659: ((volatile _io_reg*)&systemStateReg)->bit7 = 0;
   949  000C92  9E20               	bcf	_systemStateReg,7,c	;volatile
   950                           
   951                           ;main.c: 660: beep_long();
   952  000C94  EC54  F009         	call	_beep_long	;wreg free
   953                           
   954                           ;main.c: 661: clear_keyArray(keypressArray);
   955  000C98  0ED1               	movlw	low main@keypressArray
   956  000C9A  6E38               	movwf	clear_keyArray@arr,c
   957  000C9C  0E00               	movlw	high main@keypressArray
   958  000C9E  6E39               	movwf	clear_keyArray@arr+1,c
   959  000CA0  EC33  F009         	call	_clear_keyArray	;wreg free
   960                           
   961                           ;main.c: 662: numOfKeysPressed = 0;
   962  000CA4  0E00               	movlw	0
   963  000CA6  0100               	movlb	0	; () banked
   964  000CA8  6FDE               	movwf	main@numOfKeysPressed& (0+255),b
   965                           
   966                           ; BSR set to: 0
   967                           ;main.c: 663: currentSystemState = NORMAL;
   968  000CAA  0E00               	movlw	0
   969  000CAC  6FDD               	movwf	main@currentSystemState& (0+255),b
   970                           
   971                           ; BSR set to: 0
   972                           
   973                           ; BSR set to: 0
   974  000CAE  D73E               	goto	l397
   975  000CB0                     __end_of_main:
   976                           	opt stack 0
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           prodh	equ	0xFF4
   982                           prodl	equ	0xFF3
   983                           intcon	equ	0xFF2
   984                           postinc0	equ	0xFEE
   985                           wreg	equ	0xFE8
   986                           postdec1	equ	0xFE5
   987                           fsr1l	equ	0xFE1
   988                           indf2	equ	0xFDF
   989                           fsr2h	equ	0xFDA
   990                           fsr2l	equ	0xFD9
   991                           status	equ	0xFD8
   992                           
   993 ;; *************** function _start_door_timer *****************
   994 ;; Defined at:
   995 ;;		line 334 in file "main.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;		None
   998 ;; Auto vars:     Size  Location     Type
   999 ;;		None
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg, status,2, cstack
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1009 ;;      Params:         0       0       0       0       0       0       0       0       0
  1010 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1011 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1012 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1013 ;;Total ram usage:        0 bytes
  1014 ;; Hardware stack levels used:    1
  1015 ;; Hardware stack levels required when called:    3
  1016 ;; This function calls:
  1017 ;;		_state_timer0
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           	psect	text1
  1024  001334                     __ptext1:
  1025                           	opt stack 0
  1026  001334                     _start_door_timer:
  1027                           	opt stack 27
  1028                           
  1029                           ;main.c: 336: state_timer0(1);
  1030                           
  1031                           ;incstack = 0
  1032  001334  0E01               	movlw	1
  1033  001336  EC9E  F009         	call	_state_timer0
  1034  00133A  0012               	return		;funcret
  1035  00133C                     __end_of_start_door_timer:
  1036                           	opt stack 0
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           prodh	equ	0xFF4
  1042                           prodl	equ	0xFF3
  1043                           intcon	equ	0xFF2
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1l	equ	0xFE1
  1048                           indf2	equ	0xFDF
  1049                           fsr2h	equ	0xFDA
  1050                           fsr2l	equ	0xFD9
  1051                           status	equ	0xFD8
  1052                           
  1053 ;; *************** function _state_timer0 *****************
  1054 ;; Defined at:
  1055 ;;		line 23 in file "timer.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  state           1    wreg     unsigned char 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  state           1   23[COMRAM] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1069 ;;      Params:         0       0       0       0       0       0       0       0       0
  1070 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1072 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1073 ;;Total ram usage:        1 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    2
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_start_door_timer
  1080 ;;		_main
  1081 ;;		_stop_door_timer
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text2
  1086  00133C                     __ptext2:
  1087                           	opt stack 0
  1088  00133C                     _state_timer0:
  1089                           	opt stack 28
  1090                           
  1091                           ;timer.c: 25: if(state = 1)
  1092                           
  1093                           ;incstack = 0
  1094  00133C  0E01               	movlw	1
  1095  00133E  6E38               	movwf	state_timer0@state,c
  1096                           
  1097                           ;timer.c: 26: T0CONbits.TMR0ON = 1;
  1098  001340  8ED5               	bsf	4053,7,c	;volatile
  1099  001342  0012               	return	
  1100  001344                     __end_of_state_timer0:
  1101                           	opt stack 0
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           prodh	equ	0xFF4
  1107                           prodl	equ	0xFF3
  1108                           intcon	equ	0xFF2
  1109                           postinc0	equ	0xFEE
  1110                           wreg	equ	0xFE8
  1111                           postdec1	equ	0xFE5
  1112                           fsr1l	equ	0xFE1
  1113                           indf2	equ	0xFDF
  1114                           fsr2h	equ	0xFDA
  1115                           fsr2l	equ	0xFD9
  1116                           status	equ	0xFD8
  1117                           
  1118 ;; *************** function _passcodeCompare *****************
  1119 ;; Defined at:
  1120 ;;		line 887 in file "main.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  keybuffer1      2   24[COMRAM] PTR unsigned char 
  1123 ;;		 -> main@keypressArray(10), 
  1124 ;;  compareLengh    1   26[COMRAM] unsigned char 
  1125 ;;  compareAddr     1   27[COMRAM] unsigned char 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  i               1   29[COMRAM] unsigned char 
  1128 ;;  validity        1   30[COMRAM] unsigned char 
  1129 ;;  storedCodeLe    1   28[COMRAM] unsigned char 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      unsigned char 
  1132 ;; Registers used:
  1133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1139 ;;      Params:         4       0       0       0       0       0       0       0       0
  1140 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1141 ;;      Temps:          0       7       0       0       0       0       0       0       0
  1142 ;;      Totals:         7       7       0       0       0       0       0       0       0
  1143 ;;Total ram usage:       14 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    3
  1146 ;; This function calls:
  1147 ;;		_readEEPROM
  1148 ;; This function is called by:
  1149 ;;		_main
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text3
  1154  001000                     __ptext3:
  1155                           	opt stack 0
  1156  001000                     _passcodeCompare:
  1157                           	opt stack 27
  1158                           
  1159                           ;main.c: 889: unsigned char validity = 0;
  1160                           
  1161                           ;incstack = 0
  1162  001000  0E00               	movlw	0
  1163  001002  6E3F               	movwf	passcodeCompare@validity,c
  1164                           
  1165                           ;main.c: 890: unsigned char storedCodeLenght = readEEPROM(compareAddr);
  1166  001004  503C               	movf	passcodeCompare@compareAddr,w,c
  1167  001006  EC8C  F009         	call	_readEEPROM
  1168  00100A  6E3D               	movwf	passcodeCompare@storedCodeLenght,c
  1169                           
  1170                           ;main.c: 891: if(compareLenght != storedCodeLenght)
  1171  00100C  503D               	movf	passcodeCompare@storedCodeLenght,w,c
  1172  00100E  183B               	xorwf	passcodeCompare@compareLenght,w,c
  1173  001010  B4D8               	btfsc	status,2,c
  1174  001012  D004               	goto	l432
  1175  001014  D019               	goto	l436
  1176  001016                     l2537:
  1177                           
  1178                           ;main.c: 894: validity = 0;
  1179  001016  0E00               	movlw	0
  1180  001018  6E3F               	movwf	passcodeCompare@validity,c
  1181                           
  1182                           ;main.c: 896: }
  1183  00101A  D032               	goto	u1480
  1184  00101C                     l432:
  1185                           
  1186                           ;main.c: 897: else
  1187                           ;main.c: 898: {
  1188                           ;main.c: 899: for(unsigned char i = 0; i <= (compareLenght - 1); i++)
  1189  00101C  0E00               	movlw	0
  1190  00101E  6E3E               	movwf	passcodeCompare@i,c
  1191  001020  D016               	goto	l434
  1192  001022                     
  1193                           ;main.c: 900: {
  1194                           ;main.c: 901: if(*keybuffer1 == readEEPROM(++compareAddr))
  1195  001022  C039  FFD9         	movff	passcodeCompare@keybuffer1,fsr2l
  1196  001026  C03A  FFDA         	movff	passcodeCompare@keybuffer1+1,fsr2h
  1197  00102A  2A3C               	incf	passcodeCompare@compareAddr,f,c
  1198  00102C  503C               	movf	passcodeCompare@compareAddr,w,c
  1199  00102E  EC8C  F009         	call	_readEEPROM
  1200  001032  0100               	movlb	0	; () banked
  1201  001034  6FCB               	movwf	(??_passcodeCompare+1)& (0+255),b
  1202  001036  50DE               	movf	postinc2,w,c
  1203  001038  19CB               	xorwf	(??_passcodeCompare+1)& (0+255),w,b
  1204  00103A  A4D8               	btfss	status,2,c
  1205  00103C  D005               	goto	l436
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;main.c: 902: {
  1209                           ;main.c: 903: keybuffer1++;
  1210  00103E  4A39               	infsnz	passcodeCompare@keybuffer1,f,c
  1211  001040  2A3A               	incf	passcodeCompare@keybuffer1+1,f,c
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;main.c: 904: validity = 1;
  1215  001042  0E01               	movlw	1
  1216  001044  6E3F               	movwf	passcodeCompare@validity,c
  1217                           
  1218                           ;main.c: 905: }
  1219  001046  D002               	goto	l437
  1220  001048                     l436:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;main.c: 906: else
  1224                           ;main.c: 907: {
  1225                           ;main.c: 908: ((volatile _io_reg*)&systemStateReg2)->bit2 = 0;
  1226  001048  941F               	bcf	_systemStateReg2,2,c	;volatile
  1227  00104A  D7E5               	goto	l2537
  1228  00104C                     l437:
  1229                           
  1230                           ; BSR set to: 0
  1231                           
  1232                           ; BSR set to: 0
  1233  00104C  2A3E               	incf	passcodeCompare@i,f,c
  1234  00104E                     l434:
  1235                           
  1236                           ; BSR set to: 0
  1237  00104E  503E               	movf	passcodeCompare@i,w,c
  1238  001050  0100               	movlb	0	; () banked
  1239  001052  6FCA               	movwf	??_passcodeCompare& (0+255),b
  1240  001054  6BCB               	clrf	(??_passcodeCompare+1)& (0+255),b
  1241  001056  0EFF               	movlw	255
  1242  001058  6FCC               	movwf	(??_passcodeCompare+2)& (0+255),b
  1243  00105A  0EFF               	movlw	255
  1244  00105C  6FCD               	movwf	(??_passcodeCompare+3)& (0+255),b
  1245  00105E  503B               	movf	passcodeCompare@compareLenght,w,c
  1246  001060  6FCE               	movwf	(??_passcodeCompare+4)& (0+255),b
  1247  001062  6BCF               	clrf	(??_passcodeCompare+5)& (0+255),b
  1248  001064  51CC               	movf	(??_passcodeCompare+2)& (0+255),w,b
  1249  001066  27CE               	addwf	(??_passcodeCompare+4)& (0+255),f,b
  1250  001068  51CD               	movf	(??_passcodeCompare+3)& (0+255),w,b
  1251  00106A  23CF               	addwfc	(??_passcodeCompare+5)& (0+255),f,b
  1252  00106C  51CA               	movf	??_passcodeCompare& (0+255),w,b
  1253  00106E  5DCE               	subwf	(??_passcodeCompare+4)& (0+255),w,b
  1254  001070  51CF               	movf	(??_passcodeCompare+5)& (0+255),w,b
  1255  001072  0A80               	xorlw	128
  1256  001074  6FD0               	movwf	(??_passcodeCompare+6)& (0+255),b
  1257  001076  51CB               	movf	(??_passcodeCompare+1)& (0+255),w,b
  1258  001078  0A80               	xorlw	128
  1259  00107A  59D0               	subwfb	(??_passcodeCompare+6)& (0+255),w,b
  1260  00107C  B0D8               	btfsc	status,0,c
  1261  00107E  D7D1               	goto	l435
  1262  001080                     u1480:
  1263                           
  1264                           ;main.c: 911: }
  1265                           ;main.c: 912: }
  1266                           ;main.c: 913: }
  1267                           ;main.c: 914: return validity;
  1268                           
  1269                           ; BSR set to: 0
  1270                           
  1271                           ; BSR set to: 0
  1272  001080  503F               	movf	passcodeCompare@validity,w,c
  1273  001082  0012               	return	
  1274  001084                     __end_of_passcodeCompare:
  1275                           	opt stack 0
  1276                           tblptru	equ	0xFF8
  1277                           tblptrh	equ	0xFF7
  1278                           tblptrl	equ	0xFF6
  1279                           tablat	equ	0xFF5
  1280                           prodh	equ	0xFF4
  1281                           prodl	equ	0xFF3
  1282                           intcon	equ	0xFF2
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1l	equ	0xFE1
  1287                           indf2	equ	0xFDF
  1288                           postinc2	equ	0xFDE
  1289                           fsr2h	equ	0xFDA
  1290                           fsr2l	equ	0xFD9
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _readEEPROM *****************
  1294 ;; Defined at:
  1295 ;;		line 37 in file "eeprom_functions.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  address         1    wreg     unsigned char 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  address         1   23[COMRAM] unsigned char 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      unsigned char 
  1302 ;; Registers used:
  1303 ;;		wreg, status,2
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1309 ;;      Params:         0       0       0       0       0       0       0       0       0
  1310 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1312 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1313 ;;Total ram usage:        1 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    2
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		_passcodeCompare
  1320 ;;		_check_password_presence
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text4
  1325  001318                     __ptext4:
  1326                           	opt stack 0
  1327  001318                     _readEEPROM:
  1328                           	opt stack 27
  1329                           
  1330                           ;incstack = 0
  1331                           ;readEEPROM@address stored from wreg
  1332  001318  6E38               	movwf	readEEPROM@address,c
  1333                           
  1334                           ;eeprom_functions.c: 39: EEADR = address;
  1335  00131A  C038  FFA9         	movff	readEEPROM@address,4009	;volatile
  1336                           
  1337                           ;eeprom_functions.c: 40: EECON1bits.EEPGD = 0;
  1338  00131E  9EA6               	bcf	4006,7,c	;volsfr
  1339                           
  1340                           ;eeprom_functions.c: 41: EECON1bits.RD = 1;
  1341  001320  80A6               	bsf	4006,0,c	;volsfr
  1342                           
  1343                           ;eeprom_functions.c: 42: return EEDATA;
  1344  001322  50A8               	movf	4008,w,c	;volatile
  1345  001324  0012               	return	
  1346  001326                     __end_of_readEEPROM:
  1347                           	opt stack 0
  1348                           tblptru	equ	0xFF8
  1349                           tblptrh	equ	0xFF7
  1350                           tblptrl	equ	0xFF6
  1351                           tablat	equ	0xFF5
  1352                           prodh	equ	0xFF4
  1353                           prodl	equ	0xFF3
  1354                           intcon	equ	0xFF2
  1355                           postinc0	equ	0xFEE
  1356                           wreg	equ	0xFE8
  1357                           postdec1	equ	0xFE5
  1358                           fsr1l	equ	0xFE1
  1359                           indf2	equ	0xFDF
  1360                           postinc2	equ	0xFDE
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function _open_lock *****************
  1366 ;; Defined at:
  1367 ;;		line 388 in file "main.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  lock_num        1    wreg     unsigned char 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  lock_num        1   23[COMRAM] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1381 ;;      Params:         0       0       0       0       0       0       0       0       0
  1382 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1384 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1385 ;;Total ram usage:        1 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    2
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text5
  1396  000DD0                     __ptext5:
  1397                           	opt stack 0
  1398  000DD0                     _open_lock:
  1399                           	opt stack 28
  1400                           
  1401                           ;incstack = 0
  1402                           ;open_lock@lock_num stored from wreg
  1403  000DD0  6E38               	movwf	open_lock@lock_num,c
  1404                           
  1405                           ;main.c: 390: switch(lock_num)
  1406  000DD2  D026               	goto	l347
  1407  000DD4                     l348:
  1408  000DD4  808B               	bsf	3979,0,c	;volatile
  1409                           
  1410                           ;main.c: 393: break;
  1411  000DD6  0012               	return	
  1412  000DD8                     l350:
  1413  000DD8  848D               	bsf	3981,2,c	;volatile
  1414                           
  1415                           ;main.c: 396: break;
  1416  000DDA  0012               	return	
  1417  000DDC                     l351:
  1418  000DDC  828D               	bsf	3981,1,c	;volatile
  1419                           
  1420                           ;main.c: 399: break;
  1421  000DDE  0012               	return	
  1422  000DE0                     l352:
  1423  000DE0  808D               	bsf	3981,0,c	;volatile
  1424                           
  1425                           ;main.c: 402: break;
  1426  000DE2  0012               	return	
  1427  000DE4                     l353:
  1428  000DE4  8A89               	bsf	3977,5,c	;volatile
  1429                           
  1430                           ;main.c: 405: break;
  1431  000DE6  0012               	return	
  1432  000DE8                     l354:
  1433  000DE8  8889               	bsf	3977,4,c	;volatile
  1434                           
  1435                           ;main.c: 408: break;
  1436  000DEA  0012               	return	
  1437  000DEC                     l355:
  1438  000DEC  8689               	bsf	3977,3,c	;volatile
  1439                           
  1440                           ;main.c: 411: break;
  1441  000DEE  0012               	return	
  1442  000DF0                     l356:
  1443  000DF0  8E8C               	bsf	3980,7,c	;volatile
  1444                           
  1445                           ;main.c: 414: break;
  1446  000DF2  0012               	return	
  1447  000DF4                     l357:
  1448  000DF4  8C8C               	bsf	3980,6,c	;volatile
  1449                           
  1450                           ;main.c: 417: break;
  1451  000DF6  0012               	return	
  1452  000DF8                     l358:
  1453  000DF8  8A8C               	bsf	3980,5,c	;volatile
  1454                           
  1455                           ;main.c: 420: break;
  1456  000DFA  0012               	return	
  1457  000DFC                     l359:
  1458  000DFC  888C               	bsf	3980,4,c	;volatile
  1459                           
  1460                           ;main.c: 423: break;
  1461  000DFE  0012               	return	
  1462  000E00                     l360:
  1463  000E00  8E8B               	bsf	3979,7,c	;volatile
  1464                           
  1465                           ;main.c: 426: break;
  1466  000E02  0012               	return	
  1467  000E04                     l361:
  1468  000E04  8C8B               	bsf	3979,6,c	;volatile
  1469                           
  1470                           ;main.c: 429: break;
  1471  000E06  0012               	return	
  1472  000E08                     l362:
  1473  000E08  848C               	bsf	3980,2,c	;volatile
  1474                           
  1475                           ;main.c: 435: break;
  1476  000E0A  0012               	return	
  1477  000E0C                     l363:
  1478  000E0C  868C               	bsf	3980,3,c	;volatile
  1479                           
  1480                           ;main.c: 438: break;
  1481  000E0E  0012               	return	
  1482  000E10                     l364:
  1483  000E10  828B               	bsf	3979,1,c	;volatile
  1484                           
  1485                           ;main.c: 444: break;
  1486  000E12  0012               	return	
  1487  000E14                     l365:
  1488  000E14  848B               	bsf	3979,2,c	;volatile
  1489                           
  1490                           ;main.c: 447: break;
  1491  000E16  0012               	return	
  1492  000E18                     l366:
  1493  000E18  808C               	bsf	3980,0,c	;volatile
  1494                           
  1495                           ;main.c: 450: break;
  1496  000E1A  0012               	return	
  1497  000E1C                     l367:
  1498  000E1C  828C               	bsf	3980,1,c	;volatile
  1499                           
  1500                           ;main.c: 454: }
  1501                           
  1502                           ;main.c: 453: break;
  1503  000E1E  0012               	return	
  1504  000E20                     l347:
  1505  000E20  5038               	movf	open_lock@lock_num,w,c
  1506                           
  1507                           ; Switch size 1, requested type "space"
  1508                           ; Number of cases is 19, Range of values is 1 to 21
  1509                           ; switch strategies available:
  1510                           ; Name         Instructions Cycles
  1511                           ; simple_byte           58    30 (average)
  1512                           ;	Chosen strategy is simple_byte
  1513  000E22  0A01               	xorlw	1	; case 1
  1514  000E24  B4D8               	btfsc	status,2,c
  1515  000E26  D7D6               	goto	l348
  1516  000E28  0A03               	xorlw	3	; case 2
  1517  000E2A  B4D8               	btfsc	status,2,c
  1518  000E2C  D7D5               	goto	l350
  1519  000E2E  0A01               	xorlw	1	; case 3
  1520  000E30  B4D8               	btfsc	status,2,c
  1521  000E32  D7D4               	goto	l351
  1522  000E34  0A07               	xorlw	7	; case 4
  1523  000E36  B4D8               	btfsc	status,2,c
  1524  000E38  D7D3               	goto	l352
  1525  000E3A  0A01               	xorlw	1	; case 5
  1526  000E3C  B4D8               	btfsc	status,2,c
  1527  000E3E  D7D2               	goto	l353
  1528  000E40  0A03               	xorlw	3	; case 6
  1529  000E42  B4D8               	btfsc	status,2,c
  1530  000E44  D7D1               	goto	l354
  1531  000E46  0A01               	xorlw	1	; case 7
  1532  000E48  B4D8               	btfsc	status,2,c
  1533  000E4A  D7D0               	goto	l355
  1534  000E4C  0A0F               	xorlw	15	; case 8
  1535  000E4E  B4D8               	btfsc	status,2,c
  1536  000E50  D7CF               	goto	l356
  1537  000E52  0A01               	xorlw	1	; case 9
  1538  000E54  B4D8               	btfsc	status,2,c
  1539  000E56  D7CE               	goto	l357
  1540  000E58  0A03               	xorlw	3	; case 10
  1541  000E5A  B4D8               	btfsc	status,2,c
  1542  000E5C  D7CD               	goto	l358
  1543  000E5E  0A01               	xorlw	1	; case 11
  1544  000E60  B4D8               	btfsc	status,2,c
  1545  000E62  D7CC               	goto	l359
  1546  000E64  0A07               	xorlw	7	; case 12
  1547  000E66  B4D8               	btfsc	status,2,c
  1548  000E68  D7CB               	goto	l360
  1549  000E6A  0A01               	xorlw	1	; case 13
  1550  000E6C  B4D8               	btfsc	status,2,c
  1551  000E6E  D7CA               	goto	l361
  1552  000E70  0A02               	xorlw	2	; case 15
  1553  000E72  B4D8               	btfsc	status,2,c
  1554  000E74  D7C9               	goto	l362
  1555  000E76  0A1F               	xorlw	31	; case 16
  1556  000E78  B4D8               	btfsc	status,2,c
  1557  000E7A  D7C8               	goto	l363
  1558  000E7C  0A02               	xorlw	2	; case 18
  1559  000E7E  B4D8               	btfsc	status,2,c
  1560  000E80  D7C7               	goto	l364
  1561  000E82  0A01               	xorlw	1	; case 19
  1562  000E84  B4D8               	btfsc	status,2,c
  1563  000E86  D7C6               	goto	l365
  1564  000E88  0A07               	xorlw	7	; case 20
  1565  000E8A  B4D8               	btfsc	status,2,c
  1566  000E8C  D7C5               	goto	l366
  1567  000E8E  0A01               	xorlw	1	; case 21
  1568  000E90  A4D8               	btfss	status,2,c
  1569  000E92  0012               	return	
  1570  000E94  D7C3               	goto	l367
  1571  000E96                     __end_of_open_lock:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           indf2	equ	0xFDF
  1585                           postinc2	equ	0xFDE
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _initStandbyTimer *****************
  1591 ;; Defined at:
  1592 ;;		line 114 in file "timer.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;		None
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1606 ;;      Params:         0       0       0       0       0       0       0       0       0
  1607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1609 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1610 ;;Total ram usage:        0 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    2
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text6
  1621  001308                     __ptext6:
  1622                           	opt stack 0
  1623  001308                     _initStandbyTimer:
  1624                           	opt stack 28
  1625                           
  1626                           ;timer.c: 116: T1CONbits.T1CKPS0 = 1;
  1627                           
  1628                           ;incstack = 0
  1629  001308  88CD               	bsf	4045,4,c	;volatile
  1630                           
  1631                           ;timer.c: 117: T1CONbits.T1CKPS1 = 1;
  1632  00130A  8ACD               	bsf	4045,5,c	;volatile
  1633                           
  1634                           ;timer.c: 118: TMR1 = 0;
  1635  00130C  0E00               	movlw	0
  1636  00130E  6ECF               	movwf	4047,c	;volatile
  1637  001310  0E00               	movlw	0
  1638  001312  6ECE               	movwf	4046,c	;volatile
  1639                           
  1640                           ;timer.c: 119: PIE1bits.TMR1IE = 1;
  1641  001314  809D               	bsf	3997,0,c	;volatile
  1642  001316  0012               	return		;funcret
  1643  001318                     __end_of_initStandbyTimer:
  1644                           	opt stack 0
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           prodh	equ	0xFF4
  1650                           prodl	equ	0xFF3
  1651                           intcon	equ	0xFF2
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postdec1	equ	0xFE5
  1655                           fsr1l	equ	0xFE1
  1656                           indf2	equ	0xFDF
  1657                           postinc2	equ	0xFDE
  1658                           fsr2h	equ	0xFDA
  1659                           fsr2l	equ	0xFD9
  1660                           status	equ	0xFD8
  1661                           
  1662 ;; *************** function _initKeypad *****************
  1663 ;; Defined at:
  1664 ;;		line 14 in file "Keypad4X4.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1678 ;;      Params:         0       0       0       0       0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    2
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text7
  1693  001326                     __ptext7:
  1694                           	opt stack 0
  1695  001326                     _initKeypad:
  1696                           	opt stack 28
  1697                           
  1698                           ;Keypad4X4.c: 16: TRISB = 0xF0;
  1699                           
  1700                           ;incstack = 0
  1701  001326  0EF0               	movlw	240
  1702  001328  6E93               	movwf	3987,c	;volatile
  1703                           
  1704                           ;Keypad4X4.c: 17: LATB = 0xF0;
  1705  00132A  0EF0               	movlw	240
  1706  00132C  6E8A               	movwf	3978,c	;volatile
  1707                           
  1708                           ;Keypad4X4.c: 18: INTCON2bits.RBPU = 0;
  1709  00132E  9EF1               	bcf	intcon2,7,c	;volatile
  1710                           
  1711                           ;Keypad4X4.c: 19: INTCONbits.RBIE = 1;
  1712  001330  86F2               	bsf	intcon,3,c	;volatile
  1713  001332  0012               	return		;funcret
  1714  001334                     __end_of_initKeypad:
  1715                           	opt stack 0
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           prodh	equ	0xFF4
  1721                           prodl	equ	0xFF3
  1722                           intcon	equ	0xFF2
  1723                           intcon2	equ	0xFF1
  1724                           postinc0	equ	0xFEE
  1725                           wreg	equ	0xFE8
  1726                           postdec1	equ	0xFE5
  1727                           fsr1l	equ	0xFE1
  1728                           indf2	equ	0xFDF
  1729                           postinc2	equ	0xFDE
  1730                           fsr2h	equ	0xFDA
  1731                           fsr2l	equ	0xFD9
  1732                           status	equ	0xFD8
  1733                           
  1734 ;; *************** function _initControllerIO *****************
  1735 ;; Defined at:
  1736 ;;		line 272 in file "main.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, status,2
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1750 ;;      Params:         0       0       0       0       0       0       0       0       0
  1751 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1753 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1754 ;;Total ram usage:        0 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    2
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text8
  1765  00123E                     __ptext8:
  1766                           	opt stack 0
  1767  00123E                     _initControllerIO:
  1768                           	opt stack 28
  1769                           
  1770                           ;main.c: 274: ADCON1 = 0x0F;
  1771                           
  1772                           ;incstack = 0
  1773  00123E  0E0F               	movlw	15
  1774  001240  6EC1               	movwf	4033,c	;volatile
  1775                           
  1776                           ;main.c: 275: CMCON = 0x07;
  1777  001242  0E07               	movlw	7
  1778  001244  6EB4               	movwf	4020,c	;volatile
  1779                           
  1780                           ;main.c: 276: TRISAbits.RA0 = 0;
  1781  001246  9092               	bcf	3986,0,c	;volatile
  1782                           
  1783                           ;main.c: 278: TRISD = 0x00;
  1784  001248  0E00               	movlw	0
  1785  00124A  6E95               	movwf	3989,c	;volatile
  1786                           
  1787                           ;main.c: 279: TRISC = 0x00;
  1788  00124C  0E00               	movlw	0
  1789  00124E  6E94               	movwf	3988,c	;volatile
  1790                           
  1791                           ;main.c: 280: TRISE = 0x00;
  1792  001250  0E00               	movlw	0
  1793  001252  6E96               	movwf	3990,c	;volatile
  1794                           
  1795                           ;main.c: 281: TRISA = 0x00;
  1796  001254  0E00               	movlw	0
  1797  001256  6E92               	movwf	3986,c	;volatile
  1798                           
  1799                           ;main.c: 283: LATD = 0x00;
  1800  001258  0E00               	movlw	0
  1801  00125A  6E8C               	movwf	3980,c	;volatile
  1802                           
  1803                           ;main.c: 284: LATC = 0x00;
  1804  00125C  0E00               	movlw	0
  1805  00125E  6E8B               	movwf	3979,c	;volatile
  1806                           
  1807                           ;main.c: 285: LATE = 0x00;
  1808  001260  0E00               	movlw	0
  1809  001262  6E8D               	movwf	3981,c	;volatile
  1810  001264  0012               	return		;funcret
  1811  001266                     __end_of_initControllerIO:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           prodh	equ	0xFF4
  1818                           prodl	equ	0xFF3
  1819                           intcon	equ	0xFF2
  1820                           intcon2	equ	0xFF1
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           indf2	equ	0xFDF
  1826                           postinc2	equ	0xFDE
  1827                           fsr2h	equ	0xFDA
  1828                           fsr2l	equ	0xFD9
  1829                           status	equ	0xFD8
  1830                           
  1831 ;; *************** function _eepromWriteCode *****************
  1832 ;; Defined at:
  1833 ;;		line 8 in file "eeprom_functions.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  eepromWriteA    1    wreg     unsigned char 
  1836 ;;  codeLenght      1   26[COMRAM] unsigned char 
  1837 ;;  codeBuffer      2   27[COMRAM] PTR unsigned char 
  1838 ;;		 -> main@keypressArray(10), 
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;  eepromWriteA    1   29[COMRAM] unsigned char 
  1841 ;;  i               1   30[COMRAM] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1851 ;;      Params:         3       0       0       0       0       0       0       0       0
  1852 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1853 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1854 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1855 ;;Total ram usage:        5 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    3
  1858 ;; This function calls:
  1859 ;;		_writeEEPROM
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text9
  1866  001196                     __ptext9:
  1867                           	opt stack 0
  1868  001196                     _eepromWriteCode:
  1869                           	opt stack 27
  1870                           
  1871                           ;incstack = 0
  1872                           ;eepromWriteCode@eepromWriteAddr stored from wreg
  1873  001196  6E3E               	movwf	eepromWriteCode@eepromWriteAddr,c
  1874                           
  1875                           ;eeprom_functions.c: 10: writeEEPROM(eepromWriteAddr, codeLenght);
  1876  001198  C03B  F038         	movff	eepromWriteCode@codeLenght,writeEEPROM@datas
  1877  00119C  503E               	movf	eepromWriteCode@eepromWriteAddr,w,c
  1878  00119E  EC04  F009         	call	_writeEEPROM
  1879                           
  1880                           ;eeprom_functions.c: 11: for(unsigned char i=0; i <= codeLenght; i++)
  1881  0011A2  0E00               	movlw	0
  1882  0011A4  6E3F               	movwf	eepromWriteCode@i,c
  1883  0011A6  D00F               	goto	l17
  1884  0011A8                     
  1885                           ;eeprom_functions.c: 12: {
  1886                           ;eeprom_functions.c: 13: eepromWriteAddr++;
  1887  0011A8  2A3E               	incf	eepromWriteCode@eepromWriteAddr,f,c
  1888                           
  1889                           ;eeprom_functions.c: 14: writeEEPROM(eepromWriteAddr, *(codeBuffer + i));
  1890  0011AA  503F               	movf	eepromWriteCode@i,w,c
  1891  0011AC  0D01               	mullw	1
  1892  0011AE  50F3               	movf	prodl,w,c
  1893  0011B0  243C               	addwf	eepromWriteCode@codeBuffer,w,c
  1894  0011B2  6ED9               	movwf	fsr2l,c
  1895  0011B4  50F4               	movf	prodh,w,c
  1896  0011B6  203D               	addwfc	eepromWriteCode@codeBuffer+1,w,c
  1897  0011B8  6EDA               	movwf	fsr2h,c
  1898  0011BA  50DF               	movf	indf2,w,c
  1899  0011BC  6E38               	movwf	writeEEPROM@datas,c
  1900  0011BE  503E               	movf	eepromWriteCode@eepromWriteAddr,w,c
  1901  0011C0  EC04  F009         	call	_writeEEPROM
  1902  0011C4  2A3F               	incf	eepromWriteCode@i,f,c
  1903  0011C6                     l17:
  1904  0011C6  503F               	movf	eepromWriteCode@i,w,c
  1905  0011C8  5C3B               	subwf	eepromWriteCode@codeLenght,w,c
  1906  0011CA  A0D8               	btfss	status,0,c
  1907  0011CC  0012               	return	
  1908  0011CE  D7EC               	goto	l18
  1909  0011D0                     __end_of_eepromWriteCode:
  1910                           	opt stack 0
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           prodh	equ	0xFF4
  1916                           prodl	equ	0xFF3
  1917                           intcon	equ	0xFF2
  1918                           intcon2	equ	0xFF1
  1919                           postinc0	equ	0xFEE
  1920                           wreg	equ	0xFE8
  1921                           postdec1	equ	0xFE5
  1922                           fsr1l	equ	0xFE1
  1923                           indf2	equ	0xFDF
  1924                           postinc2	equ	0xFDE
  1925                           fsr2h	equ	0xFDA
  1926                           fsr2l	equ	0xFD9
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _writeEEPROM *****************
  1930 ;; Defined at:
  1931 ;;		line 18 in file "eeprom_functions.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  address         1    wreg     unsigned char 
  1934 ;;  datas           1   23[COMRAM] unsigned char 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  address         1   24[COMRAM] unsigned char 
  1937 ;;  gie_Status      1   25[COMRAM] unsigned char 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg, status,2
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1947 ;;      Params:         1       0       0       0       0       0       0       0       0
  1948 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1949 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1950 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1951 ;;Total ram usage:        3 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    2
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_eepromWriteCode
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text10
  1962  001208                     __ptext10:
  1963                           	opt stack 0
  1964  001208                     _writeEEPROM:
  1965                           	opt stack 27
  1966                           
  1967                           ;incstack = 0
  1968                           ;writeEEPROM@address stored from wreg
  1969  001208  6E39               	movwf	writeEEPROM@address,c
  1970  00120A                     
  1971                           ;eeprom_functions.c: 20: unsigned char gie_Status;
  1972                           ;eeprom_functions.c: 22: while(EECON1bits.WR);
  1973  00120A  B2A6               	btfsc	4006,1,c	;volsfr
  1974  00120C  D7FE               	goto	l2135
  1975                           
  1976                           ;eeprom_functions.c: 23: EEADR = address;
  1977  00120E  C039  FFA9         	movff	writeEEPROM@address,4009	;volatile
  1978                           
  1979                           ;eeprom_functions.c: 24: EEDATA = datas;
  1980  001212  C038  FFA8         	movff	writeEEPROM@datas,4008	;volatile
  1981                           
  1982                           ;eeprom_functions.c: 25: EECON1bits.EEPGD = 0;
  1983  001216  9EA6               	bcf	4006,7,c	;volsfr
  1984                           
  1985                           ;eeprom_functions.c: 26: EECON1bits.CFGS = 0;
  1986  001218  9CA6               	bcf	4006,6,c	;volsfr
  1987                           
  1988                           ;eeprom_functions.c: 27: EECON1bits.WREN = 1;
  1989  00121A  84A6               	bsf	4006,2,c	;volsfr
  1990                           
  1991                           ;eeprom_functions.c: 28: gie_Status = INTCONbits.GIE;
  1992  00121C  0E00               	movlw	0
  1993  00121E  BEF2               	btfsc	intcon,7,c	;volatile
  1994  001220  0E01               	movlw	1
  1995  001222  6E3A               	movwf	writeEEPROM@gie_Status,c
  1996                           
  1997                           ;eeprom_functions.c: 29: INTCONbits.GIE = 0;
  1998  001224  9EF2               	bcf	intcon,7,c	;volatile
  1999                           
  2000                           ;eeprom_functions.c: 30: EECON2 = 0x55;
  2001  001226  0E55               	movlw	85
  2002  001228  6EA7               	movwf	4007,c	;volsfr
  2003                           
  2004                           ;eeprom_functions.c: 31: EECON2 = 0xaa;
  2005  00122A  0EAA               	movlw	170
  2006  00122C  6EA7               	movwf	4007,c	;volsfr
  2007                           
  2008                           ;eeprom_functions.c: 32: EECON1bits.WR = 1;
  2009  00122E  82A6               	bsf	4006,1,c	;volsfr
  2010                           
  2011                           ;eeprom_functions.c: 33: INTCONbits.GIE = gie_Status;
  2012  001230  B03A               	btfsc	writeEEPROM@gie_Status,0,c
  2013  001232  D002               	bra	u1135
  2014  001234  9EF2               	bcf	intcon,7,c	;volatile
  2015  001236  D001               	bra	u1136
  2016  001238                     u1135:
  2017  001238  8EF2               	bsf	intcon,7,c	;volatile
  2018  00123A                     u1136:
  2019                           
  2020                           ;eeprom_functions.c: 34: EECON1bits.WREN = 0;
  2021  00123A  94A6               	bcf	4006,2,c	;volsfr
  2022  00123C  0012               	return		;funcret
  2023  00123E                     __end_of_writeEEPROM:
  2024                           	opt stack 0
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           prodh	equ	0xFF4
  2030                           prodl	equ	0xFF3
  2031                           intcon	equ	0xFF2
  2032                           intcon2	equ	0xFF1
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postdec1	equ	0xFE5
  2036                           fsr1l	equ	0xFE1
  2037                           indf2	equ	0xFDF
  2038                           postinc2	equ	0xFDE
  2039                           fsr2h	equ	0xFDA
  2040                           fsr2l	equ	0xFD9
  2041                           status	equ	0xFD8
  2042                           
  2043 ;; *************** function _configure_door_timer *****************
  2044 ;; Defined at:
  2045 ;;		line 329 in file "main.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2059 ;;      Params:         0       0       0       0       0       0       0       0       0
  2060 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2062 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2063 ;;Total ram usage:        0 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    3
  2066 ;; This function calls:
  2067 ;;		_setup_timer0
  2068 ;; This function is called by:
  2069 ;;		_main
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text11
  2074  001344                     __ptext11:
  2075                           	opt stack 0
  2076  001344                     _configure_door_timer:
  2077                           	opt stack 27
  2078                           
  2079                           ;main.c: 331: setup_timer0();
  2080                           
  2081                           ;incstack = 0
  2082  001344  EC7A  F009         	call	_setup_timer0	;wreg free
  2083  001348  0012               	return		;funcret
  2084  00134A                     __end_of_configure_door_timer:
  2085                           	opt stack 0
  2086                           tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           prodh	equ	0xFF4
  2091                           prodl	equ	0xFF3
  2092                           intcon	equ	0xFF2
  2093                           intcon2	equ	0xFF1
  2094                           postinc0	equ	0xFEE
  2095                           wreg	equ	0xFE8
  2096                           postdec1	equ	0xFE5
  2097                           fsr1l	equ	0xFE1
  2098                           indf2	equ	0xFDF
  2099                           postinc2	equ	0xFDE
  2100                           fsr2h	equ	0xFDA
  2101                           fsr2l	equ	0xFD9
  2102                           status	equ	0xFD8
  2103                           
  2104 ;; *************** function _setup_timer0 *****************
  2105 ;; Defined at:
  2106 ;;		line 13 in file "timer.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;		None
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  1    wreg      void 
  2113 ;; Registers used:
  2114 ;;		wreg, status,2
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2120 ;;      Params:         0       0       0       0       0       0       0       0       0
  2121 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2123 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2124 ;;Total ram usage:        0 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    2
  2127 ;; This function calls:
  2128 ;;		Nothing
  2129 ;; This function is called by:
  2130 ;;		_configure_door_timer
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           	psect	text12
  2135  0012F4                     __ptext12:
  2136                           	opt stack 0
  2137  0012F4                     _setup_timer0:
  2138                           	opt stack 27
  2139                           
  2140                           ;timer.c: 15: T0CONbits.TMR0ON = 0;
  2141                           
  2142                           ;incstack = 0
  2143  0012F4  9ED5               	bcf	4053,7,c	;volatile
  2144                           
  2145                           ;timer.c: 16: T0CONbits.T08BIT = 0;
  2146  0012F6  9CD5               	bcf	4053,6,c	;volatile
  2147                           
  2148                           ;timer.c: 17: T0CONbits.T0CS = 0;
  2149  0012F8  9AD5               	bcf	4053,5,c	;volatile
  2150                           
  2151                           ;timer.c: 18: INTCONbits.TMR0IE = 1;
  2152  0012FA  8AF2               	bsf	intcon,5,c	;volatile
  2153                           
  2154                           ;timer.c: 19: TMR0 = 0;
  2155  0012FC  0E00               	movlw	0
  2156  0012FE  6ED7               	movwf	4055,c	;volatile
  2157  001300  0E00               	movlw	0
  2158  001302  6ED6               	movwf	4054,c	;volatile
  2159                           
  2160                           ;timer.c: 20: T0CONbits.PSA = 0;
  2161  001304  96D5               	bcf	4053,3,c	;volatile
  2162  001306  0012               	return		;funcret
  2163  001308                     __end_of_setup_timer0:
  2164                           	opt stack 0
  2165                           tblptru	equ	0xFF8
  2166                           tblptrh	equ	0xFF7
  2167                           tblptrl	equ	0xFF6
  2168                           tablat	equ	0xFF5
  2169                           prodh	equ	0xFF4
  2170                           prodl	equ	0xFF3
  2171                           intcon	equ	0xFF2
  2172                           intcon2	equ	0xFF1
  2173                           postinc0	equ	0xFEE
  2174                           wreg	equ	0xFE8
  2175                           postdec1	equ	0xFE5
  2176                           fsr1l	equ	0xFE1
  2177                           indf2	equ	0xFDF
  2178                           postinc2	equ	0xFDE
  2179                           fsr2h	equ	0xFDA
  2180                           fsr2l	equ	0xFD9
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _clear_keyArray *****************
  2184 ;; Defined at:
  2185 ;;		line 382 in file "main.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  arr             2   23[COMRAM] PTR unsigned char 
  2188 ;;		 -> main@keypressArray(10), 
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;  a               1   25[COMRAM] unsigned char 
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  1    wreg      void 
  2193 ;; Registers used:
  2194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2200 ;;      Params:         2       0       0       0       0       0       0       0       0
  2201 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2203 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2204 ;;Total ram usage:        3 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; Hardware stack levels required when called:    2
  2207 ;; This function calls:
  2208 ;;		Nothing
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text13
  2215  001266                     __ptext13:
  2216                           	opt stack 0
  2217  001266                     _clear_keyArray:
  2218                           	opt stack 28
  2219                           
  2220                           ;main.c: 384: for(unsigned char a = 0; a < 10; a++)
  2221                           
  2222                           ;incstack = 0
  2223  001266  0E00               	movlw	0
  2224  001268  6E3A               	movwf	clear_keyArray@a,c
  2225  00126A                     l2513:
  2226  00126A  0E09               	movlw	9
  2227  00126C  643A               	cpfsgt	clear_keyArray@a,c
  2228  00126E  D001               	goto	l342
  2229  001270  0012               	return	
  2230  001272                     l342:
  2231                           
  2232                           ;main.c: 385: arr[a] = 0;
  2233  001272  503A               	movf	clear_keyArray@a,w,c
  2234  001274  0D01               	mullw	1
  2235  001276  50F3               	movf	prodl,w,c
  2236  001278  2438               	addwf	clear_keyArray@arr,w,c
  2237  00127A  6ED9               	movwf	fsr2l,c
  2238  00127C  50F4               	movf	prodh,w,c
  2239  00127E  2039               	addwfc	clear_keyArray@arr+1,w,c
  2240  001280  6EDA               	movwf	fsr2h,c
  2241  001282  0E00               	movlw	0
  2242  001284  6EDF               	movwf	indf2,c
  2243  001286  2A3A               	incf	clear_keyArray@a,f,c
  2244  001288  D7F0               	goto	l2513
  2245  00128A                     __end_of_clear_keyArray:
  2246                           	opt stack 0
  2247                           tblptru	equ	0xFF8
  2248                           tblptrh	equ	0xFF7
  2249                           tblptrl	equ	0xFF6
  2250                           tablat	equ	0xFF5
  2251                           prodh	equ	0xFF4
  2252                           prodl	equ	0xFF3
  2253                           intcon	equ	0xFF2
  2254                           intcon2	equ	0xFF1
  2255                           postinc0	equ	0xFEE
  2256                           wreg	equ	0xFE8
  2257                           postdec1	equ	0xFE5
  2258                           fsr1l	equ	0xFE1
  2259                           indf2	equ	0xFDF
  2260                           postinc2	equ	0xFDE
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _check_lock_num_validity *****************
  2266 ;; Defined at:
  2267 ;;		line 129 in file "main.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  lock_num        1    wreg     unsigned char 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  lock_num        1   24[COMRAM] unsigned char 
  2272 ;;  validity        1   23[COMRAM] unsigned char 
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      unsigned char 
  2275 ;; Registers used:
  2276 ;;		wreg, status,2, status,0
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2282 ;;      Params:         0       0       0       0       0       0       0       0       0
  2283 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2285 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2286 ;;Total ram usage:        2 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    2
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_main
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text14
  2297  00128A                     __ptext14:
  2298                           	opt stack 0
  2299  00128A                     _check_lock_num_validity:
  2300                           	opt stack 28
  2301                           
  2302                           ;incstack = 0
  2303                           ;check_lock_num_validity@lock_num stored from wreg
  2304  00128A  6E39               	movwf	check_lock_num_validity@lock_num,c
  2305                           
  2306                           ;main.c: 131: unsigned char validity = 0;
  2307  00128C  0E00               	movlw	0
  2308  00128E  6E38               	movwf	check_lock_num_validity@validity,c
  2309                           
  2310                           ;main.c: 132: if(lock_num)
  2311  001290  5039               	movf	check_lock_num_validity@lock_num,w,c
  2312  001292  B4D8               	btfsc	status,2,c
  2313  001294  D007               	goto	l297
  2314                           
  2315                           ;main.c: 133: {
  2316                           ;main.c: 134: lock_num <= 21 ? validity = 1 : validity = 0;
  2317  001296  0E16               	movlw	22
  2318  001298  6039               	cpfslt	check_lock_num_validity@lock_num,c
  2319  00129A  D002               	goto	l295
  2320  00129C  0E01               	movlw	1
  2321  00129E  D001               	goto	L2
  2322  0012A0                     l295:
  2323  0012A0  0E00               	movlw	0
  2324  0012A2                     L2:
  2325  0012A2  6E38               	movwf	check_lock_num_validity@validity,c
  2326  0012A4                     l297:
  2327                           
  2328                           ;main.c: 135: }
  2329                           ;main.c: 136: return validity;
  2330  0012A4  5038               	movf	check_lock_num_validity@validity,w,c
  2331  0012A6  0012               	return	
  2332  0012A8                     __end_of_check_lock_num_validity:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           tblptrh	equ	0xFF7
  2336                           tblptrl	equ	0xFF6
  2337                           tablat	equ	0xFF5
  2338                           prodh	equ	0xFF4
  2339                           prodl	equ	0xFF3
  2340                           intcon	equ	0xFF2
  2341                           intcon2	equ	0xFF1
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           postdec1	equ	0xFE5
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           postinc2	equ	0xFDE
  2348                           fsr2h	equ	0xFDA
  2349                           fsr2l	equ	0xFD9
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function _buttonPressedIndicator *****************
  2353 ;; Defined at:
  2354 ;;		line 200 in file "Keypad4X4.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;  keypad_state    2   27[COMRAM] struct .
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      unsigned char 
  2361 ;; Registers used:
  2362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0
  2369 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2371 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2372 ;;Total ram usage:        2 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    3
  2375 ;; This function calls:
  2376 ;;		_getKey
  2377 ;; This function is called by:
  2378 ;;		_main
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text15
  2383  0012C6                     __ptext15:
  2384                           	opt stack 0
  2385  0012C6                     _buttonPressedIndicator:
  2386                           	opt stack 27
  2387                           
  2388                           ;Keypad4X4.c: 202: keypadStatus keypad_state;
  2389                           ;Keypad4X4.c: 203: getKey(&keypad_state);
  2390                           
  2391                           ;incstack = 0
  2392  0012C6  0E3C               	movlw	low buttonPressedIndicator@keypad_state
  2393  0012C8  6E38               	movwf	getKey@KeypadStatus,c
  2394  0012CA  0E00               	movlw	high buttonPressedIndicator@keypad_state
  2395  0012CC  6E39               	movwf	getKey@KeypadStatus+1,c
  2396  0012CE  EC08  F004         	call	_getKey	;wreg free
  2397                           
  2398                           ;Keypad4X4.c: 204: return keypad_state.keyPressIndicator;
  2399  0012D2  A03C               	btfss	buttonPressedIndicator@keypad_state,0,c
  2400  0012D4  D002               	goto	u1350
  2401  0012D6  0E01               	movlw	1
  2402  0012D8  0012               	return	
  2403  0012DA                     u1350:
  2404  0012DA  0E00               	movlw	0
  2405  0012DC  0012               	return	
  2406  0012DE                     __end_of_buttonPressedIndicator:
  2407                           	opt stack 0
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           prodh	equ	0xFF4
  2413                           prodl	equ	0xFF3
  2414                           intcon	equ	0xFF2
  2415                           intcon2	equ	0xFF1
  2416                           postinc0	equ	0xFEE
  2417                           wreg	equ	0xFE8
  2418                           postdec1	equ	0xFE5
  2419                           fsr1l	equ	0xFE1
  2420                           indf2	equ	0xFDF
  2421                           postinc2	equ	0xFDE
  2422                           fsr2h	equ	0xFDA
  2423                           fsr2l	equ	0xFD9
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _getKey *****************
  2427 ;; Defined at:
  2428 ;;		line 28 in file "Keypad4X4.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  KeypadStatus    2   23[COMRAM] PTR struct .
  2431 ;;		 -> main@currentKeypadStatus(2), buttonPressedIndicator@keypad_state(2), 
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;  buttonPresse    1   26[COMRAM] enum E3790
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      void 
  2436 ;; Registers used:
  2437 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2443 ;;      Params:         2       0       0       0       0       0       0       0       0
  2444 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2445 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2446 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2447 ;;Total ram usage:        4 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    2
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_buttonPressedIndicator
  2454 ;;		_main
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text16
  2459  000810                     __ptext16:
  2460                           	opt stack 0
  2461  000810                     _getKey:
  2462                           	opt stack 28
  2463                           
  2464                           ;Keypad4X4.c: 30: enum button buttonPressed;
  2465                           ;Keypad4X4.c: 32: LATB = 0xF7;
  2466                           
  2467                           ;incstack = 0
  2468  000810  0EF7               	movlw	247
  2469  000812  6E8A               	movwf	3978,c	;volatile
  2470                           
  2471                           ;Keypad4X4.c: 33: if ((PORTB & 0x80) == 0x00)
  2472  000814  BE81               	btfsc	3969,7,c	;volatile
  2473  000816  D016               	goto	l47
  2474                           
  2475                           ;Keypad4X4.c: 34: {
  2476                           ;Keypad4X4.c: 35: _delay((unsigned long)((5)*(4000000/4000.0)));
  2477  000818  0E07               	movlw	7
  2478  00081A  6E3A               	movwf	??_getKey& (0+255),c
  2479  00081C  0E7D               	movlw	125
  2480  00081E                     u1677:
  2481  00081E  2EE8               	decfsz	wreg,f,c
  2482  000820  D7FE               	bra	u1677
  2483  000822  2E3A               	decfsz	??_getKey& (0+255),f,c
  2484  000824  D7FC               	bra	u1677
  2485  000826  F000               	nop	
  2486                           
  2487                           ;Keypad4X4.c: 36: if ((PORTB & 0x80) == 0x00)
  2488  000828  BE81               	btfsc	3969,7,c	;volatile
  2489  00082A  D04A               	goto	l58
  2490                           
  2491                           ;Keypad4X4.c: 37: {
  2492                           ;Keypad4X4.c: 38: buttonPressed = button_1;
  2493  00082C  0E01               	movlw	1
  2494  00082E                     L3:
  2495  00082E  6E3B               	movwf	getKey@buttonPressed,c
  2496  000830  D017               	goto	l2193
  2497  000832                     l2183:
  2498                           
  2499                           ;Keypad4X4.c: 40: KeypadStatus->keyPressed = buttonPressed;
  2500  000832  EE20 F001          	lfsr	2,1
  2501  000836  5038               	movf	getKey@KeypadStatus,w,c
  2502  000838  26D9               	addwf	fsr2l,f,c
  2503  00083A  5039               	movf	getKey@KeypadStatus+1,w,c
  2504  00083C  22DA               	addwfc	fsr2h,f,c
  2505  00083E  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2506                           
  2507                           ;Keypad4X4.c: 41: return;
  2508  000842  0012               	return	
  2509  000844                     l47:
  2510                           
  2511                           ;Keypad4X4.c: 45: else if ((PORTB & 0x40) == 0x00)
  2512  000844  BC81               	btfsc	3969,6,c	;volatile
  2513  000846  D012               	goto	l51
  2514                           
  2515                           ;Keypad4X4.c: 46: {
  2516                           ;Keypad4X4.c: 47: _delay((unsigned long)((5)*(4000000/4000.0)));
  2517  000848  0E07               	movlw	7
  2518  00084A  6E3A               	movwf	??_getKey& (0+255),c
  2519  00084C  0E7D               	movlw	125
  2520  00084E                     u1687:
  2521  00084E  2EE8               	decfsz	wreg,f,c
  2522  000850  D7FE               	bra	u1687
  2523  000852  2E3A               	decfsz	??_getKey& (0+255),f,c
  2524  000854  D7FC               	bra	u1687
  2525  000856  F000               	nop	
  2526                           
  2527                           ;Keypad4X4.c: 48: if ((PORTB & 0x40) == 0x00)
  2528  000858  BC81               	btfsc	3969,6,c	;volatile
  2529  00085A  D032               	goto	l58
  2530                           
  2531                           ;Keypad4X4.c: 49: {
  2532                           ;Keypad4X4.c: 50: buttonPressed = button_4;
  2533  00085C  0E04               	movlw	4
  2534  00085E  D7E7               	goto	L3
  2535  000860                     l2193:
  2536                           
  2537                           ;Keypad4X4.c: 51: KeypadStatus->keyPressIndicator = 1;
  2538  000860  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2539  000864  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2540  000868  80DF               	bsf	indf2,0,c
  2541  00086A  D7E3               	goto	l2183
  2542  00086C                     l51:
  2543                           
  2544                           ;Keypad4X4.c: 57: else if ((PORTB & 0x20) == 0x00)
  2545  00086C  BA81               	btfsc	3969,5,c	;volatile
  2546  00086E  D00C               	goto	l54
  2547                           
  2548                           ;Keypad4X4.c: 58: {
  2549                           ;Keypad4X4.c: 59: _delay((unsigned long)((5)*(4000000/4000.0)));
  2550  000870  0E07               	movlw	7
  2551  000872  6E3A               	movwf	??_getKey& (0+255),c
  2552  000874  0E7D               	movlw	125
  2553  000876                     u1697:
  2554  000876  2EE8               	decfsz	wreg,f,c
  2555  000878  D7FE               	bra	u1697
  2556  00087A  2E3A               	decfsz	??_getKey& (0+255),f,c
  2557  00087C  D7FC               	bra	u1697
  2558  00087E  F000               	nop	
  2559                           
  2560                           ;Keypad4X4.c: 60: if ((PORTB & 0x20) == 0x00)
  2561  000880  BA81               	btfsc	3969,5,c	;volatile
  2562  000882  D01E               	goto	l58
  2563                           
  2564                           ;Keypad4X4.c: 61: {
  2565                           ;Keypad4X4.c: 62: buttonPressed = button_7;
  2566  000884  0E07               	movlw	7
  2567  000886  D7D3               	goto	L3
  2568  000888                     l54:
  2569                           
  2570                           ;Keypad4X4.c: 69: else if ((PORTB & 0x10) == 0x00)
  2571  000888  B881               	btfsc	3969,4,c	;volatile
  2572  00088A  D01A               	goto	l58
  2573                           
  2574                           ;Keypad4X4.c: 70: {
  2575                           ;Keypad4X4.c: 71: _delay((unsigned long)((5)*(4000000/4000.0)));
  2576  00088C  0E07               	movlw	7
  2577  00088E  6E3A               	movwf	??_getKey& (0+255),c
  2578  000890  0E7D               	movlw	125
  2579  000892                     u1707:
  2580  000892  2EE8               	decfsz	wreg,f,c
  2581  000894  D7FE               	bra	u1707
  2582  000896  2E3A               	decfsz	??_getKey& (0+255),f,c
  2583  000898  D7FC               	bra	u1707
  2584  00089A  F000               	nop	
  2585                           
  2586                           ;Keypad4X4.c: 72: if ((PORTB & 0x10) == 0x00)
  2587  00089C  B881               	btfsc	3969,4,c	;volatile
  2588  00089E  D010               	goto	l58
  2589                           
  2590                           ;Keypad4X4.c: 73: {
  2591                           ;Keypad4X4.c: 74: buttonPressed = SP_FUNC_ON;
  2592  0008A0  0E0D               	movlw	13
  2593  0008A2  6E3B               	movwf	getKey@buttonPressed,c
  2594                           
  2595                           ;Keypad4X4.c: 75: KeypadStatus->keyPressIndicator = 1;
  2596  0008A4  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2597  0008A8  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2598  0008AC  80DF               	bsf	indf2,0,c
  2599                           
  2600                           ;Keypad4X4.c: 76: KeypadStatus->keyPressed = buttonPressed;
  2601  0008AE  EE20 F001          	lfsr	2,1
  2602  0008B2  5038               	movf	getKey@KeypadStatus,w,c
  2603  0008B4  26D9               	addwf	fsr2l,f,c
  2604  0008B6  5039               	movf	getKey@KeypadStatus+1,w,c
  2605  0008B8  22DA               	addwfc	fsr2h,f,c
  2606  0008BA  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2607                           
  2608                           ;Keypad4X4.c: 77: return;
  2609  0008BE  0012               	return	
  2610  0008C0                     l58:
  2611                           
  2612                           ;Keypad4X4.c: 78: }
  2613                           ;Keypad4X4.c: 79: }
  2614                           ;Keypad4X4.c: 81: LATB = 0xFB;
  2615  0008C0  0EFB               	movlw	251
  2616  0008C2  6E8A               	movwf	3978,c	;volatile
  2617                           
  2618                           ;Keypad4X4.c: 82: if ((PORTB & 0x80) == 0x00)
  2619  0008C4  BE81               	btfsc	3969,7,c	;volatile
  2620  0008C6  D014               	goto	l59
  2621                           
  2622                           ;Keypad4X4.c: 83: {
  2623                           ;Keypad4X4.c: 84: _delay((unsigned long)((5)*(4000000/4000.0)));
  2624  0008C8  0E07               	movlw	7
  2625  0008CA  6E3A               	movwf	??_getKey& (0+255),c
  2626  0008CC  0E7D               	movlw	125
  2627  0008CE                     u1717:
  2628  0008CE  2EE8               	decfsz	wreg,f,c
  2629  0008D0  D7FE               	bra	u1717
  2630  0008D2  2E3A               	decfsz	??_getKey& (0+255),f,c
  2631  0008D4  D7FC               	bra	u1717
  2632  0008D6  F000               	nop	
  2633                           
  2634                           ;Keypad4X4.c: 85: buttonPressed = button_2;
  2635  0008D8  0E02               	movlw	2
  2636  0008DA                     L4:
  2637  0008DA  6E3B               	movwf	getKey@buttonPressed,c
  2638  0008DC  D015               	goto	l2243
  2639  0008DE                     l2233:
  2640                           
  2641                           ;Keypad4X4.c: 87: KeypadStatus->keyPressed = buttonPressed;
  2642  0008DE  EE20 F001          	lfsr	2,1
  2643  0008E2  5038               	movf	getKey@KeypadStatus,w,c
  2644  0008E4  26D9               	addwf	fsr2l,f,c
  2645  0008E6  5039               	movf	getKey@KeypadStatus+1,w,c
  2646  0008E8  22DA               	addwfc	fsr2h,f,c
  2647  0008EA  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2648                           
  2649                           ;Keypad4X4.c: 88: return;
  2650  0008EE  0012               	return	
  2651  0008F0                     l59:
  2652                           
  2653                           ;Keypad4X4.c: 91: else if ((PORTB & 0x40) == 0x00)
  2654  0008F0  BC81               	btfsc	3969,6,c	;volatile
  2655  0008F2  D010               	goto	l61
  2656                           
  2657                           ;Keypad4X4.c: 92: {
  2658                           ;Keypad4X4.c: 93: _delay((unsigned long)((5)*(4000000/4000.0)));
  2659  0008F4  0E07               	movlw	7
  2660  0008F6  6E3A               	movwf	??_getKey& (0+255),c
  2661  0008F8  0E7D               	movlw	125
  2662  0008FA                     u1727:
  2663  0008FA  2EE8               	decfsz	wreg,f,c
  2664  0008FC  D7FE               	bra	u1727
  2665  0008FE  2E3A               	decfsz	??_getKey& (0+255),f,c
  2666  000900  D7FC               	bra	u1727
  2667  000902  F000               	nop	
  2668                           
  2669                           ;Keypad4X4.c: 94: buttonPressed = button_5;
  2670  000904  0E05               	movlw	5
  2671  000906  D7E9               	goto	L4
  2672  000908                     l2243:
  2673                           
  2674                           ;Keypad4X4.c: 95: KeypadStatus->keyPressIndicator = 1;
  2675  000908  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2676  00090C  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2677  000910  80DF               	bsf	indf2,0,c
  2678  000912  D7E5               	goto	l2233
  2679  000914                     l61:
  2680                           
  2681                           ;Keypad4X4.c: 100: else if ((PORTB & 0x20) == 0x00)
  2682  000914  BA81               	btfsc	3969,5,c	;volatile
  2683  000916  D00A               	goto	l63
  2684                           
  2685                           ;Keypad4X4.c: 101: {
  2686                           ;Keypad4X4.c: 102: _delay((unsigned long)((5)*(4000000/4000.0)));
  2687  000918  0E07               	movlw	7
  2688  00091A  6E3A               	movwf	??_getKey& (0+255),c
  2689  00091C  0E7D               	movlw	125
  2690  00091E                     u1737:
  2691  00091E  2EE8               	decfsz	wreg,f,c
  2692  000920  D7FE               	bra	u1737
  2693  000922  2E3A               	decfsz	??_getKey& (0+255),f,c
  2694  000924  D7FC               	bra	u1737
  2695  000926  F000               	nop	
  2696                           
  2697                           ;Keypad4X4.c: 103: buttonPressed = button_8;
  2698  000928  0E08               	movlw	8
  2699  00092A  D7D7               	goto	L4
  2700  00092C                     l63:
  2701                           
  2702                           ;Keypad4X4.c: 109: else if ((PORTB & 0x10) == 0x00)
  2703  00092C  B881               	btfsc	3969,4,c	;volatile
  2704  00092E  D018               	goto	l65
  2705                           
  2706                           ;Keypad4X4.c: 110: {
  2707                           ;Keypad4X4.c: 111: _delay((unsigned long)((5)*(4000000/4000.0)));
  2708  000930  0E07               	movlw	7
  2709  000932  6E3A               	movwf	??_getKey& (0+255),c
  2710  000934  0E7D               	movlw	125
  2711  000936                     u1747:
  2712  000936  2EE8               	decfsz	wreg,f,c
  2713  000938  D7FE               	bra	u1747
  2714  00093A  2E3A               	decfsz	??_getKey& (0+255),f,c
  2715  00093C  D7FC               	bra	u1747
  2716  00093E  F000               	nop	
  2717                           
  2718                           ;Keypad4X4.c: 112: buttonPressed = button_0;
  2719  000940  0E00               	movlw	0
  2720  000942  6E3B               	movwf	getKey@buttonPressed,c
  2721                           
  2722                           ;Keypad4X4.c: 113: KeypadStatus->keyPressIndicator = 1;
  2723  000944  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2724  000948  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2725  00094C  80DF               	bsf	indf2,0,c
  2726                           
  2727                           ;Keypad4X4.c: 114: KeypadStatus->keyPressed = buttonPressed;
  2728  00094E  EE20 F001          	lfsr	2,1
  2729  000952  5038               	movf	getKey@KeypadStatus,w,c
  2730  000954  26D9               	addwf	fsr2l,f,c
  2731  000956  5039               	movf	getKey@KeypadStatus+1,w,c
  2732  000958  22DA               	addwfc	fsr2h,f,c
  2733  00095A  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2734                           
  2735                           ;Keypad4X4.c: 115: return;
  2736  00095E  0012               	return	
  2737  000960                     l65:
  2738                           
  2739                           ;Keypad4X4.c: 116: }
  2740                           ;Keypad4X4.c: 118: LATB = 0xFD;
  2741  000960  0EFD               	movlw	253
  2742  000962  6E8A               	movwf	3978,c	;volatile
  2743                           
  2744                           ;Keypad4X4.c: 119: if ((PORTB & 0x80) == 0x00)
  2745  000964  BE81               	btfsc	3969,7,c	;volatile
  2746  000966  D014               	goto	l66
  2747                           
  2748                           ;Keypad4X4.c: 120: {
  2749                           ;Keypad4X4.c: 121: _delay((unsigned long)((5)*(4000000/4000.0)));
  2750  000968  0E07               	movlw	7
  2751  00096A  6E3A               	movwf	??_getKey& (0+255),c
  2752  00096C  0E7D               	movlw	125
  2753  00096E                     u1757:
  2754  00096E  2EE8               	decfsz	wreg,f,c
  2755  000970  D7FE               	bra	u1757
  2756  000972  2E3A               	decfsz	??_getKey& (0+255),f,c
  2757  000974  D7FC               	bra	u1757
  2758  000976  F000               	nop	
  2759                           
  2760                           ;Keypad4X4.c: 122: buttonPressed = button_3;
  2761  000978  0E03               	movlw	3
  2762  00097A                     L5:
  2763  00097A  6E3B               	movwf	getKey@buttonPressed,c
  2764  00097C  D015               	goto	l2293
  2765  00097E                     l2283:
  2766                           
  2767                           ;Keypad4X4.c: 124: KeypadStatus->keyPressed = buttonPressed;
  2768  00097E  EE20 F001          	lfsr	2,1
  2769  000982  5038               	movf	getKey@KeypadStatus,w,c
  2770  000984  26D9               	addwf	fsr2l,f,c
  2771  000986  5039               	movf	getKey@KeypadStatus+1,w,c
  2772  000988  22DA               	addwfc	fsr2h,f,c
  2773  00098A  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2774                           
  2775                           ;Keypad4X4.c: 125: return;
  2776  00098E  0012               	return	
  2777  000990                     l66:
  2778                           
  2779                           ;Keypad4X4.c: 128: else if ((PORTB & 0x40) == 0x00)
  2780  000990  BC81               	btfsc	3969,6,c	;volatile
  2781  000992  D010               	goto	l68
  2782                           
  2783                           ;Keypad4X4.c: 129: {
  2784                           ;Keypad4X4.c: 130: _delay((unsigned long)((5)*(4000000/4000.0)));
  2785  000994  0E07               	movlw	7
  2786  000996  6E3A               	movwf	??_getKey& (0+255),c
  2787  000998  0E7D               	movlw	125
  2788  00099A                     u1767:
  2789  00099A  2EE8               	decfsz	wreg,f,c
  2790  00099C  D7FE               	bra	u1767
  2791  00099E  2E3A               	decfsz	??_getKey& (0+255),f,c
  2792  0009A0  D7FC               	bra	u1767
  2793  0009A2  F000               	nop	
  2794                           
  2795                           ;Keypad4X4.c: 131: buttonPressed = button_6;
  2796  0009A4  0E06               	movlw	6
  2797  0009A6  D7E9               	goto	L5
  2798  0009A8                     l2293:
  2799                           
  2800                           ;Keypad4X4.c: 132: KeypadStatus->keyPressIndicator = 1;
  2801  0009A8  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2802  0009AC  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2803  0009B0  80DF               	bsf	indf2,0,c
  2804  0009B2  D7E5               	goto	l2283
  2805  0009B4                     l68:
  2806                           
  2807                           ;Keypad4X4.c: 137: else if ((PORTB & 0x20) == 0x00)
  2808  0009B4  BA81               	btfsc	3969,5,c	;volatile
  2809  0009B6  D00A               	goto	l70
  2810                           
  2811                           ;Keypad4X4.c: 138: {
  2812                           ;Keypad4X4.c: 139: _delay((unsigned long)((5)*(4000000/4000.0)));
  2813  0009B8  0E07               	movlw	7
  2814  0009BA  6E3A               	movwf	??_getKey& (0+255),c
  2815  0009BC  0E7D               	movlw	125
  2816  0009BE                     u1777:
  2817  0009BE  2EE8               	decfsz	wreg,f,c
  2818  0009C0  D7FE               	bra	u1777
  2819  0009C2  2E3A               	decfsz	??_getKey& (0+255),f,c
  2820  0009C4  D7FC               	bra	u1777
  2821  0009C6  F000               	nop	
  2822                           
  2823                           ;Keypad4X4.c: 140: buttonPressed = button_9;
  2824  0009C8  0E09               	movlw	9
  2825  0009CA  D7D7               	goto	L5
  2826  0009CC                     l70:
  2827                           
  2828                           ;Keypad4X4.c: 146: else if ((PORTB & 0x10) == 0x00)
  2829  0009CC  B881               	btfsc	3969,4,c	;volatile
  2830  0009CE  D018               	goto	l72
  2831                           
  2832                           ;Keypad4X4.c: 147: {
  2833                           ;Keypad4X4.c: 148: _delay((unsigned long)((5)*(4000000/4000.0)));
  2834  0009D0  0E07               	movlw	7
  2835  0009D2  6E3A               	movwf	??_getKey& (0+255),c
  2836  0009D4  0E7D               	movlw	125
  2837  0009D6                     u1787:
  2838  0009D6  2EE8               	decfsz	wreg,f,c
  2839  0009D8  D7FE               	bra	u1787
  2840  0009DA  2E3A               	decfsz	??_getKey& (0+255),f,c
  2841  0009DC  D7FC               	bra	u1787
  2842  0009DE  F000               	nop	
  2843                           
  2844                           ;Keypad4X4.c: 149: buttonPressed = SP_FUNC_ENTER;
  2845  0009E0  0E0F               	movlw	15
  2846  0009E2  6E3B               	movwf	getKey@buttonPressed,c
  2847                           
  2848                           ;Keypad4X4.c: 150: KeypadStatus->keyPressIndicator = 1;
  2849  0009E4  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2850  0009E8  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2851  0009EC  80DF               	bsf	indf2,0,c
  2852                           
  2853                           ;Keypad4X4.c: 151: KeypadStatus->keyPressed = buttonPressed;
  2854  0009EE  EE20 F001          	lfsr	2,1
  2855  0009F2  5038               	movf	getKey@KeypadStatus,w,c
  2856  0009F4  26D9               	addwf	fsr2l,f,c
  2857  0009F6  5039               	movf	getKey@KeypadStatus+1,w,c
  2858  0009F8  22DA               	addwfc	fsr2h,f,c
  2859  0009FA  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2860                           
  2861                           ;Keypad4X4.c: 152: return;
  2862  0009FE  0012               	return	
  2863  000A00                     l72:
  2864                           
  2865                           ;Keypad4X4.c: 153: }
  2866                           ;Keypad4X4.c: 155: LATB = 0xFE;
  2867  000A00  0EFE               	movlw	254
  2868  000A02  6E8A               	movwf	3978,c	;volatile
  2869                           
  2870                           ;Keypad4X4.c: 156: if ((PORTB & 0x80) == 0x00)
  2871  000A04  BE81               	btfsc	3969,7,c	;volatile
  2872  000A06  D018               	goto	l73
  2873                           
  2874                           ;Keypad4X4.c: 157: {
  2875                           ;Keypad4X4.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
  2876  000A08  0E07               	movlw	7
  2877  000A0A  6E3A               	movwf	??_getKey& (0+255),c
  2878  000A0C  0E7D               	movlw	125
  2879  000A0E                     u1797:
  2880  000A0E  2EE8               	decfsz	wreg,f,c
  2881  000A10  D7FE               	bra	u1797
  2882  000A12  2E3A               	decfsz	??_getKey& (0+255),f,c
  2883  000A14  D7FC               	bra	u1797
  2884  000A16  F000               	nop	
  2885                           
  2886                           ;Keypad4X4.c: 159: buttonPressed = SP_FUNC_A;
  2887  000A18  0E0B               	movlw	11
  2888  000A1A  6E3B               	movwf	getKey@buttonPressed,c
  2889                           
  2890                           ;Keypad4X4.c: 160: KeypadStatus->keyPressIndicator = 1;
  2891  000A1C  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2892  000A20  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2893  000A24  80DF               	bsf	indf2,0,c
  2894                           
  2895                           ;Keypad4X4.c: 161: KeypadStatus->keyPressed = buttonPressed;
  2896  000A26  EE20 F001          	lfsr	2,1
  2897  000A2A  5038               	movf	getKey@KeypadStatus,w,c
  2898  000A2C  26D9               	addwf	fsr2l,f,c
  2899  000A2E  5039               	movf	getKey@KeypadStatus+1,w,c
  2900  000A30  22DA               	addwfc	fsr2h,f,c
  2901  000A32  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2902                           
  2903                           ;Keypad4X4.c: 163: }
  2904                           
  2905                           ;Keypad4X4.c: 162: return;
  2906  000A36  0012               	return	
  2907  000A38                     l73:
  2908                           
  2909                           ;Keypad4X4.c: 165: else if ((PORTB & 0x40) == 0x00)
  2910  000A38  BC81               	btfsc	3969,6,c	;volatile
  2911  000A3A  D018               	goto	l75
  2912                           
  2913                           ;Keypad4X4.c: 166: {
  2914                           ;Keypad4X4.c: 167: _delay((unsigned long)((5)*(4000000/4000.0)));
  2915  000A3C  0E07               	movlw	7
  2916  000A3E  6E3A               	movwf	??_getKey& (0+255),c
  2917  000A40  0E7D               	movlw	125
  2918  000A42                     u1807:
  2919  000A42  2EE8               	decfsz	wreg,f,c
  2920  000A44  D7FE               	bra	u1807
  2921  000A46  2E3A               	decfsz	??_getKey& (0+255),f,c
  2922  000A48  D7FC               	bra	u1807
  2923  000A4A  F000               	nop	
  2924                           
  2925                           ;Keypad4X4.c: 168: buttonPressed = SP_FUNC_B;
  2926  000A4C  0E0C               	movlw	12
  2927  000A4E  6E3B               	movwf	getKey@buttonPressed,c
  2928                           
  2929                           ;Keypad4X4.c: 169: KeypadStatus->keyPressIndicator = 1;
  2930  000A50  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2931  000A54  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2932  000A58  80DF               	bsf	indf2,0,c
  2933                           
  2934                           ;Keypad4X4.c: 170: KeypadStatus->keyPressed = buttonPressed;
  2935  000A5A  EE20 F001          	lfsr	2,1
  2936  000A5E  5038               	movf	getKey@KeypadStatus,w,c
  2937  000A60  26D9               	addwf	fsr2l,f,c
  2938  000A62  5039               	movf	getKey@KeypadStatus+1,w,c
  2939  000A64  22DA               	addwfc	fsr2h,f,c
  2940  000A66  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2941                           
  2942                           ;Keypad4X4.c: 172: }
  2943                           
  2944                           ;Keypad4X4.c: 171: return;
  2945  000A6A  0012               	return	
  2946  000A6C                     l75:
  2947                           
  2948                           ;Keypad4X4.c: 174: else if ((PORTB & 0x20) == 0x00)
  2949  000A6C  BA81               	btfsc	3969,5,c	;volatile
  2950  000A6E  D018               	goto	l77
  2951                           
  2952                           ;Keypad4X4.c: 175: {
  2953                           ;Keypad4X4.c: 176: _delay((unsigned long)((5)*(4000000/4000.0)));
  2954  000A70  0E07               	movlw	7
  2955  000A72  6E3A               	movwf	??_getKey& (0+255),c
  2956  000A74  0E7D               	movlw	125
  2957  000A76                     u1817:
  2958  000A76  2EE8               	decfsz	wreg,f,c
  2959  000A78  D7FE               	bra	u1817
  2960  000A7A  2E3A               	decfsz	??_getKey& (0+255),f,c
  2961  000A7C  D7FC               	bra	u1817
  2962  000A7E  F000               	nop	
  2963                           
  2964                           ;Keypad4X4.c: 177: buttonPressed = NO_KEY_TUNE;
  2965  000A80  0E0A               	movlw	10
  2966  000A82  6E3B               	movwf	getKey@buttonPressed,c
  2967                           
  2968                           ;Keypad4X4.c: 178: KeypadStatus->keyPressIndicator = 1;
  2969  000A84  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2970  000A88  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2971  000A8C  80DF               	bsf	indf2,0,c
  2972                           
  2973                           ;Keypad4X4.c: 179: KeypadStatus->keyPressed = buttonPressed;
  2974  000A8E  EE20 F001          	lfsr	2,1
  2975  000A92  5038               	movf	getKey@KeypadStatus,w,c
  2976  000A94  26D9               	addwf	fsr2l,f,c
  2977  000A96  5039               	movf	getKey@KeypadStatus+1,w,c
  2978  000A98  22DA               	addwfc	fsr2h,f,c
  2979  000A9A  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  2980                           
  2981                           ;Keypad4X4.c: 181: }
  2982                           
  2983                           ;Keypad4X4.c: 180: return;
  2984  000A9E  0012               	return	
  2985  000AA0                     l77:
  2986                           
  2987                           ;Keypad4X4.c: 183: else if ((PORTB & 0x10) == 0x00)
  2988  000AA0  B881               	btfsc	3969,4,c	;volatile
  2989  000AA2  D018               	goto	l79
  2990                           
  2991                           ;Keypad4X4.c: 184: {
  2992                           ;Keypad4X4.c: 185: _delay((unsigned long)((5)*(4000000/4000.0)));
  2993  000AA4  0E07               	movlw	7
  2994  000AA6  6E3A               	movwf	??_getKey& (0+255),c
  2995  000AA8  0E7D               	movlw	125
  2996  000AAA                     u1827:
  2997  000AAA  2EE8               	decfsz	wreg,f,c
  2998  000AAC  D7FE               	bra	u1827
  2999  000AAE  2E3A               	decfsz	??_getKey& (0+255),f,c
  3000  000AB0  D7FC               	bra	u1827
  3001  000AB2  F000               	nop	
  3002                           
  3003                           ;Keypad4X4.c: 186: buttonPressed = SP_FUNC_OFF;
  3004  000AB4  0E0E               	movlw	14
  3005  000AB6  6E3B               	movwf	getKey@buttonPressed,c
  3006                           
  3007                           ;Keypad4X4.c: 187: KeypadStatus->keyPressIndicator = 1;
  3008  000AB8  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  3009  000ABC  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  3010  000AC0  80DF               	bsf	indf2,0,c
  3011                           
  3012                           ;Keypad4X4.c: 188: KeypadStatus->keyPressed = buttonPressed;
  3013  000AC2  EE20 F001          	lfsr	2,1
  3014  000AC6  5038               	movf	getKey@KeypadStatus,w,c
  3015  000AC8  26D9               	addwf	fsr2l,f,c
  3016  000ACA  5039               	movf	getKey@KeypadStatus+1,w,c
  3017  000ACC  22DA               	addwfc	fsr2h,f,c
  3018  000ACE  C03B  FFDF         	movff	getKey@buttonPressed,indf2
  3019                           
  3020                           ;Keypad4X4.c: 190: }
  3021                           
  3022                           ;Keypad4X4.c: 189: return;
  3023  000AD2  0012               	return	
  3024  000AD4                     l79:
  3025                           
  3026                           ;Keypad4X4.c: 192: else {
  3027                           ;Keypad4X4.c: 193: KeypadStatus->keyPressIndicator = 0;
  3028  000AD4  C038  FFD9         	movff	getKey@KeypadStatus,fsr2l
  3029  000AD8  C039  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  3030  000ADC  90DF               	bcf	indf2,0,c
  3031                           
  3032                           ;Keypad4X4.c: 194: KeypadStatus->keyPressed = NONE;
  3033  000ADE  EE20 F001          	lfsr	2,1
  3034  000AE2  5038               	movf	getKey@KeypadStatus,w,c
  3035  000AE4  26D9               	addwf	fsr2l,f,c
  3036  000AE6  5039               	movf	getKey@KeypadStatus+1,w,c
  3037  000AE8  22DA               	addwfc	fsr2h,f,c
  3038  000AEA  0E10               	movlw	16
  3039  000AEC  6EDF               	movwf	indf2,c
  3040                           
  3041                           ;Keypad4X4.c: 195: return;
  3042  000AEE  0012               	return	
  3043  000AF0                     __end_of_getKey:
  3044                           	opt stack 0
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           intcon	equ	0xFF2
  3052                           intcon2	equ	0xFF1
  3053                           postinc0	equ	0xFEE
  3054                           wreg	equ	0xFE8
  3055                           postdec1	equ	0xFE5
  3056                           fsr1l	equ	0xFE1
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           fsr2h	equ	0xFDA
  3060                           fsr2l	equ	0xFD9
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function _beep_ok *****************
  3064 ;; Defined at:
  3065 ;;		line 303 in file "main.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0
  3080 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3081 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3082 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3083 ;;Total ram usage:        1 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    2
  3086 ;; This function calls:
  3087 ;;		Nothing
  3088 ;; This function is called by:
  3089 ;;		_main
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text17
  3094  0011D0                     __ptext17:
  3095                           	opt stack 0
  3096  0011D0                     _beep_ok:
  3097                           	opt stack 28
  3098                           
  3099                           ;main.c: 305: (LATAbits.LATA0 = 1);
  3100                           
  3101                           ;incstack = 0
  3102  0011D0  8089               	bsf	3977,0,c	;volatile
  3103                           
  3104                           ;main.c: 306: _delay((unsigned long)((10)*(8000000/4000.0)));
  3105  0011D2  0E1A               	movlw	26
  3106  0011D4  6E38               	movwf	??_beep_ok& (0+255),c
  3107  0011D6  0EF8               	movlw	248
  3108  0011D8                     u1837:
  3109  0011D8  2EE8               	decfsz	wreg,f,c
  3110  0011DA  D7FE               	bra	u1837
  3111  0011DC  2E38               	decfsz	??_beep_ok& (0+255),f,c
  3112  0011DE  D7FC               	bra	u1837
  3113  0011E0  D000               	nop2	
  3114                           
  3115                           ;main.c: 307: (LATAbits.LATA0 = 0);
  3116  0011E2  9089               	bcf	3977,0,c	;volatile
  3117                           
  3118                           ;main.c: 308: _delay((unsigned long)((5)*(8000000/4000.0)));
  3119  0011E4  0E0D               	movlw	13
  3120  0011E6  6E38               	movwf	??_beep_ok& (0+255),c
  3121  0011E8  0EFC               	movlw	252
  3122  0011EA                     u1847:
  3123  0011EA  2EE8               	decfsz	wreg,f,c
  3124  0011EC  D7FE               	bra	u1847
  3125  0011EE  2E38               	decfsz	??_beep_ok& (0+255),f,c
  3126  0011F0  D7FC               	bra	u1847
  3127                           
  3128                           ;main.c: 309: (LATAbits.LATA0 = 1);
  3129  0011F2  8089               	bsf	3977,0,c	;volatile
  3130                           
  3131                           ;main.c: 310: _delay((unsigned long)((10)*(8000000/4000.0)));
  3132  0011F4  0E1A               	movlw	26
  3133  0011F6  6E38               	movwf	??_beep_ok& (0+255),c
  3134  0011F8  0EF8               	movlw	248
  3135  0011FA                     u1857:
  3136  0011FA  2EE8               	decfsz	wreg,f,c
  3137  0011FC  D7FE               	bra	u1857
  3138  0011FE  2E38               	decfsz	??_beep_ok& (0+255),f,c
  3139  001200  D7FC               	bra	u1857
  3140  001202  D000               	nop2	
  3141                           
  3142                           ;main.c: 311: (LATAbits.LATA0 = 0);
  3143  001204  9089               	bcf	3977,0,c	;volatile
  3144  001206  0012               	return		;funcret
  3145  001208                     __end_of_beep_ok:
  3146                           	opt stack 0
  3147                           tblptru	equ	0xFF8
  3148                           tblptrh	equ	0xFF7
  3149                           tblptrl	equ	0xFF6
  3150                           tablat	equ	0xFF5
  3151                           prodh	equ	0xFF4
  3152                           prodl	equ	0xFF3
  3153                           intcon	equ	0xFF2
  3154                           intcon2	equ	0xFF1
  3155                           postinc0	equ	0xFEE
  3156                           wreg	equ	0xFE8
  3157                           postdec1	equ	0xFE5
  3158                           fsr1l	equ	0xFE1
  3159                           indf2	equ	0xFDF
  3160                           postinc2	equ	0xFDE
  3161                           fsr2h	equ	0xFDA
  3162                           fsr2l	equ	0xFD9
  3163                           status	equ	0xFD8
  3164                           
  3165 ;; *************** function _beep_long *****************
  3166 ;; Defined at:
  3167 ;;		line 296 in file "main.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;		None
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;		None
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3181 ;;      Params:         0       0       0       0       0       0       0       0       0
  3182 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3183 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3184 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3185 ;;Total ram usage:        2 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    2
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_main
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text18
  3196  0012A8                     __ptext18:
  3197                           	opt stack 0
  3198  0012A8                     _beep_long:
  3199                           	opt stack 28
  3200                           
  3201                           ;main.c: 298: (LATAbits.LATA0 = 1);
  3202                           
  3203                           ;incstack = 0
  3204  0012A8  8089               	bsf	3977,0,c	;volatile
  3205                           
  3206                           ;main.c: 299: _delay((unsigned long)((100)*(8000000/4000.0)));
  3207  0012AA  0E02               	movlw	2
  3208  0012AC  6E39               	movwf	(??_beep_long+1)& (0+255),c
  3209  0012AE  0E04               	movlw	4
  3210  0012B0  6E38               	movwf	??_beep_long& (0+255),c
  3211  0012B2  0EBA               	movlw	186
  3212  0012B4                     u1867:
  3213  0012B4  2EE8               	decfsz	wreg,f,c
  3214  0012B6  D7FE               	bra	u1867
  3215  0012B8  2E38               	decfsz	??_beep_long& (0+255),f,c
  3216  0012BA  D7FC               	bra	u1867
  3217  0012BC  2E39               	decfsz	(??_beep_long+1)& (0+255),f,c
  3218  0012BE  D7FA               	bra	u1867
  3219  0012C0  D000               	nop2	
  3220                           
  3221                           ;main.c: 300: (LATAbits.LATA0 = 0);
  3222  0012C2  9089               	bcf	3977,0,c	;volatile
  3223  0012C4  0012               	return		;funcret
  3224  0012C6                     __end_of_beep_long:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           intcon2	equ	0xFF1
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           postdec1	equ	0xFE5
  3237                           fsr1l	equ	0xFE1
  3238                           indf2	equ	0xFDF
  3239                           postinc2	equ	0xFDE
  3240                           fsr2h	equ	0xFDA
  3241                           fsr2l	equ	0xFD9
  3242                           status	equ	0xFD8
  3243                           
  3244 ;; *************** function _beep_error *****************
  3245 ;; Defined at:
  3246 ;;		line 314 in file "main.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3260 ;;      Params:         0       0       0       0       0       0       0       0       0
  3261 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3262 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3263 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3264 ;;Total ram usage:        2 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:    2
  3267 ;; This function calls:
  3268 ;;		Nothing
  3269 ;; This function is called by:
  3270 ;;		_main
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text19
  3275  001084                     __ptext19:
  3276                           	opt stack 0
  3277  001084                     _beep_error:
  3278                           	opt stack 28
  3279                           
  3280                           ;main.c: 316: (LATAbits.LATA0 = 1);
  3281                           
  3282                           ;incstack = 0
  3283  001084  8089               	bsf	3977,0,c	;volatile
  3284                           
  3285                           ;main.c: 317: _delay((unsigned long)((100)*(8000000/4000.0)));
  3286  001086  0E02               	movlw	2
  3287  001088  6E39               	movwf	(??_beep_error+1)& (0+255),c
  3288  00108A  0E04               	movlw	4
  3289  00108C  6E38               	movwf	??_beep_error& (0+255),c
  3290  00108E  0EBA               	movlw	186
  3291  001090                     u1877:
  3292  001090  2EE8               	decfsz	wreg,f,c
  3293  001092  D7FE               	bra	u1877
  3294  001094  2E38               	decfsz	??_beep_error& (0+255),f,c
  3295  001096  D7FC               	bra	u1877
  3296  001098  2E39               	decfsz	(??_beep_error+1)& (0+255),f,c
  3297  00109A  D7FA               	bra	u1877
  3298  00109C  D000               	nop2	
  3299                           
  3300                           ;main.c: 318: (LATAbits.LATA0 = 0);
  3301  00109E  9089               	bcf	3977,0,c	;volatile
  3302                           
  3303                           ;main.c: 319: _delay((unsigned long)((10)*(8000000/4000.0)));
  3304  0010A0  0E1A               	movlw	26
  3305  0010A2  6E38               	movwf	??_beep_error& (0+255),c
  3306  0010A4  0EF8               	movlw	248
  3307  0010A6                     u1887:
  3308  0010A6  2EE8               	decfsz	wreg,f,c
  3309  0010A8  D7FE               	bra	u1887
  3310  0010AA  2E38               	decfsz	??_beep_error& (0+255),f,c
  3311  0010AC  D7FC               	bra	u1887
  3312  0010AE  D000               	nop2	
  3313                           
  3314                           ;main.c: 320: (LATAbits.LATA0 = 1);
  3315  0010B0  8089               	bsf	3977,0,c	;volatile
  3316                           
  3317                           ;main.c: 321: _delay((unsigned long)((10)*(8000000/4000.0)));
  3318  0010B2  0E1A               	movlw	26
  3319  0010B4  6E38               	movwf	??_beep_error& (0+255),c
  3320  0010B6  0EF8               	movlw	248
  3321  0010B8                     u1897:
  3322  0010B8  2EE8               	decfsz	wreg,f,c
  3323  0010BA  D7FE               	bra	u1897
  3324  0010BC  2E38               	decfsz	??_beep_error& (0+255),f,c
  3325  0010BE  D7FC               	bra	u1897
  3326  0010C0  D000               	nop2	
  3327                           
  3328                           ;main.c: 322: (LATAbits.LATA0 = 0);
  3329  0010C2  9089               	bcf	3977,0,c	;volatile
  3330                           
  3331                           ;main.c: 323: _delay((unsigned long)((10)*(8000000/4000.0)));
  3332  0010C4  0E1A               	movlw	26
  3333  0010C6  6E38               	movwf	??_beep_error& (0+255),c
  3334  0010C8  0EF8               	movlw	248
  3335  0010CA                     u1907:
  3336  0010CA  2EE8               	decfsz	wreg,f,c
  3337  0010CC  D7FE               	bra	u1907
  3338  0010CE  2E38               	decfsz	??_beep_error& (0+255),f,c
  3339  0010D0  D7FC               	bra	u1907
  3340  0010D2  D000               	nop2	
  3341                           
  3342                           ;main.c: 324: (LATAbits.LATA0 = 1);
  3343  0010D4  8089               	bsf	3977,0,c	;volatile
  3344                           
  3345                           ;main.c: 325: _delay((unsigned long)((10)*(8000000/4000.0)));
  3346  0010D6  0E1A               	movlw	26
  3347  0010D8  6E38               	movwf	??_beep_error& (0+255),c
  3348  0010DA  0EF8               	movlw	248
  3349  0010DC                     u1917:
  3350  0010DC  2EE8               	decfsz	wreg,f,c
  3351  0010DE  D7FE               	bra	u1917
  3352  0010E0  2E38               	decfsz	??_beep_error& (0+255),f,c
  3353  0010E2  D7FC               	bra	u1917
  3354  0010E4  D000               	nop2	
  3355                           
  3356                           ;main.c: 326: (LATAbits.LATA0 = 0);
  3357  0010E6  9089               	bcf	3977,0,c	;volatile
  3358  0010E8  0012               	return		;funcret
  3359  0010EA                     __end_of_beep_error:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           intcon	equ	0xFF2
  3368                           intcon2	equ	0xFF1
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           postdec1	equ	0xFE5
  3372                           fsr1l	equ	0xFE1
  3373                           indf2	equ	0xFDF
  3374                           postinc2	equ	0xFDE
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function _beep *****************
  3380 ;; Defined at:
  3381 ;;		line 289 in file "main.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3395 ;;      Params:         0       0       0       0       0       0       0       0       0
  3396 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3397 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3398 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3399 ;;Total ram usage:        1 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    2
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_main
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text20
  3410  0012DE                     __ptext20:
  3411                           	opt stack 0
  3412  0012DE                     _beep:
  3413                           	opt stack 28
  3414                           
  3415                           ;main.c: 291: (LATAbits.LATA0 = 1);
  3416                           
  3417                           ;incstack = 0
  3418  0012DE  8089               	bsf	3977,0,c	;volatile
  3419                           
  3420                           ;main.c: 292: _delay((unsigned long)((10)*(8000000/4000.0)));
  3421  0012E0  0E1A               	movlw	26
  3422  0012E2  6E38               	movwf	??_beep& (0+255),c
  3423  0012E4  0EF8               	movlw	248
  3424  0012E6                     u1927:
  3425  0012E6  2EE8               	decfsz	wreg,f,c
  3426  0012E8  D7FE               	bra	u1927
  3427  0012EA  2E38               	decfsz	??_beep& (0+255),f,c
  3428  0012EC  D7FC               	bra	u1927
  3429  0012EE  D000               	nop2	
  3430                           
  3431                           ;main.c: 293: (LATAbits.LATA0 = 0);
  3432  0012F0  9089               	bcf	3977,0,c	;volatile
  3433  0012F2  0012               	return		;funcret
  3434  0012F4                     __end_of_beep:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           prodh	equ	0xFF4
  3441                           prodl	equ	0xFF3
  3442                           intcon	equ	0xFF2
  3443                           intcon2	equ	0xFF1
  3444                           postinc0	equ	0xFEE
  3445                           wreg	equ	0xFE8
  3446                           postdec1	equ	0xFE5
  3447                           fsr1l	equ	0xFE1
  3448                           indf2	equ	0xFDF
  3449                           postinc2	equ	0xFDE
  3450                           fsr2h	equ	0xFDA
  3451                           fsr2l	equ	0xFD9
  3452                           status	equ	0xFD8
  3453                           
  3454 ;; *************** function _arr_to_num *****************
  3455 ;; Defined at:
  3456 ;;		line 110 in file "main.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  arr             2   23[COMRAM] PTR unsigned char 
  3459 ;;		 -> main@keypressArray(10), 
  3460 ;;  num_of_eleme    1   25[COMRAM] unsigned char 
  3461 ;;  number          2   26[COMRAM] PTR unsigned char 
  3462 ;;		 -> main@locker_num(1), 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  a               1   29[COMRAM] unsigned char 
  3465 ;;  validity        1   30[COMRAM] unsigned char 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      unsigned char 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3475 ;;      Params:         5       0       0       0       0       0       0       0       0
  3476 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3477 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3478 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3479 ;;Total ram usage:        8 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    2
  3482 ;; This function calls:
  3483 ;;		Nothing
  3484 ;; This function is called by:
  3485 ;;		_main
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text21
  3490  000F5C                     __ptext21:
  3491                           	opt stack 0
  3492  000F5C                     _arr_to_num:
  3493                           	opt stack 28
  3494                           
  3495                           ;main.c: 112: unsigned char validity = 0;
  3496                           
  3497                           ;incstack = 0
  3498  000F5C  0E00               	movlw	0
  3499  000F5E  6E3F               	movwf	arr_to_num@validity,c
  3500                           
  3501                           ;main.c: 113: *number = 0;
  3502  000F60  C03B  FFD9         	movff	arr_to_num@number,fsr2l
  3503  000F64  C03C  FFDA         	movff	arr_to_num@number+1,fsr2h
  3504  000F68  0E00               	movlw	0
  3505  000F6A  6EDF               	movwf	indf2,c
  3506                           
  3507                           ;main.c: 115: if(num_of_elements > 3)
  3508  000F6C  0E03               	movlw	3
  3509  000F6E  643A               	cpfsgt	arr_to_num@num_of_elements,c
  3510  000F70  D002               	goto	l285
  3511                           
  3512                           ;main.c: 116: return validity;
  3513  000F72  503F               	movf	arr_to_num@validity,w,c
  3514  000F74  0012               	return	
  3515  000F76                     l285:
  3516                           
  3517                           ;main.c: 118: if((num_of_elements == 3) && (arr[0] == 2) && (arr[1] == 5) && (arr[2] == 
      +                          6))
  3518  000F76  0E03               	movlw	3
  3519  000F78  183A               	xorwf	arr_to_num@num_of_elements,w,c
  3520  000F7A  A4D8               	btfss	status,2,c
  3521  000F7C  D01E               	goto	l287
  3522  000F7E  C038  FFD9         	movff	arr_to_num@arr,fsr2l
  3523  000F82  C039  FFDA         	movff	arr_to_num@arr+1,fsr2h
  3524  000F86  0E02               	movlw	2
  3525  000F88  18DE               	xorwf	postinc2,w,c
  3526  000F8A  A4D8               	btfss	status,2,c
  3527  000F8C  D016               	goto	l287
  3528  000F8E  EE20 F001          	lfsr	2,1
  3529  000F92  5038               	movf	arr_to_num@arr,w,c
  3530  000F94  26D9               	addwf	fsr2l,f,c
  3531  000F96  5039               	movf	arr_to_num@arr+1,w,c
  3532  000F98  22DA               	addwfc	fsr2h,f,c
  3533  000F9A  0E05               	movlw	5
  3534  000F9C  18DE               	xorwf	postinc2,w,c
  3535  000F9E  A4D8               	btfss	status,2,c
  3536  000FA0  D00C               	goto	l287
  3537  000FA2  EE20 F002          	lfsr	2,2
  3538  000FA6  5038               	movf	arr_to_num@arr,w,c
  3539  000FA8  26D9               	addwf	fsr2l,f,c
  3540  000FAA  5039               	movf	arr_to_num@arr+1,w,c
  3541  000FAC  22DA               	addwfc	fsr2h,f,c
  3542  000FAE  0E06               	movlw	6
  3543  000FB0  18DE               	xorwf	postinc2,w,c
  3544  000FB2  A4D8               	btfss	status,2,c
  3545  000FB4  D002               	goto	l287
  3546                           
  3547                           ;main.c: 119: return validity;
  3548  000FB6  503F               	movf	arr_to_num@validity,w,c
  3549  000FB8  0012               	return	
  3550  000FBA                     l287:
  3551                           
  3552                           ;main.c: 120: for(unsigned char a = 0; a < num_of_elements; a++)
  3553  000FBA  0E00               	movlw	0
  3554  000FBC  6E3E               	movwf	arr_to_num@a,c
  3555  000FBE  D018               	goto	l288
  3556  000FC0                     
  3557                           ;main.c: 121: {
  3558                           ;main.c: 122: *number = (*number * 10) + arr[a];
  3559  000FC0  503E               	movf	arr_to_num@a,w,c
  3560  000FC2  0D01               	mullw	1
  3561  000FC4  50F3               	movf	prodl,w,c
  3562  000FC6  2438               	addwf	arr_to_num@arr,w,c
  3563  000FC8  6ED9               	movwf	fsr2l,c
  3564  000FCA  50F4               	movf	prodh,w,c
  3565  000FCC  2039               	addwfc	arr_to_num@arr+1,w,c
  3566  000FCE  6EDA               	movwf	fsr2h,c
  3567  000FD0  50DF               	movf	indf2,w,c
  3568  000FD2  6E3D               	movwf	??_arr_to_num& (0+255),c
  3569  000FD4  C03B  FFD9         	movff	arr_to_num@number,fsr2l
  3570  000FD8  C03C  FFDA         	movff	arr_to_num@number+1,fsr2h
  3571  000FDC  50DF               	movf	indf2,w,c
  3572  000FDE  0D0A               	mullw	10
  3573  000FE0  50F3               	movf	prodl,w,c
  3574  000FE2  243D               	addwf	??_arr_to_num,w,c
  3575  000FE4  C03B  FFD9         	movff	arr_to_num@number,fsr2l
  3576  000FE8  C03C  FFDA         	movff	arr_to_num@number+1,fsr2h
  3577  000FEC  6EDF               	movwf	indf2,c
  3578  000FEE  2A3E               	incf	arr_to_num@a,f,c
  3579  000FF0                     l288:
  3580  000FF0  503A               	movf	arr_to_num@num_of_elements,w,c
  3581  000FF2  5C3E               	subwf	arr_to_num@a,w,c
  3582  000FF4  A0D8               	btfss	status,0,c
  3583  000FF6  D7E4               	goto	l289
  3584                           
  3585                           ;main.c: 123: }
  3586                           ;main.c: 124: validity = 1;
  3587  000FF8  0E01               	movlw	1
  3588  000FFA  6E3F               	movwf	arr_to_num@validity,c
  3589                           
  3590                           ;main.c: 125: return validity;
  3591  000FFC  503F               	movf	arr_to_num@validity,w,c
  3592  000FFE  0012               	return	
  3593  001000                     __end_of_arr_to_num:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           intcon2	equ	0xFF1
  3603                           postinc0	equ	0xFEE
  3604                           wreg	equ	0xFE8
  3605                           postdec1	equ	0xFE5
  3606                           fsr1l	equ	0xFE1
  3607                           indf2	equ	0xFDF
  3608                           postinc2	equ	0xFDE
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _ISR *****************
  3614 ;; Defined at:
  3615 ;;		line 151 in file "main.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  i               1   22[COMRAM] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3629 ;;      Params:         0       0       0       0       0       0       0       0       0
  3630 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3631 ;;      Temps:         20       0       0       0       0       0       0       0       0
  3632 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3633 ;;Total ram usage:       21 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    1
  3636 ;; This function calls:
  3637 ;;		_close_lock
  3638 ;;		i2_beep_error
  3639 ;; This function is called by:
  3640 ;;		Interrupt level 2
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	intcode
  3645  000008                     __pintcode:
  3646                           	opt stack 0
  3647  000008                     _ISR:
  3648                           	opt stack 27
  3649                           
  3650                           ;incstack = 0
  3651  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3652  00000A  ED58  F006         	call	int_func,f	;refresh shadow registers
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           prodh	equ	0xFF4
  3658                           prodl	equ	0xFF3
  3659                           intcon	equ	0xFF2
  3660                           intcon2	equ	0xFF1
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1l	equ	0xFE1
  3665                           indf2	equ	0xFDF
  3666                           postinc2	equ	0xFDE
  3667                           fsr2h	equ	0xFDA
  3668                           fsr2l	equ	0xFD9
  3669                           status	equ	0xFD8
  3670                           
  3671                           	psect	intcode_body
  3672  000CB0                     __pintcode_body:
  3673                           	opt stack 27
  3674  000CB0                     int_func:
  3675                           	opt stack 27
  3676  000CB0  0006               	pop		; remove dummy address from shadow register refresh
  3677  000CB2  CFFA F025          	movff	pclath,??_ISR+2
  3678  000CB6  CFFB F026          	movff	pclatu,??_ISR+3
  3679  000CBA  CFE9 F027          	movff	fsr0l,??_ISR+4
  3680  000CBE  CFEA F028          	movff	fsr0h,??_ISR+5
  3681  000CC2  CFE1 F029          	movff	fsr1l,??_ISR+6
  3682  000CC6  CFE2 F02A          	movff	fsr1h,??_ISR+7
  3683  000CCA  CFD9 F02B          	movff	fsr2l,??_ISR+8
  3684  000CCE  CFDA F02C          	movff	fsr2h,??_ISR+9
  3685  000CD2  CFF3 F02D          	movff	prodl,??_ISR+10
  3686  000CD6  CFF4 F02E          	movff	prodh,??_ISR+11
  3687  000CDA  CFF6 F02F          	movff	tblptrl,??_ISR+12
  3688  000CDE  CFF7 F030          	movff	tblptrh,??_ISR+13
  3689  000CE2  CFF8 F031          	movff	tblptru,??_ISR+14
  3690  000CE6  CFF5 F032          	movff	tablat,??_ISR+15
  3691  000CEA  C046  F033         	movff	btemp,??_ISR+16
  3692  000CEE  C047  F034         	movff	btemp+1,??_ISR+17
  3693  000CF2  C048  F035         	movff	btemp+2,??_ISR+18
  3694  000CF6  C049  F036         	movff	btemp+3,??_ISR+19
  3695                           
  3696                           ;main.c: 153: if(RBIF)
  3697  000CFA  A0F2               	btfss	intcon,0,c	;volatile
  3698  000CFC  D008               	goto	i2l308
  3699                           
  3700                           ;main.c: 154: {
  3701                           ;main.c: 155: RBIF = 0;
  3702  000CFE  90F2               	bcf	intcon,0,c	;volatile
  3703                           
  3704                           ;main.c: 156: ((volatile _io_reg*)&systemStateReg)->bit7 = 0;
  3705  000D00  9E20               	bcf	_systemStateReg,7,c	;volatile
  3706                           
  3707                           ;main.c: 158: timer1OVFcount = 0;
  3708  000D02  0E00               	movlw	0
  3709  000D04  6E1D               	movwf	_timer1OVFcount,c	;volatile
  3710                           
  3711                           ;main.c: 159: T1CONbits.TMR1ON = 1;
  3712  000D06  80CD               	bsf	4045,0,c	;volatile
  3713                           
  3714                           ;main.c: 161: if(PORTB)
  3715  000D08  5081               	movf	3969,w,c	;volatile
  3716  000D0A  A4D8               	btfss	status,2,c
  3717                           
  3718                           ;main.c: 162: __nop();
  3719  000D0C  F000               	nop	
  3720  000D0E                     i2l308:
  3721                           
  3722                           ;main.c: 163: }
  3723                           ;main.c: 164: if(PIR1bits.TMR1IF)
  3724  000D0E  A09E               	btfss	3998,0,c	;volatile
  3725  000D10  D00D               	goto	i2l309
  3726                           
  3727                           ;main.c: 165: {
  3728                           ;main.c: 166: timer1OVFcount++;
  3729  000D12  2A1D               	incf	_timer1OVFcount,f,c	;volatile
  3730                           
  3731                           ;main.c: 167: TMR1 = 0;
  3732  000D14  0E00               	movlw	0
  3733  000D16  6ECF               	movwf	4047,c	;volatile
  3734  000D18  0E00               	movlw	0
  3735  000D1A  6ECE               	movwf	4046,c	;volatile
  3736                           
  3737                           ;main.c: 168: if(timer1OVFcount == 10)
  3738  000D1C  0E0A               	movlw	10
  3739  000D1E  181D               	xorwf	_timer1OVFcount,w,c	;volatile
  3740  000D20  A4D8               	btfss	status,2,c
  3741  000D22  D003               	goto	i2l310
  3742                           
  3743                           ;main.c: 169: {
  3744                           ;main.c: 170: ((volatile _io_reg*)&systemStateReg)->bit7 = 1;
  3745  000D24  8E20               	bsf	_systemStateReg,7,c	;volatile
  3746                           
  3747                           ;main.c: 171: T1CONbits.TMR1ON = 0;
  3748  000D26  90CD               	bcf	4045,0,c	;volatile
  3749                           
  3750                           ;main.c: 172: ((volatile _io_reg*)&systemStateReg)->bit5 = 1;
  3751  000D28  8A20               	bsf	_systemStateReg,5,c	;volatile
  3752  000D2A                     i2l310:
  3753                           
  3754                           ;main.c: 174: }
  3755                           ;main.c: 175: PIR1bits.TMR1IF = 0;
  3756  000D2A  909E               	bcf	3998,0,c	;volatile
  3757  000D2C                     i2l309:
  3758                           
  3759                           ;main.c: 176: }
  3760                           ;main.c: 177: if(INTCONbits.TMR0IF)
  3761  000D2C  A4F2               	btfss	intcon,2,c	;volatile
  3762  000D2E  D02A               	goto	i2u44_40
  3763                           
  3764                           ;main.c: 178: {
  3765                           ;main.c: 179: INTCONbits.TMR0IF = 0;
  3766  000D30  94F2               	bcf	intcon,2,c	;volatile
  3767                           
  3768                           ;main.c: 180: beep_error();
  3769  000D32  EC75  F008         	call	i2_beep_error	;wreg free
  3770                           
  3771                           ;main.c: 181: TMR0 = 0;
  3772  000D36  0E00               	movlw	0
  3773  000D38  6ED7               	movwf	4055,c	;volatile
  3774  000D3A  0E00               	movlw	0
  3775  000D3C  6ED6               	movwf	4054,c	;volatile
  3776                           
  3777                           ;main.c: 182: close_lock(open_lock_arr[0]);
  3778  000D3E  5001               	movf	_open_lock_arr,w,c
  3779  000D40  EC4B  F007         	call	_close_lock
  3780                           
  3781                           ;main.c: 183: num_of_doors_open--;
  3782  000D44  0615               	decf	_num_of_doors_open,f,c
  3783                           
  3784                           ;main.c: 185: for(unsigned char i = 0; i < num_of_doors_open; i++)
  3785  000D46  0E00               	movlw	0
  3786  000D48  6E37               	movwf	ISR@i,c
  3787  000D4A  D018               	goto	i2l312
  3788  000D4C                     
  3789                           ;main.c: 186: open_lock_arr[i] = open_lock_arr[i+1];
  3790  000D4C  5037               	movf	ISR@i,w,c
  3791  000D4E  6E23               	movwf	??_ISR& (0+255),c
  3792  000D50  6A24               	clrf	(??_ISR+1)& (0+255),c
  3793  000D52  0E01               	movlw	1
  3794  000D54  2623               	addwf	??_ISR,f,c
  3795  000D56  0E00               	movlw	0
  3796  000D58  2224               	addwfc	??_ISR+1,f,c
  3797  000D5A  0E01               	movlw	low _open_lock_arr
  3798  000D5C  2423               	addwf	??_ISR,w,c
  3799  000D5E  6ED9               	movwf	fsr2l,c
  3800  000D60  0E00               	movlw	high _open_lock_arr
  3801  000D62  2024               	addwfc	??_ISR+1,w,c
  3802  000D64  6EDA               	movwf	fsr2h,c
  3803  000D66  5037               	movf	ISR@i,w,c
  3804  000D68  0D01               	mullw	1
  3805  000D6A  0E01               	movlw	low _open_lock_arr
  3806  000D6C  24F3               	addwf	prodl,w,c
  3807  000D6E  6EE1               	movwf	fsr1l,c
  3808  000D70  0E00               	movlw	high _open_lock_arr
  3809  000D72  20F4               	addwfc	prodh,w,c
  3810  000D74  6EE2               	movwf	fsr1h,c
  3811  000D76  CFDF FFE7          	movff	indf2,indf1
  3812  000D7A  2A37               	incf	ISR@i,f,c
  3813  000D7C                     i2l312:
  3814  000D7C  5015               	movf	_num_of_doors_open,w,c
  3815  000D7E  5C37               	subwf	ISR@i,w,c
  3816  000D80  A0D8               	btfss	status,0,c
  3817  000D82  D7E4               	goto	i2l313
  3818  000D84                     i2u44_40:
  3819  000D84  C036  F049         	movff	??_ISR+19,btemp+3
  3820  000D88  C035  F048         	movff	??_ISR+18,btemp+2
  3821  000D8C  C034  F047         	movff	??_ISR+17,btemp+1
  3822  000D90  C033  F046         	movff	??_ISR+16,btemp
  3823  000D94  C032  FFF5         	movff	??_ISR+15,tablat
  3824  000D98  C031  FFF8         	movff	??_ISR+14,tblptru
  3825  000D9C  C030  FFF7         	movff	??_ISR+13,tblptrh
  3826  000DA0  C02F  FFF6         	movff	??_ISR+12,tblptrl
  3827  000DA4  C02E  FFF4         	movff	??_ISR+11,prodh
  3828  000DA8  C02D  FFF3         	movff	??_ISR+10,prodl
  3829  000DAC  C02C  FFDA         	movff	??_ISR+9,fsr2h
  3830  000DB0  C02B  FFD9         	movff	??_ISR+8,fsr2l
  3831  000DB4  C02A  FFE2         	movff	??_ISR+7,fsr1h
  3832  000DB8  C029  FFE1         	movff	??_ISR+6,fsr1l
  3833  000DBC  C028  FFEA         	movff	??_ISR+5,fsr0h
  3834  000DC0  C027  FFE9         	movff	??_ISR+4,fsr0l
  3835  000DC4  C026  FFFB         	movff	??_ISR+3,pclatu
  3836  000DC8  C025  FFFA         	movff	??_ISR+2,pclath
  3837  000DCC  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3838  000DCE  0011               	retfie		f
  3839  000DD0                     __end_of_ISR:
  3840                           	opt stack 0
  3841                           pclatu	equ	0xFFB
  3842                           pclath	equ	0xFFA
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           intcon	equ	0xFF2
  3850                           intcon2	equ	0xFF1
  3851                           postinc0	equ	0xFEE
  3852                           fsr0h	equ	0xFEA
  3853                           fsr0l	equ	0xFE9
  3854                           wreg	equ	0xFE8
  3855                           indf1	equ	0xFE7
  3856                           postdec1	equ	0xFE5
  3857                           fsr1h	equ	0xFE2
  3858                           fsr1l	equ	0xFE1
  3859                           indf2	equ	0xFDF
  3860                           postinc2	equ	0xFDE
  3861                           fsr2h	equ	0xFDA
  3862                           fsr2l	equ	0xFD9
  3863                           status	equ	0xFD8
  3864                           
  3865 ;; *************** function i2_beep_error *****************
  3866 ;; Defined at:
  3867 ;;		line 314 in file "main.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;		None
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;		None
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      void 
  3874 ;; Registers used:
  3875 ;;		wreg
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3881 ;;      Params:         0       0       0       0       0       0       0       0       0
  3882 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3883 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3884 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3885 ;;Total ram usage:        2 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; This function calls:
  3888 ;;		Nothing
  3889 ;; This function is called by:
  3890 ;;		_ISR
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           	psect	text23
  3895  0010EA                     __ptext23:
  3896                           	opt stack 0
  3897  0010EA                     i2_beep_error:
  3898                           	opt stack 27
  3899                           
  3900                           ;main.c: 316: (LATAbits.LATA0 = 1);
  3901                           
  3902                           ;incstack = 0
  3903  0010EA  8089               	bsf	3977,0,c	;volatile
  3904                           
  3905                           ;main.c: 317: _delay((unsigned long)((100)*(8000000/4000.0)));
  3906  0010EC  0E02               	movlw	2
  3907  0010EE  6E22               	movwf	(??i2_beep_error+1)& (0+255),c
  3908  0010F0  0E04               	movlw	4
  3909  0010F2  6E21               	movwf	??i2_beep_error& (0+255),c
  3910  0010F4  0EBA               	movlw	186
  3911  0010F6                     i2u193_47:
  3912  0010F6  2EE8               	decfsz	wreg,f,c
  3913  0010F8  D7FE               	bra	i2u193_47
  3914  0010FA  2E21               	decfsz	??i2_beep_error& (0+255),f,c
  3915  0010FC  D7FC               	bra	i2u193_47
  3916  0010FE  2E22               	decfsz	(??i2_beep_error+1)& (0+255),f,c
  3917  001100  D7FA               	bra	i2u193_47
  3918  001102  D000               	nop2	
  3919                           
  3920                           ;main.c: 318: (LATAbits.LATA0 = 0);
  3921  001104  9089               	bcf	3977,0,c	;volatile
  3922                           
  3923                           ;main.c: 319: _delay((unsigned long)((10)*(8000000/4000.0)));
  3924  001106  0E1A               	movlw	26
  3925  001108  6E21               	movwf	??i2_beep_error& (0+255),c
  3926  00110A  0EF8               	movlw	248
  3927  00110C                     i2u194_47:
  3928  00110C  2EE8               	decfsz	wreg,f,c
  3929  00110E  D7FE               	bra	i2u194_47
  3930  001110  2E21               	decfsz	??i2_beep_error& (0+255),f,c
  3931  001112  D7FC               	bra	i2u194_47
  3932  001114  D000               	nop2	
  3933                           
  3934                           ;main.c: 320: (LATAbits.LATA0 = 1);
  3935  001116  8089               	bsf	3977,0,c	;volatile
  3936                           
  3937                           ;main.c: 321: _delay((unsigned long)((10)*(8000000/4000.0)));
  3938  001118  0E1A               	movlw	26
  3939  00111A  6E21               	movwf	??i2_beep_error& (0+255),c
  3940  00111C  0EF8               	movlw	248
  3941  00111E                     i2u195_47:
  3942  00111E  2EE8               	decfsz	wreg,f,c
  3943  001120  D7FE               	bra	i2u195_47
  3944  001122  2E21               	decfsz	??i2_beep_error& (0+255),f,c
  3945  001124  D7FC               	bra	i2u195_47
  3946  001126  D000               	nop2	
  3947                           
  3948                           ;main.c: 322: (LATAbits.LATA0 = 0);
  3949  001128  9089               	bcf	3977,0,c	;volatile
  3950                           
  3951                           ;main.c: 323: _delay((unsigned long)((10)*(8000000/4000.0)));
  3952  00112A  0E1A               	movlw	26
  3953  00112C  6E21               	movwf	??i2_beep_error& (0+255),c
  3954  00112E  0EF8               	movlw	248
  3955  001130                     i2u196_47:
  3956  001130  2EE8               	decfsz	wreg,f,c
  3957  001132  D7FE               	bra	i2u196_47
  3958  001134  2E21               	decfsz	??i2_beep_error& (0+255),f,c
  3959  001136  D7FC               	bra	i2u196_47
  3960  001138  D000               	nop2	
  3961                           
  3962                           ;main.c: 324: (LATAbits.LATA0 = 1);
  3963  00113A  8089               	bsf	3977,0,c	;volatile
  3964                           
  3965                           ;main.c: 325: _delay((unsigned long)((10)*(8000000/4000.0)));
  3966  00113C  0E1A               	movlw	26
  3967  00113E  6E21               	movwf	??i2_beep_error& (0+255),c
  3968  001140  0EF8               	movlw	248
  3969  001142                     i2u197_47:
  3970  001142  2EE8               	decfsz	wreg,f,c
  3971  001144  D7FE               	bra	i2u197_47
  3972  001146  2E21               	decfsz	??i2_beep_error& (0+255),f,c
  3973  001148  D7FC               	bra	i2u197_47
  3974  00114A  D000               	nop2	
  3975                           
  3976                           ;main.c: 326: (LATAbits.LATA0 = 0);
  3977  00114C  9089               	bcf	3977,0,c	;volatile
  3978  00114E  0012               	return		;funcret
  3979  001150                     __end_ofi2_beep_error:
  3980                           	opt stack 0
  3981                           pclatu	equ	0xFFB
  3982                           pclath	equ	0xFFA
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           intcon	equ	0xFF2
  3990                           intcon2	equ	0xFF1
  3991                           postinc0	equ	0xFEE
  3992                           fsr0h	equ	0xFEA
  3993                           fsr0l	equ	0xFE9
  3994                           wreg	equ	0xFE8
  3995                           indf1	equ	0xFE7
  3996                           postdec1	equ	0xFE5
  3997                           fsr1h	equ	0xFE2
  3998                           fsr1l	equ	0xFE1
  3999                           indf2	equ	0xFDF
  4000                           postinc2	equ	0xFDE
  4001                           fsr2h	equ	0xFDA
  4002                           fsr2l	equ	0xFD9
  4003                           status	equ	0xFD8
  4004                           
  4005 ;; *************** function _close_lock *****************
  4006 ;; Defined at:
  4007 ;;		line 457 in file "main.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  lock_num        1    wreg     unsigned char 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  lock_num        1    0[COMRAM] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      void 
  4014 ;; Registers used:
  4015 ;;		wreg, status,2, status,0
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4021 ;;      Params:         0       0       0       0       0       0       0       0       0
  4022 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4024 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4025 ;;Total ram usage:        1 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_ISR
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text24
  4035  000E96                     __ptext24:
  4036                           	opt stack 0
  4037  000E96                     _close_lock:
  4038                           	opt stack 27
  4039                           
  4040                           ;incstack = 0
  4041                           ;close_lock@lock_num stored from wreg
  4042  000E96  6E21               	movwf	close_lock@lock_num,c
  4043                           
  4044                           ;main.c: 459: switch(lock_num)
  4045  000E98  D026               	goto	i2l371
  4046  000E9A                     i2l372:
  4047  000E9A  908B               	bcf	3979,0,c	;volatile
  4048                           
  4049                           ;main.c: 462: break;
  4050  000E9C  0012               	return	
  4051  000E9E                     i2l374:
  4052  000E9E  948D               	bcf	3981,2,c	;volatile
  4053                           
  4054                           ;main.c: 465: break;
  4055  000EA0  0012               	return	
  4056  000EA2                     i2l375:
  4057  000EA2  928D               	bcf	3981,1,c	;volatile
  4058                           
  4059                           ;main.c: 468: break;
  4060  000EA4  0012               	return	
  4061  000EA6                     i2l376:
  4062  000EA6  908D               	bcf	3981,0,c	;volatile
  4063                           
  4064                           ;main.c: 471: break;
  4065  000EA8  0012               	return	
  4066  000EAA                     i2l377:
  4067  000EAA  9A89               	bcf	3977,5,c	;volatile
  4068                           
  4069                           ;main.c: 474: break;
  4070  000EAC  0012               	return	
  4071  000EAE                     i2l378:
  4072  000EAE  9889               	bcf	3977,4,c	;volatile
  4073                           
  4074                           ;main.c: 477: break;
  4075  000EB0  0012               	return	
  4076  000EB2                     i2l379:
  4077  000EB2  9689               	bcf	3977,3,c	;volatile
  4078                           
  4079                           ;main.c: 480: break;
  4080  000EB4  0012               	return	
  4081  000EB6                     i2l380:
  4082  000EB6  9E8C               	bcf	3980,7,c	;volatile
  4083                           
  4084                           ;main.c: 483: break;
  4085  000EB8  0012               	return	
  4086  000EBA                     i2l381:
  4087  000EBA  9C8C               	bcf	3980,6,c	;volatile
  4088                           
  4089                           ;main.c: 486: break;
  4090  000EBC  0012               	return	
  4091  000EBE                     i2l382:
  4092  000EBE  9A8C               	bcf	3980,5,c	;volatile
  4093                           
  4094                           ;main.c: 489: break;
  4095  000EC0  0012               	return	
  4096  000EC2                     i2l383:
  4097  000EC2  988C               	bcf	3980,4,c	;volatile
  4098                           
  4099                           ;main.c: 492: break;
  4100  000EC4  0012               	return	
  4101  000EC6                     i2l384:
  4102  000EC6  9E8B               	bcf	3979,7,c	;volatile
  4103                           
  4104                           ;main.c: 495: break;
  4105  000EC8  0012               	return	
  4106  000ECA                     i2l385:
  4107  000ECA  9C8B               	bcf	3979,6,c	;volatile
  4108                           
  4109                           ;main.c: 498: break;
  4110  000ECC  0012               	return	
  4111  000ECE                     i2l386:
  4112  000ECE  948C               	bcf	3980,2,c	;volatile
  4113                           
  4114                           ;main.c: 504: break;
  4115  000ED0  0012               	return	
  4116  000ED2                     i2l387:
  4117  000ED2  968C               	bcf	3980,3,c	;volatile
  4118                           
  4119                           ;main.c: 507: break;
  4120  000ED4  0012               	return	
  4121  000ED6                     i2l388:
  4122  000ED6  928B               	bcf	3979,1,c	;volatile
  4123                           
  4124                           ;main.c: 513: break;
  4125  000ED8  0012               	return	
  4126  000EDA                     i2l389:
  4127  000EDA  948B               	bcf	3979,2,c	;volatile
  4128                           
  4129                           ;main.c: 516: break;
  4130  000EDC  0012               	return	
  4131  000EDE                     i2l390:
  4132  000EDE  908C               	bcf	3980,0,c	;volatile
  4133                           
  4134                           ;main.c: 519: break;
  4135  000EE0  0012               	return	
  4136  000EE2                     i2l391:
  4137  000EE2  928C               	bcf	3980,1,c	;volatile
  4138                           
  4139                           ;main.c: 523: }
  4140                           
  4141                           ;main.c: 522: break;
  4142  000EE4  0012               	return	
  4143  000EE6                     i2l371:
  4144  000EE6  5021               	movf	close_lock@lock_num,w,c
  4145                           
  4146                           ; Switch size 1, requested type "space"
  4147                           ; Number of cases is 19, Range of values is 1 to 21
  4148                           ; switch strategies available:
  4149                           ; Name         Instructions Cycles
  4150                           ; simple_byte           58    30 (average)
  4151                           ;	Chosen strategy is simple_byte
  4152  000EE8  0A01               	xorlw	1	; case 1
  4153  000EEA  B4D8               	btfsc	status,2,c
  4154  000EEC  D7D6               	goto	i2l372
  4155  000EEE  0A03               	xorlw	3	; case 2
  4156  000EF0  B4D8               	btfsc	status,2,c
  4157  000EF2  D7D5               	goto	i2l374
  4158  000EF4  0A01               	xorlw	1	; case 3
  4159  000EF6  B4D8               	btfsc	status,2,c
  4160  000EF8  D7D4               	goto	i2l375
  4161  000EFA  0A07               	xorlw	7	; case 4
  4162  000EFC  B4D8               	btfsc	status,2,c
  4163  000EFE  D7D3               	goto	i2l376
  4164  000F00  0A01               	xorlw	1	; case 5
  4165  000F02  B4D8               	btfsc	status,2,c
  4166  000F04  D7D2               	goto	i2l377
  4167  000F06  0A03               	xorlw	3	; case 6
  4168  000F08  B4D8               	btfsc	status,2,c
  4169  000F0A  D7D1               	goto	i2l378
  4170  000F0C  0A01               	xorlw	1	; case 7
  4171  000F0E  B4D8               	btfsc	status,2,c
  4172  000F10  D7D0               	goto	i2l379
  4173  000F12  0A0F               	xorlw	15	; case 8
  4174  000F14  B4D8               	btfsc	status,2,c
  4175  000F16  D7CF               	goto	i2l380
  4176  000F18  0A01               	xorlw	1	; case 9
  4177  000F1A  B4D8               	btfsc	status,2,c
  4178  000F1C  D7CE               	goto	i2l381
  4179  000F1E  0A03               	xorlw	3	; case 10
  4180  000F20  B4D8               	btfsc	status,2,c
  4181  000F22  D7CD               	goto	i2l382
  4182  000F24  0A01               	xorlw	1	; case 11
  4183  000F26  B4D8               	btfsc	status,2,c
  4184  000F28  D7CC               	goto	i2l383
  4185  000F2A  0A07               	xorlw	7	; case 12
  4186  000F2C  B4D8               	btfsc	status,2,c
  4187  000F2E  D7CB               	goto	i2l384
  4188  000F30  0A01               	xorlw	1	; case 13
  4189  000F32  B4D8               	btfsc	status,2,c
  4190  000F34  D7CA               	goto	i2l385
  4191  000F36  0A02               	xorlw	2	; case 15
  4192  000F38  B4D8               	btfsc	status,2,c
  4193  000F3A  D7C9               	goto	i2l386
  4194  000F3C  0A1F               	xorlw	31	; case 16
  4195  000F3E  B4D8               	btfsc	status,2,c
  4196  000F40  D7C8               	goto	i2l387
  4197  000F42  0A02               	xorlw	2	; case 18
  4198  000F44  B4D8               	btfsc	status,2,c
  4199  000F46  D7C7               	goto	i2l388
  4200  000F48  0A01               	xorlw	1	; case 19
  4201  000F4A  B4D8               	btfsc	status,2,c
  4202  000F4C  D7C6               	goto	i2l389
  4203  000F4E  0A07               	xorlw	7	; case 20
  4204  000F50  B4D8               	btfsc	status,2,c
  4205  000F52  D7C5               	goto	i2l390
  4206  000F54  0A01               	xorlw	1	; case 21
  4207  000F56  A4D8               	btfss	status,2,c
  4208  000F58  0012               	return	
  4209  000F5A  D7C3               	goto	i2l391
  4210  000F5C                     __end_of_close_lock:
  4211                           	opt stack 0
  4212                           pclatu	equ	0xFFB
  4213                           pclath	equ	0xFFA
  4214                           tblptru	equ	0xFF8
  4215                           tblptrh	equ	0xFF7
  4216                           tblptrl	equ	0xFF6
  4217                           tablat	equ	0xFF5
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           intcon	equ	0xFF2
  4221                           intcon2	equ	0xFF1
  4222                           postinc0	equ	0xFEE
  4223                           fsr0h	equ	0xFEA
  4224                           fsr0l	equ	0xFE9
  4225                           wreg	equ	0xFE8
  4226                           indf1	equ	0xFE7
  4227                           postdec1	equ	0xFE5
  4228                           fsr1h	equ	0xFE2
  4229                           fsr1l	equ	0xFE1
  4230                           indf2	equ	0xFDF
  4231                           postinc2	equ	0xFDE
  4232                           fsr2h	equ	0xFDA
  4233                           fsr2l	equ	0xFD9
  4234                           status	equ	0xFD8
  4235                           pclatu	equ	0xFFB
  4236                           pclath	equ	0xFFA
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           intcon	equ	0xFF2
  4244                           intcon2	equ	0xFF1
  4245                           postinc0	equ	0xFEE
  4246                           fsr0h	equ	0xFEA
  4247                           fsr0l	equ	0xFE9
  4248                           wreg	equ	0xFE8
  4249                           indf1	equ	0xFE7
  4250                           postdec1	equ	0xFE5
  4251                           fsr1h	equ	0xFE2
  4252                           fsr1l	equ	0xFE1
  4253                           indf2	equ	0xFDF
  4254                           postinc2	equ	0xFDE
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259                           	psect	rparam
  4260  0000                     pclatu	equ	0xFFB
  4261                           pclath	equ	0xFFA
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           prodh	equ	0xFF4
  4267                           prodl	equ	0xFF3
  4268                           intcon	equ	0xFF2
  4269                           intcon2	equ	0xFF1
  4270                           postinc0	equ	0xFEE
  4271                           fsr0h	equ	0xFEA
  4272                           fsr0l	equ	0xFE9
  4273                           wreg	equ	0xFE8
  4274                           indf1	equ	0xFE7
  4275                           postdec1	equ	0xFE5
  4276                           fsr1h	equ	0xFE2
  4277                           fsr1l	equ	0xFE1
  4278                           indf2	equ	0xFDF
  4279                           postinc2	equ	0xFDE
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284                           	psect	temp
  4285  000046                     btemp:
  4286                           	opt stack 0
  4287  000046                     	ds	1
  4288  0000                     int$flags	set	btemp
  4289  0000                     wtemp6	set	btemp+1
  4290                           pclatu	equ	0xFFB
  4291                           pclath	equ	0xFFA
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           intcon	equ	0xFF2
  4299                           intcon2	equ	0xFF1
  4300                           postinc0	equ	0xFEE
  4301                           fsr0h	equ	0xFEA
  4302                           fsr0l	equ	0xFE9
  4303                           wreg	equ	0xFE8
  4304                           indf1	equ	0xFE7
  4305                           postdec1	equ	0xFE5
  4306                           fsr1h	equ	0xFE2
  4307                           fsr1l	equ	0xFE1
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    14
    Data        5
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      69
    BANK0           160     24     130
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eepromCode	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    passcodeCompare@keybuffer1	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    clear_keyArray@arr	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    arr_to_num@arr	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    arr_to_num@number	PTR unsigned char  size(2) Largest target is 1
		 -> main@locker_num(BANK0[1]), 

    getKey@KeypadStatus	PTR struct . size(2) Largest target is 2
		 -> main@currentKeypadStatus(BANK0[2]), buttonPressedIndicator@keypad_state(COMRAM[2]), 

    eepromWriteCode@codeBuffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_arr_to_num
    _main->_eepromWriteCode
    _main->_passcodeCompare
    _start_door_timer->_state_timer0
    _passcodeCompare->_readEEPROM
    _eepromWriteCode->_writeEEPROM
    _buttonPressedIndicator->_getKey

Critical Paths under _ISR in COMRAM

    _ISR->i2_beep_error

Critical Paths under _main in BANK0

    _main->_passcodeCompare

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    7665
                                             31 COMRAM     1     1      0
                                              7 BANK0     17    17      0
                         _arr_to_num
                               _beep
                         _beep_error
                          _beep_long
                            _beep_ok
             _buttonPressedIndicator
            _check_lock_num_validity
                     _clear_keyArray
               _configure_door_timer
                    _eepromWriteCode
                             _getKey
                   _initControllerIO
                         _initKeypad
                   _initStandbyTimer
                          _open_lock
                    _passcodeCompare
                   _start_door_timer
                       _state_timer0
 ---------------------------------------------------------------------------------
 (1) _start_door_timer                                     0     0      0       1
                       _state_timer0
 ---------------------------------------------------------------------------------
 (1) _state_timer0                                         1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _passcodeCompare                                     14    10      4     564
                                             24 COMRAM     7     3      4
                                              0 BANK0      7     7      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _open_lock                                            1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initStandbyTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initControllerIO                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _eepromWriteCode                                      5     2      3     682
                                             26 COMRAM     5     2      3
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _configure_door_timer                                 0     0      0       0
                       _setup_timer0
 ---------------------------------------------------------------------------------
 (2) _setup_timer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_keyArray                                       3     1      2     490
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _check_lock_num_validity                              2     2      0      69
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _buttonPressedIndicator                               2     2      0    1993
                                             27 COMRAM     2     2      0
                             _getKey
 ---------------------------------------------------------------------------------
 (1) _getKey                                               4     2      2    1778
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _beep_ok                                              1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep_long                                            2     2      0       0
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _beep_error                                           2     2      0       0
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _arr_to_num                                           8     3      5     747
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 21    21      0      60
                                              2 COMRAM    21    21      0
                         _close_lock
                       i2_beep_error
 ---------------------------------------------------------------------------------
 (4) i2_beep_error                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _close_lock                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _arr_to_num
   _beep
   _beep_error
   _beep_long
   _beep_ok
   _buttonPressedIndicator
     _getKey
   _check_lock_num_validity
   _clear_keyArray
   _configure_door_timer
     _setup_timer0
   _eepromWriteCode
     _writeEEPROM
   _getKey
   _initControllerIO
   _initKeypad
   _initStandbyTimer
   _open_lock
   _passcodeCompare
     _readEEPROM
   _start_door_timer
     _state_timer0
   _state_timer0

 _ISR (ROOT)
   _close_lock
   i2_beep_error

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      82       5       81.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C7      20        0.0%
DATA                 0      0      C7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Apr 15 13:01:30 2018

                                l17 11C6                                  l18 11A8  
                                l51 086C                                  l61 0914  
                                l70 09CC                                  l54 0888  
                                l63 092C                                  l47 0844  
                                l72 0A00                                  l73 0A38  
                                l65 0960                                  l66 0990  
                                l58 08C0                                  l75 0A6C  
                                l59 08F0                                  l68 09B4  
                                l77 0AA0                                  l79 0AD4  
                       __CFG_BOR$ON 000000                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                               l403 0BF6                                 l420 0C5C  
                               l404 0B98                                 l421 0C46  
                               l413 0BE8                                 l342 1272  
                               l350 0DD8                                 l351 0DDC  
                               l423 0C84                                 l360 0E00  
                               l352 0DE0                                 l432 101C  
                               l361 0E04                                 l353 0DE4  
                               l417 0C40                                 l362 0E08  
                               l354 0DE8                                 l434 104E  
                               l418 0C2E                                 l347 0E20  
                               l363 0E0C                                 l355 0DEC  
                               l435 1022                                 l364 0E10  
                               l356 0DF0                                 l348 0DD4  
                               l436 1048                                 l285 0F76  
                               l365 0E14                                 l357 0DF4  
                               l437 104C                                 l366 0E18  
                               l358 0DF8                                 l287 0FBA  
                               l295 12A0                                 l367 0E1C  
                               l359 0DFC                                 l288 0FF0  
                               l289 0FC0                                 l297 12A4  
                               l397 0B2C    eeprom_functions@eepromCodeBuffer 0060  
                      __CFG_CPB$OFF 000000                                 _PR2 000FCB  
                      __CFG_CPD$OFF 000000                                 _ISR 0008  
                               prod 000FF3                                 wreg 000FE8  
                      _state_timer0 133C            __end_of_start_door_timer 133C  
                      __CFG_LVP$OFF 000000                                ?_ISR 0021  
                              ISR@i 0037                        __CFG_WDT$OFF 000000  
                              l2135 120A                                l2233 08DE  
                              l2243 0908                                l2183 0832  
                              l2193 0860                                l2513 126A  
                              l2283 097E                                l2293 09A8  
                              l2537 1016                                l2661 0C3A  
                              u1135 1238                                u1136 123A  
                              u1350 12DA                                _LATB 000F8A  
                              _LATC 000F8B                                _LATD 000F8C  
                              _LATE 000F8D                                u1480 1080  
                              u1640 0C8E                                u1707 0892  
                              u1717 08CE                                u1807 0A42  
                              u1727 08FA                                u1817 0A76  
                              u1737 091E                                u1907 10CA  
                              u1827 0AAA                                u1747 0936  
                              u1667 0C50                                u1917 10DC  
                              u1837 11D8                                u1757 096E  
                              u1677 081E                                u1927 12E6  
                              u1847 11EA                                u1767 099A  
                              u1687 084E                                u1857 11FA  
                              u1777 09BE                                u1697 0876  
                              u1867 12B4                                u1787 09D6  
                              u1877 1090                                u1797 0A0E  
                              u1887 10A6                                _RBIF 007F90  
                              u1897 10B8                                _TMR0 000FD6  
                              _TMR1 000FCE                     _passcodeCompare 1000  
                       arr_to_num@a 003E                                _beep 12DE  
                              _main 0AF0                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf1 000FE7  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 0046  
             __size_ofi2_beep_error 0066                                prodh 000FF4  
                              prodl 000FF3                                start 000E  
                     __CFG_IESO$OFF 000000                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                         _writeEEPROM 1208  
                             ??_ISR 0023                      _systemStateReg 0020  
   check_lock_num_validity@lock_num 0039                       __CFG_PLLDIV$1 000000  
                             ?_beep 0021                  writeEEPROM@address 0039  
                             ?_main 0021                               _EEADR 000FA9  
   check_lock_num_validity@validity 0038                               _CMCON 000FB4  
                             _T2CON 000FCA                               i2l310 0D2A  
                             i2l312 0D7C                               i2l313 0D4C  
                             i2l308 0D0E                               i2l309 0D2C  
                             i2l371 0EE6                               i2l380 0EB6  
                             i2l372 0E9A                               i2l381 0EBA  
                             i2l390 0EDE                               i2l382 0EBE  
                             i2l374 0E9E                               i2l391 0EE2  
                             i2l383 0EC2                               i2l375 0EA2  
                             i2l384 0EC6                               i2l376 0EA6  
                             i2l385 0ECA                               i2l377 0EAA  
                             i2l386 0ECE                               i2l378 0EAE  
                             i2l387 0ED2                               i2l379 0EB2  
                             i2l388 0ED6                               i2l389 0EDA  
                             _PORTB 000F81                     __end_of_beep_ok 1208  
                     __CFG_USBDIV$1 000000                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                     __CFG_PWRT$OFF 000000                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBTRB$OFF 000000  
         ??_check_lock_num_validity 0038                        i2_beep_error 10EA  
                             main@i 00DB              _factoryResetCodeLenght 0045  
                             pclath 000FFA                               tablat 000FF5  
                             status 000FD8                               wtemp6 0047  
                    __CFG_ICPRT$OFF 000000             __size_of_clear_keyArray 0024  
                   __initialization 1150                        __end_of_beep 12F4  
                 _num_of_doors_open 0015                        __end_of_main 0CB0  
                   _systemStateReg2 001F                              ??_beep 0038  
                  _initStandbyTimer 1308                              ??_main 0040  
                     __activetblptr 000002               _tempCodeKeyPressCount 0019  
                close_lock@lock_num 0021      eepromWriteCode@eepromWriteAddr 003E  
           __end_of_passcodeCompare 1084                     __CFG_CCP2MX$OFF 000000  
                            _ADCON1 000FC1            __size_of_eepromWriteCode 003A  
                            _EEDATA 000FA8                              _CCPR1L 000FBE  
                            _EECON2 000FA7                       _keyPressCount 001E  
                 main@keypressArray 00D1                     _defaultPassCode 0801  
                            _TRISA3 007C93     passcodeCompare@storedCodeLenght 003D  
           main@currentKeypadStatus 00E0                      __CFG_XINST$OFF 000000  
   __end_of_check_lock_num_validity 12A8                       arr_to_num@arr 0038  
                  _factoryResetCode 0041                   ?_initControllerIO 0021  
                    __CFG_STVREN$ON 000000                              _getKey 0810  
           ?_buttonPressedIndicator 0021                           ??_beep_ok 0038  
                ??_initControllerIO 0038                              clear_0 1176  
                            clear_1 1182                        __pdataCOMRAM 0041  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                        __accesstop 0060             __end_of__initialization 1188  
                   __CFG_PBADEN$OFF 000000                       ___rparam_used 000001  
                    __pcstackCOMRAM 0021      __end_of_buttonPressedIndicator 12DE  
                __size_of_beep_long 001E       __size_of_configure_door_timer 0006  
        passcodeCompare@compareAddr 003C             __end_of_defaultPassCode 080A  
                  ?_passcodeCompare 0039                          _beep_error 1084  
                 ?_start_door_timer 0021                      _tempCodeBuffer 0079  
                        __pbssBANK0 0060                  ??_start_door_timer 0039  
                    _clear_keyArray 1266                   ??_eepromWriteCode 003E  
                      ?_writeEEPROM 0038                             ?_getKey 0038  
                           _CCP1CON 000FBD                  __size_of_open_lock 00C6  
                 state_timer0@state 0038                    passcodeCompare@i 003E  
                        _eepromCode 0011                     clear_keyArray@a 003A  
                  _defaultPassCode2 080A                          _close_lock 0E96  
                           i2u44_40 0D84                          _arr_to_num 0F5C  
                 __end_of_beep_long 12C6              __end_of_clear_keyArray 128A  
     __end_of_defaultPassCodeLenght 080F                     __CFG_VREGEN$OFF 000000  
          __end_of_initStandbyTimer 1318                          _readEEPROM 1318  
         passcodeCompare@keybuffer1 0039                      main@locker_num 00DF  
            main@currentSystemState 00DD                             __Hparam 0000  
                           __Lparam 0000                          _initKeypad 1326  
            _defaultPassCode2Lenght 080D                     __size_of_getKey 02E0  
                      __psmallconst 0800                             _beep_ok 11D0  
                           __pcinit 1150                             __ramtop 0800  
                           __ptext0 0AF0                             __ptext1 1334  
                           __ptext2 133C                             __ptext3 1000  
                           __ptext4 1318                             __ptext5 0DD0  
                           __ptext6 1308                             __ptext7 1326  
                           __ptext8 123E                             __ptext9 1196  
                         _T0CONbits 000FD5                        __size_of_ISR 0DC8  
                         _T1CONbits 000FCD                    eepromWriteCode@i 003F  
                       ?_beep_error 0021                      __pintcode_body 0CB0  
              end_of_initialization 1188                     ?_clear_keyArray 0038  
                 __end_of_open_lock 0E96                       __Lmediumconst 0000  
                           int_func 0CB0                   clear_keyArray@arr 0038  
           passcodeCompare@validity 003F                  timer@timerOVFcount 0016  
                    _timer1OVFcount 001D                             postdec1 000FE5  
                           postinc0 000FEE                             postinc2 000FDE  
                    _timer2OVFcount 0013                        _LASTPASSCODE 001A  
          ?_check_lock_num_validity 0021                       ?_setup_timer0 0021  
                         _TRISAbits 000F92                         ?_close_lock 0021  
         __size_of_initControllerIO 0028                         ?_arr_to_num 0038  
                 readEEPROM@address 0038                          _soundStuff 000B  
                       ?_readEEPROM 0021                    writeEEPROM@datas 0038  
                       ?_initKeypad 0021                 __size_of_beep_error 0066  
              __size_of_writeEEPROM 0036                       __pidataCOMRAM 134A  
                    __end_of_getKey 0AF0                 getKey@buttonPressed 003B  
                    ??_setup_timer0 0038                  arr_to_num@validity 003F  
               start_initialization 1150                       ?_state_timer0 0021  
                       __end_of_ISR 0DD0                     _eepromWriteCode 1196  
      __end_of_configure_door_timer 134A                   open_lock@lock_num 0038  
          __end_of_defaultPassCode2 080D           __size_of_start_door_timer 0008  
               __size_of_close_lock 00C6                 __size_of_arr_to_num 00A4  
                          ??_getKey 003A                    __CFG_LPT1OSC$OFF 000000  
               __size_of_readEEPROM 000E                      ??_state_timer0 0038  
                       __pbssCOMRAM 0001                       __pcstackBANK0 00CA  
                     ?i2_beep_error 0021                    arr_to_num@number 003B  
               __size_of_initKeypad 000E                           _beep_long 12A8  
          __size_of_passcodeCompare 0084                   ?_initStandbyTimer 0021  
                ??_initStandbyTimer 0038                       _open_lock_arr 0001  
                         __pintcode 0008                            ?_beep_ok 0021  
                         _bufferPtr 001B             __end_of_eepromWriteCode 11D0  
              main@numOfKeysPressed 00DE                         __smallconst 0800  
                         _keyBuffer 0092                    ??_clear_keyArray 003A  
         arr_to_num@num_of_elements 003A                      ??i2_beep_error 0021  
                  _initControllerIO 123E                        ??_beep_error 0038  
      passcodeCompare@compareLenght 003B                  getKey@KeypadStatus 0038  
                        ?_beep_long 0021            ??_buttonPressedIndicator 003C  
    __end_of_defaultPassCode2Lenght 080E                            _LATAbits 000F89  
                          _LATCbits 000F8B                            _LATDbits 000F8C  
                          _LATEbits 000F8D               _defaultPassCodeLenght 080E  
                          _PIE1bits 000F9D                           _open_lock 0DD0  
              __end_of_setup_timer0 1308               writeEEPROM@gie_Status 003A  
                          _PIR1bits 000F9E                            i2u193_47 10F6  
                          i2u194_47 110C                            i2u195_47 111E  
                          i2u196_47 1130                            i2u197_47 1142  
                  __CFG_WDTPS$32768 000000                _configure_door_timer 1344  
                __end_of_beep_error 10EA                        ??_close_lock 0021  
                      ??_arr_to_num 003D                         _INTCON2bits 000FF1  
                         copy_data0 1164    __size_of_check_lock_num_validity 001E  
                      ??_readEEPROM 0038                          _EECON1bits 000FA6  
                        ?_open_lock 0021                            __Hrparam 0000  
              __end_of_state_timer0 1344                            __Lrparam 0000  
                  _start_door_timer 1334                        ??_initKeypad 0038  
                 ??_passcodeCompare 00CA               ?_configure_door_timer 0021  
                     _timerOVFcount 0018                  __end_of_close_lock 0F5C  
                __end_of_arr_to_num 1000                    __size_of_beep_ok 0038  
                  ?_eepromWriteCode 003B               __CFG_FOSC$INTOSCIO_EC 000000  
                __end_of_readEEPROM 1326                            __ptext10 1208  
                          __ptext11 1344                            __ptext20 12DE  
                          __ptext12 12F4                            __ptext21 0F5C  
                          __ptext13 1266                            __ptext14 128A  
                          __ptext23 10EA                            __ptext15 12C6  
                          __ptext24 0E96                            __ptext16 0810  
                          __ptext17 11D0                            __ptext18 12A8  
                          __ptext19 1084                  __end_of_initKeypad 1334  
                       ??_beep_long 0038                       __size_of_beep 0016  
                     __size_of_main 01C0     __size_of_buttonPressedIndicator 0018  
                     ??_writeEEPROM 0039                __end_ofi2_beep_error 1150  
                          int$flags 0046                            main@addr 00DC  
                          _soundOut 00C4               __CFG_CPUDIV$OSC1_PLL2 000000  
                        _INTCONbits 000FF2                            intlevel2 0000  
                 _currentTimerState 0017               __size_of_setup_timer0 0014  
             _wrongCodeEnteredCount 001C                    _eepromCodeBuffer 00AB  
                       ??_open_lock 0038              ??_configure_door_timer 0038  
          __end_of_initControllerIO 1266  buttonPressedIndicator@keypad_state 003C  
               __end_of_writeEEPROM 123E           __size_of_initStandbyTimer 0010  
            _buttonPressedIndicator 12C6                        _setup_timer0 12F4  
           _check_lock_num_validity 128A               __size_of_state_timer0 0008  
         eepromWriteCode@codeBuffer 003C           eepromWriteCode@codeLenght 003B  



Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Mar 19 22:51:40 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 1.44
    33                           ; Generated 14/09/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4550 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  000F98                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _factoryResetCode
    72  000F98  08                 	db	8
    73  000F99  00                 	db	0
    74  000F9A  08                 	db	8
    75  000F9B  00                 	db	0
    76                           
    77                           ;initializer for _factoryResetCodeLenght
    78  000F9C  04                 	db	4
    79                           
    80                           	psect	smallconst
    81  000800                     __psmallconst:
    82                           	opt stack 0
    83  000800  00                 	db	0
    84  000801                     _defaultPassCode:
    85                           	opt stack 0
    86  000801  09                 	db	9
    87  000802  08                 	db	8
    88  000803  07                 	db	7
    89  000804  06                 	db	6
    90  000805  05                 	db	5
    91  000806  04                 	db	4
    92  000807  03                 	db	3
    93  000808  02                 	db	2
    94  000809  01                 	db	1
    95  00080A                     __end_of_defaultPassCode:
    96                           	opt stack 0
    97  00080A                     _defaultPassCode2:
    98                           	opt stack 0
    99  00080A  01                 	db	1
   100  00080B  02                 	db	2
   101  00080C  03                 	db	3
   102  00080D                     __end_of_defaultPassCode2:
   103                           	opt stack 0
   104  00080D                     _defaultPassCode2Lenght:
   105                           	opt stack 0
   106  00080D  03                 	db	3
   107  00080E                     __end_of_defaultPassCode2Lenght:
   108                           	opt stack 0
   109  00080E                     _defaultPassCodeLenght:
   110                           	opt stack 0
   111  00080E  09                 	db	9
   112  00080F                     __end_of_defaultPassCodeLenght:
   113                           	opt stack 0
   114  0000                     _PORTB	set	3969
   115  0000                     _LATB	set	3978
   116  0000                     _TRISB	set	3987
   117  0000                     _TRISA3	set	31891
   118  0000                     _TMR1	set	4046
   119  0000                     _PIR1bits	set	3998
   120  0000                     _PIE1bits	set	3997
   121  0000                     _T1CONbits	set	4045
   122  0000                     _CCPR1L	set	4030
   123  0000                     _T2CON	set	4042
   124  0000                     _PR2	set	4043
   125  0000                     _CCP1CON	set	4029
   126  0000                     _EECON2	set	4007
   127  0000                     _EEDATA	set	4008
   128  0000                     _EEADR	set	4009
   129  0000                     _EECON1bits	set	4006
   130  0000                     _INTCON2bits	set	4081
   131  0000                     _INTCONbits	set	4082
   132  0000                     _RBIF	set	32656
   133                           
   134                           ; #config settings
   135  00080F  00                 	db	0	; dummy byte at the end
   136  0000                     
   137                           	psect	cinit
   138  000E4E                     __pcinit:
   139                           	opt stack 0
   140  000E4E                     start_initialization:
   141                           	opt stack 0
   142  000E4E                     __initialization:
   143                           	opt stack 0
   144                           
   145                           ; Initialize objects allocated to COMRAM (5 bytes)
   146                           ; load TBLPTR registers with __pidataCOMRAM
   147  000E4E  0E98               	movlw	low __pidataCOMRAM
   148  000E50  6EF6               	movwf	tblptrl,c
   149  000E52  0E0F               	movlw	high __pidataCOMRAM
   150  000E54  6EF7               	movwf	tblptrh,c
   151  000E56  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   152  000E58  6EF8               	movwf	tblptru,c
   153  000E5A  EE00  F03D         	lfsr	0,__pdataCOMRAM
   154  000E5E  EE10 F005          	lfsr	1,5
   155  000E62                     copy_data0:
   156  000E62  0009               	tblrd		*+
   157  000E64  CFF5 FFEE          	movff	tablat,postinc0
   158  000E68  50E5               	movf	postdec1,w,c
   159  000E6A  50E1               	movf	fsr1l,w,c
   160  000E6C  E1FA               	bnz	copy_data0
   161                           
   162                           ; Clear objects allocated to BANK0 (100 bytes)
   163  000E6E  EE00  F060         	lfsr	0,__pbssBANK0
   164  000E72  0E64               	movlw	100
   165  000E74                     clear_0:
   166  000E74  6AEE               	clrf	postinc0,c
   167  000E76  06E8               	decf	wreg,f,c
   168  000E78  E1FD               	bnz	clear_0
   169                           
   170                           ; Clear objects allocated to COMRAM (27 bytes)
   171  000E7A  EE00  F022         	lfsr	0,__pbssCOMRAM
   172  000E7E  0E1B               	movlw	27
   173  000E80                     clear_1:
   174  000E80  6AEE               	clrf	postinc0,c
   175  000E82  06E8               	decf	wreg,f,c
   176  000E84  E1FD               	bnz	clear_1
   177  000E86                     end_of_initialization:
   178                           	opt stack 0
   179  000E86                     __end_of__initialization:
   180                           	opt stack 0
   181  000E86  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   182  000E88  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   183  000E8A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   184  000E8C  6EF8               	movwf	tblptru,c
   185  000E8E  0E08               	movlw	high __Lsmallconst
   186  000E90  6EF7               	movwf	tblptrh,c
   187  000E92  0100               	movlb	0
   188  000E94  EF78  F005         	goto	_main	;jump to C main() function
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1l	equ	0xFE1
   197                           
   198                           	psect	bssCOMRAM
   199  000022                     __pbssCOMRAM:
   200                           	opt stack 0
   201  000022                     _soundOut:
   202                           	opt stack 0
   203  000022                     	ds	6
   204  000028                     _soundStuff:
   205                           	opt stack 0
   206  000028                     	ds	6
   207  00002E                     _eepromCode:
   208                           	opt stack 0
   209  00002E                     	ds	2
   210  000030                     _timer2OVFcount:
   211                           	opt stack 0
   212  000030                     	ds	2
   213  000032                     	ds	1
   214  000033                     _currentTimerState:
   215                           	opt stack 0
   216  000033                     	ds	1
   217  000034                     	ds	1
   218  000035                     _tempCodeKeyPressCount:
   219                           	opt stack 0
   220  000035                     	ds	1
   221  000036                     _LASTPASSCODE:
   222                           	opt stack 0
   223  000036                     	ds	1
   224  000037                     _bufferPtr:
   225                           	opt stack 0
   226  000037                     	ds	1
   227  000038                     _wrongCodeEnteredCount:
   228                           	opt stack 0
   229  000038                     	ds	1
   230  000039                     _timer1OVFcount:
   231                           	opt stack 0
   232  000039                     	ds	1
   233  00003A                     _keyPressCount:
   234                           	opt stack 0
   235  00003A                     	ds	1
   236  00003B                     _systemStateReg2:
   237                           	opt stack 0
   238  00003B                     	ds	1
   239  00003C                     _systemStateReg:
   240                           	opt stack 0
   241  00003C                     	ds	1
   242                           tblptru	equ	0xFF8
   243                           tblptrh	equ	0xFF7
   244                           tblptrl	equ	0xFF6
   245                           tablat	equ	0xFF5
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           postdec1	equ	0xFE5
   249                           fsr1l	equ	0xFE1
   250                           
   251                           	psect	dataCOMRAM
   252  00003D                     __pdataCOMRAM:
   253                           	opt stack 0
   254  00003D                     _factoryResetCode:
   255                           	opt stack 0
   256  00003D                     	ds	4
   257  000041                     _factoryResetCodeLenght:
   258                           	opt stack 0
   259  000041                     	ds	1
   260                           tblptru	equ	0xFF8
   261                           tblptrh	equ	0xFF7
   262                           tblptrl	equ	0xFF6
   263                           tablat	equ	0xFF5
   264                           postinc0	equ	0xFEE
   265                           wreg	equ	0xFE8
   266                           postdec1	equ	0xFE5
   267                           fsr1l	equ	0xFE1
   268                           
   269                           	psect	bssBANK0
   270  000060                     __pbssBANK0:
   271                           	opt stack 0
   272  000060                     	ds	25
   273  000079                     _tempCodeBuffer:
   274                           	opt stack 0
   275  000079                     	ds	25
   276  000092                     _keyBuffer:
   277                           	opt stack 0
   278  000092                     	ds	25
   279  0000AB                     	ds	25
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           postdec1	equ	0xFE5
   287                           fsr1l	equ	0xFE1
   288                           
   289                           	psect	cstackBANK0
   290  0000C4                     __pcstackBANK0:
   291                           	opt stack 0
   292  0000C4                     main@a:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x0
   296  0000C4                     	ds	1
   297  0000C5                     main@keypressArray:
   298                           	opt stack 0
   299                           
   300                           ; 10 bytes @ 0x1
   301  0000C5                     	ds	10
   302  0000CF                     main@addr:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0xB
   306  0000CF                     	ds	1
   307  0000D0                     main@currentSystemState:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0xC
   311  0000D0                     	ds	1
   312  0000D1                     main@numOfKeysPressed:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0xD
   316  0000D1                     	ds	1
   317  0000D2                     main@locker_num:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0xE
   321  0000D2                     	ds	1
   322  0000D3                     main@currentKeypadStatus:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0xF
   326  0000D3                     	ds	2
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           postdec1	equ	0xFE5
   334                           fsr1l	equ	0xFE1
   335                           
   336                           	psect	cstackCOMRAM
   337  000001                     __pcstackCOMRAM:
   338                           	opt stack 0
   339  000001                     ??_ISR:
   340  000001                     
   341                           ; 2 bytes @ 0x0
   342  000001                     	ds	18
   343  000013                     writeEEPROM@datas:
   344                           	opt stack 0
   345  000013                     readEEPROM@address:
   346                           	opt stack 0
   347  000013                     check_lock_num_validity@validity:
   348                           	opt stack 0
   349  000013                     getKey@KeypadStatus:
   350                           	opt stack 0
   351  000013                     arr_to_num@arr:
   352                           	opt stack 0
   353  000013                     clear_keyArray@arr:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x12
   357  000013                     	ds	1
   358  000014                     writeEEPROM@address:
   359                           	opt stack 0
   360  000014                     check_lock_num_validity@lock_num:
   361                           	opt stack 0
   362  000014                     check_password_presence@a:
   363                           	opt stack 0
   364  000014                     passcodeCompare@keybuffer1:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x13
   368  000014                     	ds	1
   369  000015                     ??_getKey:
   370  000015                     writeEEPROM@gie_Status:
   371                           	opt stack 0
   372  000015                     arr_to_num@num_of_elements:
   373                           	opt stack 0
   374  000015                     check_password_presence@lock_num:
   375                           	opt stack 0
   376  000015                     clear_keyArray@a:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x14
   380  000015                     	ds	1
   381  000016                     eepromWriteCode@codeLenght:
   382                           	opt stack 0
   383  000016                     getKey@buttonPressed:
   384                           	opt stack 0
   385  000016                     check_password_presence@validity:
   386                           	opt stack 0
   387  000016                     passcodeCompare@compareLenght:
   388                           	opt stack 0
   389  000016                     arr_to_num@number:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x15
   393  000016                     	ds	1
   394  000017                     check_password_presence@addr:
   395                           	opt stack 0
   396  000017                     passcodeCompare@compareAddr:
   397                           	opt stack 0
   398  000017                     eepromWriteCode@codeBuffer:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x16
   402  000017                     	ds	1
   403  000018                     ??_passcodeCompare:
   404  000018                     ??_arr_to_num:
   405                           
   406                           ; 1 bytes @ 0x17
   407  000018                     	ds	1
   408  000019                     eepromWriteCode@eepromWriteAddr:
   409                           	opt stack 0
   410  000019                     arr_to_num@a:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x18
   414  000019                     	ds	1
   415  00001A                     eepromWriteCode@i:
   416                           	opt stack 0
   417  00001A                     arr_to_num@validity:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x19
   421  00001A                     	ds	5
   422  00001F                     passcodeCompare@storedCodeLenght:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x1E
   426  00001F                     	ds	1
   427  000020                     passcodeCompare@i:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x1F
   431  000020                     	ds	1
   432  000021                     passcodeCompare@validity:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x20
   436  000021                     	ds	1
   437  000022                     tblptru	equ	0xFF8
   438                           tblptrh	equ	0xFF7
   439                           tblptrl	equ	0xFF6
   440                           tablat	equ	0xFF5
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           postdec1	equ	0xFE5
   444                           fsr1l	equ	0xFE1
   445                           
   446                           ; 1 bytes @ 0x21
   447 ;;
   448 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   449 ;;
   450 ;; *************** function _main *****************
   451 ;; Defined at:
   452 ;;		line 300 in file "main.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;		None
   455 ;; Auto vars:     Size  Location     Type
   456 ;;  keypressArra   10    1[BANK0 ] unsigned char [10]
   457 ;;  currentKeypa    2   15[BANK0 ] struct .
   458 ;;  locker_num      1   14[BANK0 ] unsigned char 
   459 ;;  numOfKeysPre    1   13[BANK0 ] unsigned char 
   460 ;;  currentSyste    1   12[BANK0 ] enum E4105
   461 ;;  addr            1   11[BANK0 ] unsigned char 
   462 ;;  a               1    0[BANK0 ] unsigned char 
   463 ;; Return value:  Size  Location     Type
   464 ;;                  2  272[None  ] int 
   465 ;; Registers used:
   466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : 0/0
   469 ;;		On exit  : 0/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   472 ;;      Params:         0       0       0       0       0       0       0       0       0
   473 ;;      Locals:         0      17       0       0       0       0       0       0       0
   474 ;;      Temps:          0       0       0       0       0       0       0       0       0
   475 ;;      Totals:         0      17       0       0       0       0       0       0       0
   476 ;;Total ram usage:       17 bytes
   477 ;; Hardware stack levels required when called:    3
   478 ;; This function calls:
   479 ;;		_arr_to_num
   480 ;;		_check_lock_num_validity
   481 ;;		_check_password_presence
   482 ;;		_clear_keyArray
   483 ;;		_eepromWriteCode
   484 ;;		_getKey
   485 ;;		_initControllerIO
   486 ;;		_initKeypad
   487 ;;		_initStandbyTimer
   488 ;;		_passcodeCompare
   489 ;;		_readEEPROM
   490 ;;		_writeEEPROM
   491 ;; This function is called by:
   492 ;;		Startup code after reset
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text0
   497  000AF0                     __ptext0:
   498                           	opt stack 0
   499  000AF0                     _main:
   500                           	opt stack 28
   501                           
   502                           ;main.c: 302: keypadStatus currentKeypadStatus;
   503                           ;main.c: 303: systemState_t currentSystemState = NORMAL;
   504                           
   505                           ;incstack = 0
   506  000AF0  0E00               	movlw	0
   507  000AF2  0100               	movlb	0	; () banked
   508  000AF4  6FD0               	movwf	main@currentSystemState& (0+255),b
   509                           
   510                           ;main.c: 304: unsigned char keypressArray[10];
   511                           ;main.c: 305: unsigned char numOfKeysPressed = 0;
   512  000AF6  0E00               	movlw	0
   513  000AF8  6FD1               	movwf	main@numOfKeysPressed& (0+255),b
   514                           
   515                           ;main.c: 306: unsigned char locker_num = 0;
   516  000AFA  0E00               	movlw	0
   517  000AFC  6FD2               	movwf	main@locker_num& (0+255),b
   518                           
   519                           ;main.c: 307: unsigned char addr = 0;
   520  000AFE  0E00               	movlw	0
   521  000B00  6FCF               	movwf	main@addr& (0+255),b
   522                           
   523                           ; BSR set to: 0
   524                           ;main.c: 308: initControllerIO();
   525  000B02  ECCF  F007         	call	_initControllerIO	;wreg free
   526                           
   527                           ;main.c: 309: initKeypad();
   528  000B06  ECC0  F007         	call	_initKeypad	;wreg free
   529                           
   530                           ;main.c: 310: initStandbyTimer();
   531  000B0A  ECB8  F007         	call	_initStandbyTimer	;wreg free
   532                           
   533                           ;main.c: 312: INTCONbits.PEIE = 1;
   534  000B0E  8CF2               	bsf	intcon,6,c	;volatile
   535                           
   536                           ;main.c: 313: INTCONbits.GIE = 1;
   537  000B10  8EF2               	bsf	intcon,7,c	;volatile
   538                           
   539                           ;main.c: 326: clear_keyArray(keypressArray);
   540  000B12  0EC5               	movlw	low main@keypressArray
   541  000B14  6E13               	movwf	clear_keyArray@arr,c
   542  000B16  0E00               	movlw	high main@keypressArray
   543  000B18  6E14               	movwf	clear_keyArray@arr+1,c
   544  000B1A  EC97  F007         	call	_clear_keyArray	;wreg free
   545                           
   546                           ;main.c: 328: writeEEPROM(0, 0x01);
   547  000B1E  0E01               	movlw	1
   548  000B20  6E13               	movwf	writeEEPROM@datas,c
   549  000B22  0E00               	movlw	0
   550  000B24  EC69  F007         	call	_writeEEPROM
   551                           
   552                           ;main.c: 329: writeEEPROM(1, 0x01);
   553  000B28  0E01               	movlw	1
   554  000B2A  6E13               	movwf	writeEEPROM@datas,c
   555  000B2C  0E01               	movlw	1
   556  000B2E  EC69  F007         	call	_writeEEPROM
   557                           
   558                           ;main.c: 330: char a = readEEPROM(0);
   559  000B32  0E00               	movlw	0
   560  000B34  ECC6  F007         	call	_readEEPROM
   561  000B38  0100               	movlb	0	; () banked
   562  000B3A  6FC4               	movwf	main@a& (0+255),b
   563  000B3C                     
   564                           ; BSR set to: 0
   565                           ;main.c: 333: {
   566                           ;main.c: 335: getKey(&currentKeypadStatus);
   567                           
   568                           ; BSR set to: 0
   569  000B3C  0ED3               	movlw	low main@currentKeypadStatus
   570  000B3E  6E13               	movwf	getKey@KeypadStatus,c
   571  000B40  0E00               	movlw	high main@currentKeypadStatus
   572  000B42  6E14               	movwf	getKey@KeypadStatus+1,c
   573  000B44  EC08  F004         	call	_getKey	;wreg free
   574                           
   575                           ;main.c: 337: if(currentKeypadStatus.keyPressIndicator == 1)
   576  000B48  0100               	movlb	0	; () banked
   577  000B4A  A1D3               	btfss	main@currentKeypadStatus& (0+255),0,b
   578  000B4C  D7F7               	goto	l273
   579                           
   580                           ; BSR set to: 0
   581                           ;main.c: 338: {
   582                           ;main.c: 339: if(currentKeypadStatus.keyPressed == SP_FUNC_A)
   583  000B4E  0E0B               	movlw	11
   584  000B50  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   585  000B52  B4D8               	btfsc	status,2,c
   586  000B54  D7F3               	goto	l273
   587                           
   588                           ; BSR set to: 0
   589                           ;main.c: 343: else if(currentKeypadStatus.keyPressed == SP_FUNC_B)
   590                           
   591                           ; BSR set to: 0
   592                           
   593                           ; BSR set to: 0
   594                           ;main.c: 340: {
   595                           ;main.c: 342: }
   596  000B56  0E0C               	movlw	12
   597  000B58  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   598  000B5A  B4D8               	btfsc	status,2,c
   599  000B5C  D7EF               	goto	l273
   600                           
   601                           ; BSR set to: 0
   602                           ;main.c: 347: else if(currentKeypadStatus.keyPressed == SP_FUNC_ENTER)
   603                           
   604                           ; BSR set to: 0
   605                           
   606                           ; BSR set to: 0
   607                           ;main.c: 344: {
   608                           ;main.c: 346: }
   609  000B5E  0E0F               	movlw	15
   610  000B60  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   611  000B62  A4D8               	btfss	status,2,c
   612  000B64  D043               	goto	l279
   613                           
   614                           ; BSR set to: 0
   615                           ;main.c: 348: {
   616                           ;main.c: 350: if(currentSystemState == NORMAL)
   617  000B66  51D0               	movf	main@currentSystemState& (0+255),w,b
   618  000B68  A4D8               	btfss	status,2,c
   619  000B6A  D01C               	goto	l280
   620                           
   621                           ; BSR set to: 0
   622                           ;main.c: 351: {
   623                           ;main.c: 353: if(0 == arr_to_num(keypressArray, numOfKeysPressed, &locker_num))
   624  000B6C  0EC5               	movlw	low main@keypressArray
   625  000B6E  6E13               	movwf	arr_to_num@arr,c
   626  000B70  0E00               	movlw	high main@keypressArray
   627  000B72  6E14               	movwf	arr_to_num@arr+1,c
   628  000B74  C0D1  F015         	movff	main@numOfKeysPressed,arr_to_num@num_of_elements
   629  000B78  0ED2               	movlw	low main@locker_num
   630  000B7A  6E16               	movwf	arr_to_num@number,c
   631  000B7C  0E00               	movlw	high main@locker_num
   632  000B7E  6E17               	movwf	arr_to_num@number+1,c
   633  000B80  EC95  F006         	call	_arr_to_num	;wreg free
   634  000B84  0900               	iorlw	0
   635  000B86  B4D8               	btfsc	status,2,c
   636  000B88  EF07  F000         	goto	start
   637                           
   638                           ;main.c: 359: else if(0 == check_lock_num_validity(locker_num))
   639                           
   640                           ;main.c: 357: }
   641                           
   642                           ;main.c: 354: {
   643                           ;main.c: 356: break;
   644  000B8C  0100               	movlb	0	; () banked
   645  000B8E  51D2               	movf	main@locker_num& (0+255),w,b
   646  000B90  ECA9  F007         	call	_check_lock_num_validity
   647  000B94  0900               	iorlw	0
   648  000B96  B4D8               	btfsc	status,2,c
   649  000B98  EF07  F000         	goto	start
   650                           
   651                           ;main.c: 364: else
   652                           ;main.c: 365: {
   653                           ;main.c: 366: currentSystemState = UID_ENTERED;
   654                           
   655                           ;main.c: 363: }
   656                           
   657                           ;main.c: 360: {
   658                           ;main.c: 362: break;
   659  000B9C  0E01               	movlw	1
   660  000B9E  0100               	movlb	0	; () banked
   661  000BA0  6FD0               	movwf	main@currentSystemState& (0+255),b
   662                           
   663                           ; BSR set to: 0
   664                           ;main.c: 367: }
   665                           ;main.c: 368: }
   666                           
   667                           ; BSR set to: 0
   668  000BA2  D01D               	goto	l2292
   669  000BA4                     l280:
   670                           
   671                           ; BSR set to: 0
   672                           ;main.c: 369: else if(currentSystemState == UID_ENTERED)
   673                           
   674                           ; BSR set to: 0
   675  000BA4  05D0               	decf	main@currentSystemState& (0+255),w,b
   676  000BA6  A4D8               	btfss	status,2,c
   677  000BA8  D01A               	goto	l2292
   678                           
   679                           ; BSR set to: 0
   680                           ;main.c: 370: {
   681                           ;main.c: 372: if(0 == check_password_presence(locker_num))
   682  000BAA  51D2               	movf	main@locker_num& (0+255),w,b
   683  000BAC  EC82  F007         	call	_check_password_presence
   684  000BB0  0900               	iorlw	0
   685  000BB2  B4D8               	btfsc	status,2,c
   686  000BB4  EF07  F000         	goto	start
   687                           
   688                           ;main.c: 377: else
   689                           ;main.c: 378: {
   690                           ;main.c: 379: addr = (locker_num - 1) * 10;
   691                           
   692                           ;main.c: 376: }
   693                           
   694                           ;main.c: 373: {
   695                           ;main.c: 375: break;
   696  000BB8  0100               	movlb	0	; () banked
   697  000BBA  05D2               	decf	main@locker_num& (0+255),w,b
   698  000BBC  0D0A               	mullw	10
   699  000BBE  CFF3 F0CF          	movff	prodl,main@addr
   700                           
   701                           ; BSR set to: 0
   702                           ;main.c: 380: if(0 == passcodeCompare(keypressArray, numOfKeysPressed, addr))
   703  000BC2  0EC5               	movlw	low main@keypressArray
   704  000BC4  6E14               	movwf	passcodeCompare@keybuffer1,c
   705  000BC6  0E00               	movlw	high main@keypressArray
   706  000BC8  6E15               	movwf	passcodeCompare@keybuffer1+1,c
   707  000BCA  C0D1  F016         	movff	main@numOfKeysPressed,passcodeCompare@compareLenght
   708  000BCE  C0CF  F017         	movff	main@addr,passcodeCompare@compareAddr
   709  000BD2  ECE7  F006         	call	_passcodeCompare	;wreg free
   710  000BD6  0900               	iorlw	0
   711  000BD8  B4D8               	btfsc	status,2,c
   712  000BDA  EF07  F000         	goto	start
   713  000BDE                     l2292:
   714                           
   715                           ;main.c: 388: }
   716                           ;main.c: 389: }
   717                           ;main.c: 390: }
   718                           ;main.c: 391: clear_keyArray(keypressArray);
   719                           
   720                           ;main.c: 385: else
   721                           ;main.c: 386: {
   722                           
   723                           ;main.c: 384: }
   724  000BDE  0EC5               	movlw	low main@keypressArray
   725  000BE0  6E13               	movwf	clear_keyArray@arr,c
   726  000BE2  0E00               	movlw	high main@keypressArray
   727  000BE4  6E14               	movwf	clear_keyArray@arr+1,c
   728  000BE6  EC97  F007         	call	_clear_keyArray	;wreg free
   729  000BEA  D027               	goto	l2316
   730  000BEC                     l279:
   731                           
   732                           ; BSR set to: 0
   733                           ;main.c: 394: else if(currentKeypadStatus.keyPressed == SP_FUNC_OFF)
   734                           
   735                           ; BSR set to: 0
   736  000BEC  0E0E               	movlw	14
   737  000BEE  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   738  000BF0  B4D8               	btfsc	status,2,c
   739  000BF2  D7A4               	goto	l273
   740                           
   741                           ; BSR set to: 0
   742                           ;main.c: 398: else if(currentKeypadStatus.keyPressed == SP_FUNC_ON)
   743                           
   744                           ; BSR set to: 0
   745                           
   746                           ; BSR set to: 0
   747                           ;main.c: 395: {
   748                           ;main.c: 397: }
   749  000BF4  0E0D               	movlw	13
   750  000BF6  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   751  000BF8  A4D8               	btfss	status,2,c
   752  000BFA  D022               	goto	l295
   753                           
   754                           ; BSR set to: 0
   755                           ;main.c: 399: {
   756                           ;main.c: 400: if(currentSystemState == UID_ENTERED)
   757  000BFC  05D0               	decf	main@currentSystemState& (0+255),w,b
   758  000BFE  A4D8               	btfss	status,2,c
   759  000C00  D016               	goto	l2312
   760                           
   761                           ; BSR set to: 0
   762                           ;main.c: 401: {
   763                           ;main.c: 403: if(0 == check_password_presence(locker_num))
   764  000C02  51D2               	movf	main@locker_num& (0+255),w,b
   765  000C04  EC82  F007         	call	_check_password_presence
   766  000C08  0900               	iorlw	0
   767  000C0A  A4D8               	btfss	status,2,c
   768  000C0C  D010               	goto	l2312
   769                           
   770                           ;main.c: 404: {
   771                           ;main.c: 406: addr = (locker_num - 1) * 10;
   772  000C0E  0100               	movlb	0	; () banked
   773  000C10  05D2               	decf	main@locker_num& (0+255),w,b
   774  000C12  0D0A               	mullw	10
   775  000C14  CFF3 F0CF          	movff	prodl,main@addr
   776                           
   777                           ; BSR set to: 0
   778                           ;main.c: 407: eepromWriteCode(addr, numOfKeysPressed, keypressArray);
   779  000C18  C0D1  F016         	movff	main@numOfKeysPressed,eepromWriteCode@codeLenght
   780  000C1C  0EC5               	movlw	low main@keypressArray
   781  000C1E  6E17               	movwf	eepromWriteCode@codeBuffer,c
   782  000C20  0E00               	movlw	high main@keypressArray
   783  000C22  6E18               	movwf	eepromWriteCode@codeBuffer+1,c
   784  000C24  51CF               	movf	main@addr& (0+255),w,b
   785  000C26  EC4C  F007         	call	_eepromWriteCode
   786                           
   787                           ;main.c: 408: break;
   788  000C2A  EF07  F000         	goto	start
   789  000C2E                     l2312:
   790                           
   791                           ;main.c: 414: }
   792                           ;main.c: 415: }
   793                           ;main.c: 416: clear_keyArray(keypressArray);
   794                           
   795                           ;main.c: 410: else
   796                           ;main.c: 411: {
   797                           
   798                           ;main.c: 409: }
   799  000C2E  0EC5               	movlw	low main@keypressArray
   800  000C30  6E13               	movwf	clear_keyArray@arr,c
   801  000C32  0E00               	movlw	high main@keypressArray
   802  000C34  6E14               	movwf	clear_keyArray@arr+1,c
   803  000C36  EC97  F007         	call	_clear_keyArray	;wreg free
   804  000C3A                     l2316:
   805                           
   806                           ;main.c: 417: numOfKeysPressed = 0;
   807  000C3A  0E00               	movlw	0
   808  000C3C  0100               	movlb	0	; () banked
   809  000C3E  D00F               	goto	L1
   810  000C40                     l295:
   811                           
   812                           ; BSR set to: 0
   813                           ;main.c: 419: else
   814                           ;main.c: 420: {
   815                           ;main.c: 421: keypressArray[numOfKeysPressed++] = currentKeypadStatus.keyPressed;
   816                           
   817                           ; BSR set to: 0
   818  000C40  51D1               	movf	main@numOfKeysPressed& (0+255),w,b
   819  000C42  0D01               	mullw	1
   820  000C44  0EC5               	movlw	low main@keypressArray
   821  000C46  24F3               	addwf	prodl,w,c
   822  000C48  6ED9               	movwf	fsr2l,c
   823  000C4A  0E00               	movlw	high main@keypressArray
   824  000C4C  20F4               	addwfc	prodh,w,c
   825  000C4E  6EDA               	movwf	fsr2h,c
   826  000C50  C0D4  FFDF         	movff	main@currentKeypadStatus+1,indf2
   827                           
   828                           ; BSR set to: 0
   829  000C54  2BD1               	incf	main@numOfKeysPressed& (0+255),f,b
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 422: if(numOfKeysPressed > 10)
   833  000C56  0E0A               	movlw	10
   834  000C58  65D1               	cpfsgt	main@numOfKeysPressed& (0+255),b
   835  000C5A  D770               	goto	l273
   836                           
   837                           ; BSR set to: 0
   838                           ;main.c: 423: {
   839                           ;main.c: 424: numOfKeysPressed = 0;
   840  000C5C  0E00               	movlw	0
   841  000C5E                     L1:
   842  000C5E  6FD1               	movwf	main@numOfKeysPressed& (0+255),b
   843                           
   844                           ; BSR set to: 0
   845                           
   846                           ; BSR set to: 0
   847                           
   848                           ; BSR set to: 0
   849                           
   850                           ; BSR set to: 0
   851                           
   852                           ; BSR set to: 0
   853                           
   854                           ; BSR set to: 0
   855                           
   856                           ; BSR set to: 0
   857                           
   858                           ; BSR set to: 0
   859  000C60  D76D               	goto	l273
   860  000C62                     __end_of_main:
   861                           	opt stack 0
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           prodh	equ	0xFF4
   867                           prodl	equ	0xFF3
   868                           intcon	equ	0xFF2
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           postdec1	equ	0xFE5
   872                           fsr1l	equ	0xFE1
   873                           indf2	equ	0xFDF
   874                           fsr2h	equ	0xFDA
   875                           fsr2l	equ	0xFD9
   876                           status	equ	0xFD8
   877                           
   878 ;; *************** function _passcodeCompare *****************
   879 ;; Defined at:
   880 ;;		line 651 in file "main.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  keybuffer1      2   19[COMRAM] PTR unsigned char 
   883 ;;		 -> main@keypressArray(10), 
   884 ;;  compareLengh    1   21[COMRAM] unsigned char 
   885 ;;  compareAddr     1   22[COMRAM] unsigned char 
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  i               1   31[COMRAM] unsigned char 
   888 ;;  validity        1   32[COMRAM] unsigned char 
   889 ;;  storedCodeLe    1   30[COMRAM] unsigned char 
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      unsigned char 
   892 ;; Registers used:
   893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   899 ;;      Params:         4       0       0       0       0       0       0       0       0
   900 ;;      Locals:         3       0       0       0       0       0       0       0       0
   901 ;;      Temps:          7       0       0       0       0       0       0       0       0
   902 ;;      Totals:        14       0       0       0       0       0       0       0       0
   903 ;;Total ram usage:       14 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    2
   906 ;; This function calls:
   907 ;;		_readEEPROM
   908 ;; This function is called by:
   909 ;;		_main
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text1
   914  000DCE                     __ptext1:
   915                           	opt stack 0
   916  000DCE                     _passcodeCompare:
   917                           	opt stack 28
   918                           
   919                           ;main.c: 653: unsigned char validity = 0;
   920                           
   921                           ;incstack = 0
   922  000DCE  0E00               	movlw	0
   923  000DD0  6E21               	movwf	passcodeCompare@validity,c
   924                           
   925                           ;main.c: 654: unsigned char storedCodeLenght = readEEPROM(compareAddr);
   926  000DD2  5017               	movf	passcodeCompare@compareAddr,w,c
   927  000DD4  ECC6  F007         	call	_readEEPROM
   928  000DD8  6E1F               	movwf	passcodeCompare@storedCodeLenght,c
   929                           
   930                           ;main.c: 655: if(compareLenght != storedCodeLenght)
   931  000DDA  501F               	movf	passcodeCompare@storedCodeLenght,w,c
   932  000DDC  1816               	xorwf	passcodeCompare@compareLenght,w,c
   933  000DDE  B4D8               	btfsc	status,2,c
   934  000DE0  D004               	goto	l305
   935  000DE2  D018               	goto	l309
   936  000DE4                     l2204:
   937                           
   938                           ;main.c: 658: validity = 0;
   939  000DE4  0E00               	movlw	0
   940  000DE6  6E21               	movwf	passcodeCompare@validity,c
   941                           
   942                           ;main.c: 660: }
   943  000DE8  D030               	goto	u1440
   944  000DEA                     l305:
   945                           
   946                           ;main.c: 661: else
   947                           ;main.c: 662: {
   948                           ;main.c: 663: for(unsigned char i = 0; i <= (compareLenght - 1); i++)
   949  000DEA  0E00               	movlw	0
   950  000DEC  6E20               	movwf	passcodeCompare@i,c
   951  000DEE  D015               	goto	l307
   952  000DF0                     
   953                           ;main.c: 664: {
   954                           ;main.c: 665: if(*keybuffer1 == readEEPROM(++compareAddr))
   955  000DF0  C014  FFD9         	movff	passcodeCompare@keybuffer1,fsr2l
   956  000DF4  C015  FFDA         	movff	passcodeCompare@keybuffer1+1,fsr2h
   957  000DF8  2A17               	incf	passcodeCompare@compareAddr,f,c
   958  000DFA  5017               	movf	passcodeCompare@compareAddr,w,c
   959  000DFC  ECC6  F007         	call	_readEEPROM
   960  000E00  6E19               	movwf	(??_passcodeCompare+1)& (0+255),c
   961  000E02  50DE               	movf	postinc2,w,c
   962  000E04  1819               	xorwf	??_passcodeCompare+1,w,c
   963  000E06  A4D8               	btfss	status,2,c
   964  000E08  D005               	goto	l309
   965                           
   966                           ;main.c: 666: {
   967                           ;main.c: 667: keybuffer1++;
   968  000E0A  4A14               	infsnz	passcodeCompare@keybuffer1,f,c
   969  000E0C  2A15               	incf	passcodeCompare@keybuffer1+1,f,c
   970                           
   971                           ;main.c: 668: validity = 1;
   972  000E0E  0E01               	movlw	1
   973  000E10  6E21               	movwf	passcodeCompare@validity,c
   974                           
   975                           ;main.c: 669: }
   976  000E12  D002               	goto	l310
   977  000E14                     l309:
   978                           
   979                           ;main.c: 670: else
   980                           ;main.c: 671: {
   981                           ;main.c: 672: ((volatile _io_reg*)&systemStateReg2)->bit2 = 0;
   982  000E14  943B               	bcf	_systemStateReg2,2,c	;volatile
   983  000E16  D7E6               	goto	l2204
   984  000E18                     l310:
   985  000E18  2A20               	incf	passcodeCompare@i,f,c
   986  000E1A                     l307:
   987  000E1A  5020               	movf	passcodeCompare@i,w,c
   988  000E1C  6E18               	movwf	??_passcodeCompare& (0+255),c
   989  000E1E  6A19               	clrf	(??_passcodeCompare+1)& (0+255),c
   990  000E20  0EFF               	movlw	255
   991  000E22  6E1A               	movwf	(??_passcodeCompare+2)& (0+255),c
   992  000E24  0EFF               	movlw	255
   993  000E26  6E1B               	movwf	(??_passcodeCompare+3)& (0+255),c
   994  000E28  5016               	movf	passcodeCompare@compareLenght,w,c
   995  000E2A  6E1C               	movwf	(??_passcodeCompare+4)& (0+255),c
   996  000E2C  6A1D               	clrf	(??_passcodeCompare+5)& (0+255),c
   997  000E2E  501A               	movf	??_passcodeCompare+2,w,c
   998  000E30  261C               	addwf	??_passcodeCompare+4,f,c
   999  000E32  501B               	movf	??_passcodeCompare+3,w,c
  1000  000E34  221D               	addwfc	??_passcodeCompare+5,f,c
  1001  000E36  5018               	movf	??_passcodeCompare,w,c
  1002  000E38  5C1C               	subwf	??_passcodeCompare+4,w,c
  1003  000E3A  501D               	movf	??_passcodeCompare+5,w,c
  1004  000E3C  0A80               	xorlw	128
  1005  000E3E  6E1E               	movwf	(??_passcodeCompare+6)& (0+255),c
  1006  000E40  5019               	movf	??_passcodeCompare+1,w,c
  1007  000E42  0A80               	xorlw	128
  1008  000E44  581E               	subwfb	(??_passcodeCompare+6)& (0+255),w,c
  1009  000E46  B0D8               	btfsc	status,0,c
  1010  000E48  D7D3               	goto	l308
  1011  000E4A                     u1440:
  1012                           
  1013                           ;main.c: 675: }
  1014                           ;main.c: 676: }
  1015                           ;main.c: 677: }
  1016                           ;main.c: 678: return validity;
  1017  000E4A  5021               	movf	passcodeCompare@validity,w,c
  1018  000E4C  0012               	return	
  1019  000E4E                     __end_of_passcodeCompare:
  1020                           	opt stack 0
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           prodh	equ	0xFF4
  1026                           prodl	equ	0xFF3
  1027                           intcon	equ	0xFF2
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           postdec1	equ	0xFE5
  1031                           fsr1l	equ	0xFE1
  1032                           indf2	equ	0xFDF
  1033                           postinc2	equ	0xFDE
  1034                           fsr2h	equ	0xFDA
  1035                           fsr2l	equ	0xFD9
  1036                           status	equ	0xFD8
  1037                           
  1038 ;; *************** function _initStandbyTimer *****************
  1039 ;; Defined at:
  1040 ;;		line 96 in file "timer.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;		None
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;		None
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, status,2
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1054 ;;      Params:         0       0       0       0       0       0       0       0       0
  1055 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1057 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1058 ;;Total ram usage:        0 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    1
  1061 ;; This function calls:
  1062 ;;		Nothing
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text2
  1069  000F70                     __ptext2:
  1070                           	opt stack 0
  1071  000F70                     _initStandbyTimer:
  1072                           	opt stack 29
  1073                           
  1074                           ;timer.c: 98: T1CONbits.T1CKPS0 = 1;
  1075                           
  1076                           ;incstack = 0
  1077  000F70  88CD               	bsf	4045,4,c	;volatile
  1078                           
  1079                           ;timer.c: 99: T1CONbits.T1CKPS1 = 1;
  1080  000F72  8ACD               	bsf	4045,5,c	;volatile
  1081                           
  1082                           ;timer.c: 100: TMR1 = 0;
  1083  000F74  0E00               	movlw	0
  1084  000F76  6ECF               	movwf	4047,c	;volatile
  1085  000F78  0E00               	movlw	0
  1086  000F7A  6ECE               	movwf	4046,c	;volatile
  1087                           
  1088                           ;timer.c: 101: PIE1bits.TMR1IE = 1;
  1089  000F7C  809D               	bsf	3997,0,c	;volatile
  1090  000F7E  0012               	return		;funcret
  1091  000F80                     __end_of_initStandbyTimer:
  1092                           	opt stack 0
  1093                           tblptru	equ	0xFF8
  1094                           tblptrh	equ	0xFF7
  1095                           tblptrl	equ	0xFF6
  1096                           tablat	equ	0xFF5
  1097                           prodh	equ	0xFF4
  1098                           prodl	equ	0xFF3
  1099                           intcon	equ	0xFF2
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           postdec1	equ	0xFE5
  1103                           fsr1l	equ	0xFE1
  1104                           indf2	equ	0xFDF
  1105                           postinc2	equ	0xFDE
  1106                           fsr2h	equ	0xFDA
  1107                           fsr2l	equ	0xFD9
  1108                           status	equ	0xFD8
  1109                           
  1110 ;; *************** function _initKeypad *****************
  1111 ;; Defined at:
  1112 ;;		line 14 in file "Keypad4X4.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, status,2
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1126 ;;      Params:         0       0       0       0       0       0       0       0       0
  1127 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1129 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1130 ;;Total ram usage:        0 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:    1
  1133 ;; This function calls:
  1134 ;;		Nothing
  1135 ;; This function is called by:
  1136 ;;		_main
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           	psect	text3
  1141  000F80                     __ptext3:
  1142                           	opt stack 0
  1143  000F80                     _initKeypad:
  1144                           	opt stack 29
  1145                           
  1146                           ;Keypad4X4.c: 16: TRISB = 0x0F;
  1147                           
  1148                           ;incstack = 0
  1149  000F80  0E0F               	movlw	15
  1150  000F82  6E93               	movwf	3987,c	;volatile
  1151                           
  1152                           ;Keypad4X4.c: 17: LATB = 0xFF;
  1153  000F84  688A               	setf	3978,c	;volatile
  1154                           
  1155                           ;Keypad4X4.c: 18: INTCON2bits.RBPU = 0;
  1156  000F86  9EF1               	bcf	intcon2,7,c	;volatile
  1157                           
  1158                           ;Keypad4X4.c: 19: INTCONbits.RBIE = 1;
  1159  000F88  86F2               	bsf	intcon,3,c	;volatile
  1160  000F8A  0012               	return		;funcret
  1161  000F8C                     __end_of_initKeypad:
  1162                           	opt stack 0
  1163                           tblptru	equ	0xFF8
  1164                           tblptrh	equ	0xFF7
  1165                           tblptrl	equ	0xFF6
  1166                           tablat	equ	0xFF5
  1167                           prodh	equ	0xFF4
  1168                           prodl	equ	0xFF3
  1169                           intcon	equ	0xFF2
  1170                           intcon2	equ	0xFF1
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postdec1	equ	0xFE5
  1174                           fsr1l	equ	0xFE1
  1175                           indf2	equ	0xFDF
  1176                           postinc2	equ	0xFDE
  1177                           fsr2h	equ	0xFDA
  1178                           fsr2l	equ	0xFD9
  1179                           status	equ	0xFD8
  1180                           
  1181 ;; *************** function _initControllerIO *****************
  1182 ;; Defined at:
  1183 ;;		line 251 in file "main.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;		None
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		None
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1197 ;;      Params:         0       0       0       0       0       0       0       0       0
  1198 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1200 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1201 ;;Total ram usage:        0 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; Hardware stack levels required when called:    1
  1204 ;; This function calls:
  1205 ;;		Nothing
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text4
  1212  000F9E                     __ptext4:
  1213                           	opt stack 0
  1214  000F9E                     _initControllerIO:
  1215                           	opt stack 29
  1216                           
  1217                           ;incstack = 0
  1218  000F9E  0012               	return		;funcret
  1219  000FA0                     __end_of_initControllerIO:
  1220                           	opt stack 0
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           prodh	equ	0xFF4
  1226                           prodl	equ	0xFF3
  1227                           intcon	equ	0xFF2
  1228                           intcon2	equ	0xFF1
  1229                           postinc0	equ	0xFEE
  1230                           wreg	equ	0xFE8
  1231                           postdec1	equ	0xFE5
  1232                           fsr1l	equ	0xFE1
  1233                           indf2	equ	0xFDF
  1234                           postinc2	equ	0xFDE
  1235                           fsr2h	equ	0xFDA
  1236                           fsr2l	equ	0xFD9
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _getKey *****************
  1240 ;; Defined at:
  1241 ;;		line 28 in file "Keypad4X4.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  KeypadStatus    2   18[COMRAM] PTR struct .
  1244 ;;		 -> main@currentKeypadStatus(2), buttonPressedIndicator@KeypadStatus(2), 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  buttonPresse    1   21[COMRAM] enum E3790
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1256 ;;      Params:         2       0       0       0       0       0       0       0       0
  1257 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1258 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1259 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1260 ;;Total ram usage:        4 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    1
  1263 ;; This function calls:
  1264 ;;		Nothing
  1265 ;; This function is called by:
  1266 ;;		_main
  1267 ;;		_buttonPressedIndicator
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           	psect	text5
  1272  000810                     __ptext5:
  1273                           	opt stack 0
  1274  000810                     _getKey:
  1275                           	opt stack 29
  1276                           
  1277                           ;Keypad4X4.c: 30: enum button buttonPressed;
  1278                           ;Keypad4X4.c: 32: LATB = 0x7F;
  1279                           
  1280                           ;incstack = 0
  1281  000810  0E7F               	movlw	127
  1282  000812  6E8A               	movwf	3978,c	;volatile
  1283                           
  1284                           ;Keypad4X4.c: 33: if ((PORTB & 0x08) == 0x00)
  1285  000814  B681               	btfsc	3969,3,c	;volatile
  1286  000816  D016               	goto	l47
  1287                           
  1288                           ;Keypad4X4.c: 34: {
  1289                           ;Keypad4X4.c: 35: _delay((unsigned long)((5)*(4000000/4000.0)));
  1290  000818  0E07               	movlw	7
  1291  00081A  6E15               	movwf	??_getKey& (0+255),c
  1292  00081C  0E7D               	movlw	125
  1293  00081E                     u1607:
  1294  00081E  2EE8               	decfsz	wreg,f,c
  1295  000820  D7FE               	bra	u1607
  1296  000822  2E15               	decfsz	??_getKey& (0+255),f,c
  1297  000824  D7FC               	bra	u1607
  1298  000826  F000               	nop	
  1299                           
  1300                           ;Keypad4X4.c: 36: if ((PORTB & 0x08) == 0x00)
  1301  000828  B681               	btfsc	3969,3,c	;volatile
  1302  00082A  D04A               	goto	l58
  1303                           
  1304                           ;Keypad4X4.c: 37: {
  1305                           ;Keypad4X4.c: 38: buttonPressed = button_1;
  1306  00082C  0E01               	movlw	1
  1307  00082E                     L2:
  1308  00082E  6E16               	movwf	getKey@buttonPressed,c
  1309  000830  D017               	goto	l1932
  1310  000832                     l1922:
  1311                           
  1312                           ;Keypad4X4.c: 40: KeypadStatus->keyPressed = buttonPressed;
  1313  000832  EE20 F001          	lfsr	2,1
  1314  000836  5013               	movf	getKey@KeypadStatus,w,c
  1315  000838  26D9               	addwf	fsr2l,f,c
  1316  00083A  5014               	movf	getKey@KeypadStatus+1,w,c
  1317  00083C  22DA               	addwfc	fsr2h,f,c
  1318  00083E  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1319                           
  1320                           ;Keypad4X4.c: 41: return;
  1321  000842  0012               	return	
  1322  000844                     l47:
  1323                           
  1324                           ;Keypad4X4.c: 45: else if ((PORTB & 0x04) == 0x00)
  1325  000844  B481               	btfsc	3969,2,c	;volatile
  1326  000846  D012               	goto	l51
  1327                           
  1328                           ;Keypad4X4.c: 46: {
  1329                           ;Keypad4X4.c: 47: _delay((unsigned long)((5)*(4000000/4000.0)));
  1330  000848  0E07               	movlw	7
  1331  00084A  6E15               	movwf	??_getKey& (0+255),c
  1332  00084C  0E7D               	movlw	125
  1333  00084E                     u1617:
  1334  00084E  2EE8               	decfsz	wreg,f,c
  1335  000850  D7FE               	bra	u1617
  1336  000852  2E15               	decfsz	??_getKey& (0+255),f,c
  1337  000854  D7FC               	bra	u1617
  1338  000856  F000               	nop	
  1339                           
  1340                           ;Keypad4X4.c: 48: if ((PORTB & 0x04) == 0x00)
  1341  000858  B481               	btfsc	3969,2,c	;volatile
  1342  00085A  D032               	goto	l58
  1343                           
  1344                           ;Keypad4X4.c: 49: {
  1345                           ;Keypad4X4.c: 50: buttonPressed = button_2;
  1346  00085C  0E02               	movlw	2
  1347  00085E  D7E7               	goto	L2
  1348  000860                     l1932:
  1349                           
  1350                           ;Keypad4X4.c: 51: KeypadStatus->keyPressIndicator = 1;
  1351  000860  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1352  000864  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1353  000868  80DF               	bsf	indf2,0,c
  1354  00086A  D7E3               	goto	l1922
  1355  00086C                     l51:
  1356                           
  1357                           ;Keypad4X4.c: 57: else if ((PORTB & 0x02) == 0x00)
  1358  00086C  B281               	btfsc	3969,1,c	;volatile
  1359  00086E  D00C               	goto	l54
  1360                           
  1361                           ;Keypad4X4.c: 58: {
  1362                           ;Keypad4X4.c: 59: _delay((unsigned long)((5)*(4000000/4000.0)));
  1363  000870  0E07               	movlw	7
  1364  000872  6E15               	movwf	??_getKey& (0+255),c
  1365  000874  0E7D               	movlw	125
  1366  000876                     u1627:
  1367  000876  2EE8               	decfsz	wreg,f,c
  1368  000878  D7FE               	bra	u1627
  1369  00087A  2E15               	decfsz	??_getKey& (0+255),f,c
  1370  00087C  D7FC               	bra	u1627
  1371  00087E  F000               	nop	
  1372                           
  1373                           ;Keypad4X4.c: 60: if ((PORTB & 0x02) == 0x00)
  1374  000880  B281               	btfsc	3969,1,c	;volatile
  1375  000882  D01E               	goto	l58
  1376                           
  1377                           ;Keypad4X4.c: 61: {
  1378                           ;Keypad4X4.c: 62: buttonPressed = button_3;
  1379  000884  0E03               	movlw	3
  1380  000886  D7D3               	goto	L2
  1381  000888                     l54:
  1382                           
  1383                           ;Keypad4X4.c: 69: else if ((PORTB & 0x01) == 0x00)
  1384  000888  B081               	btfsc	3969,0,c	;volatile
  1385  00088A  D01A               	goto	l58
  1386                           
  1387                           ;Keypad4X4.c: 70: {
  1388                           ;Keypad4X4.c: 71: _delay((unsigned long)((5)*(4000000/4000.0)));
  1389  00088C  0E07               	movlw	7
  1390  00088E  6E15               	movwf	??_getKey& (0+255),c
  1391  000890  0E7D               	movlw	125
  1392  000892                     u1637:
  1393  000892  2EE8               	decfsz	wreg,f,c
  1394  000894  D7FE               	bra	u1637
  1395  000896  2E15               	decfsz	??_getKey& (0+255),f,c
  1396  000898  D7FC               	bra	u1637
  1397  00089A  F000               	nop	
  1398                           
  1399                           ;Keypad4X4.c: 72: if ((PORTB & 0x01) == 0x00)
  1400  00089C  B081               	btfsc	3969,0,c	;volatile
  1401  00089E  D010               	goto	l58
  1402                           
  1403                           ;Keypad4X4.c: 73: {
  1404                           ;Keypad4X4.c: 74: buttonPressed = NO_KEY_TUNE;
  1405  0008A0  0E0A               	movlw	10
  1406  0008A2  6E16               	movwf	getKey@buttonPressed,c
  1407                           
  1408                           ;Keypad4X4.c: 75: KeypadStatus->keyPressIndicator = 1;
  1409  0008A4  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1410  0008A8  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1411  0008AC  80DF               	bsf	indf2,0,c
  1412                           
  1413                           ;Keypad4X4.c: 76: KeypadStatus->keyPressed = buttonPressed;
  1414  0008AE  EE20 F001          	lfsr	2,1
  1415  0008B2  5013               	movf	getKey@KeypadStatus,w,c
  1416  0008B4  26D9               	addwf	fsr2l,f,c
  1417  0008B6  5014               	movf	getKey@KeypadStatus+1,w,c
  1418  0008B8  22DA               	addwfc	fsr2h,f,c
  1419  0008BA  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1420                           
  1421                           ;Keypad4X4.c: 77: return;
  1422  0008BE  0012               	return	
  1423  0008C0                     l58:
  1424                           
  1425                           ;Keypad4X4.c: 78: }
  1426                           ;Keypad4X4.c: 79: }
  1427                           ;Keypad4X4.c: 81: LATB = 0xBF;
  1428  0008C0  0EBF               	movlw	191
  1429  0008C2  6E8A               	movwf	3978,c	;volatile
  1430                           
  1431                           ;Keypad4X4.c: 82: if ((PORTB & 0x08) == 0x00)
  1432  0008C4  B681               	btfsc	3969,3,c	;volatile
  1433  0008C6  D014               	goto	l59
  1434                           
  1435                           ;Keypad4X4.c: 83: {
  1436                           ;Keypad4X4.c: 84: _delay((unsigned long)((5)*(4000000/4000.0)));
  1437  0008C8  0E07               	movlw	7
  1438  0008CA  6E15               	movwf	??_getKey& (0+255),c
  1439  0008CC  0E7D               	movlw	125
  1440  0008CE                     u1647:
  1441  0008CE  2EE8               	decfsz	wreg,f,c
  1442  0008D0  D7FE               	bra	u1647
  1443  0008D2  2E15               	decfsz	??_getKey& (0+255),f,c
  1444  0008D4  D7FC               	bra	u1647
  1445  0008D6  F000               	nop	
  1446                           
  1447                           ;Keypad4X4.c: 85: buttonPressed = button_4;
  1448  0008D8  0E04               	movlw	4
  1449  0008DA                     L3:
  1450  0008DA  6E16               	movwf	getKey@buttonPressed,c
  1451  0008DC  D015               	goto	l1982
  1452  0008DE                     l1972:
  1453                           
  1454                           ;Keypad4X4.c: 87: KeypadStatus->keyPressed = buttonPressed;
  1455  0008DE  EE20 F001          	lfsr	2,1
  1456  0008E2  5013               	movf	getKey@KeypadStatus,w,c
  1457  0008E4  26D9               	addwf	fsr2l,f,c
  1458  0008E6  5014               	movf	getKey@KeypadStatus+1,w,c
  1459  0008E8  22DA               	addwfc	fsr2h,f,c
  1460  0008EA  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1461                           
  1462                           ;Keypad4X4.c: 88: return;
  1463  0008EE  0012               	return	
  1464  0008F0                     l59:
  1465                           
  1466                           ;Keypad4X4.c: 91: else if ((PORTB & 0x04) == 0x00)
  1467  0008F0  B481               	btfsc	3969,2,c	;volatile
  1468  0008F2  D010               	goto	l61
  1469                           
  1470                           ;Keypad4X4.c: 92: {
  1471                           ;Keypad4X4.c: 93: _delay((unsigned long)((5)*(4000000/4000.0)));
  1472  0008F4  0E07               	movlw	7
  1473  0008F6  6E15               	movwf	??_getKey& (0+255),c
  1474  0008F8  0E7D               	movlw	125
  1475  0008FA                     u1657:
  1476  0008FA  2EE8               	decfsz	wreg,f,c
  1477  0008FC  D7FE               	bra	u1657
  1478  0008FE  2E15               	decfsz	??_getKey& (0+255),f,c
  1479  000900  D7FC               	bra	u1657
  1480  000902  F000               	nop	
  1481                           
  1482                           ;Keypad4X4.c: 94: buttonPressed = button_5;
  1483  000904  0E05               	movlw	5
  1484  000906  D7E9               	goto	L3
  1485  000908                     l1982:
  1486                           
  1487                           ;Keypad4X4.c: 95: KeypadStatus->keyPressIndicator = 1;
  1488  000908  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1489  00090C  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1490  000910  80DF               	bsf	indf2,0,c
  1491  000912  D7E5               	goto	l1972
  1492  000914                     l61:
  1493                           
  1494                           ;Keypad4X4.c: 100: else if ((PORTB & 0x02) == 0x00)
  1495  000914  B281               	btfsc	3969,1,c	;volatile
  1496  000916  D00A               	goto	l63
  1497                           
  1498                           ;Keypad4X4.c: 101: {
  1499                           ;Keypad4X4.c: 102: _delay((unsigned long)((5)*(4000000/4000.0)));
  1500  000918  0E07               	movlw	7
  1501  00091A  6E15               	movwf	??_getKey& (0+255),c
  1502  00091C  0E7D               	movlw	125
  1503  00091E                     u1667:
  1504  00091E  2EE8               	decfsz	wreg,f,c
  1505  000920  D7FE               	bra	u1667
  1506  000922  2E15               	decfsz	??_getKey& (0+255),f,c
  1507  000924  D7FC               	bra	u1667
  1508  000926  F000               	nop	
  1509                           
  1510                           ;Keypad4X4.c: 103: buttonPressed = button_6;
  1511  000928  0E06               	movlw	6
  1512  00092A  D7D7               	goto	L3
  1513  00092C                     l63:
  1514                           
  1515                           ;Keypad4X4.c: 109: else if ((PORTB & 0x01) == 0x00)
  1516  00092C  B081               	btfsc	3969,0,c	;volatile
  1517  00092E  D018               	goto	l65
  1518                           
  1519                           ;Keypad4X4.c: 110: {
  1520                           ;Keypad4X4.c: 111: _delay((unsigned long)((5)*(4000000/4000.0)));
  1521  000930  0E07               	movlw	7
  1522  000932  6E15               	movwf	??_getKey& (0+255),c
  1523  000934  0E7D               	movlw	125
  1524  000936                     u1677:
  1525  000936  2EE8               	decfsz	wreg,f,c
  1526  000938  D7FE               	bra	u1677
  1527  00093A  2E15               	decfsz	??_getKey& (0+255),f,c
  1528  00093C  D7FC               	bra	u1677
  1529  00093E  F000               	nop	
  1530                           
  1531                           ;Keypad4X4.c: 112: buttonPressed = SP_FUNC_A;
  1532  000940  0E0B               	movlw	11
  1533  000942  6E16               	movwf	getKey@buttonPressed,c
  1534                           
  1535                           ;Keypad4X4.c: 113: KeypadStatus->keyPressIndicator = 1;
  1536  000944  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1537  000948  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1538  00094C  80DF               	bsf	indf2,0,c
  1539                           
  1540                           ;Keypad4X4.c: 114: KeypadStatus->keyPressed = buttonPressed;
  1541  00094E  EE20 F001          	lfsr	2,1
  1542  000952  5013               	movf	getKey@KeypadStatus,w,c
  1543  000954  26D9               	addwf	fsr2l,f,c
  1544  000956  5014               	movf	getKey@KeypadStatus+1,w,c
  1545  000958  22DA               	addwfc	fsr2h,f,c
  1546  00095A  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1547                           
  1548                           ;Keypad4X4.c: 115: return;
  1549  00095E  0012               	return	
  1550  000960                     l65:
  1551                           
  1552                           ;Keypad4X4.c: 116: }
  1553                           ;Keypad4X4.c: 118: LATB = 0xDF;
  1554  000960  0EDF               	movlw	223
  1555  000962  6E8A               	movwf	3978,c	;volatile
  1556                           
  1557                           ;Keypad4X4.c: 119: if ((PORTB & 0x08) == 0x00)
  1558  000964  B681               	btfsc	3969,3,c	;volatile
  1559  000966  D014               	goto	l66
  1560                           
  1561                           ;Keypad4X4.c: 120: {
  1562                           ;Keypad4X4.c: 121: _delay((unsigned long)((5)*(4000000/4000.0)));
  1563  000968  0E07               	movlw	7
  1564  00096A  6E15               	movwf	??_getKey& (0+255),c
  1565  00096C  0E7D               	movlw	125
  1566  00096E                     u1687:
  1567  00096E  2EE8               	decfsz	wreg,f,c
  1568  000970  D7FE               	bra	u1687
  1569  000972  2E15               	decfsz	??_getKey& (0+255),f,c
  1570  000974  D7FC               	bra	u1687
  1571  000976  F000               	nop	
  1572                           
  1573                           ;Keypad4X4.c: 122: buttonPressed = button_7;
  1574  000978  0E07               	movlw	7
  1575  00097A                     L4:
  1576  00097A  6E16               	movwf	getKey@buttonPressed,c
  1577  00097C  D015               	goto	l2032
  1578  00097E                     l2022:
  1579                           
  1580                           ;Keypad4X4.c: 124: KeypadStatus->keyPressed = buttonPressed;
  1581  00097E  EE20 F001          	lfsr	2,1
  1582  000982  5013               	movf	getKey@KeypadStatus,w,c
  1583  000984  26D9               	addwf	fsr2l,f,c
  1584  000986  5014               	movf	getKey@KeypadStatus+1,w,c
  1585  000988  22DA               	addwfc	fsr2h,f,c
  1586  00098A  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1587                           
  1588                           ;Keypad4X4.c: 125: return;
  1589  00098E  0012               	return	
  1590  000990                     l66:
  1591                           
  1592                           ;Keypad4X4.c: 128: else if ((PORTB & 0x04) == 0x00)
  1593  000990  B481               	btfsc	3969,2,c	;volatile
  1594  000992  D010               	goto	l68
  1595                           
  1596                           ;Keypad4X4.c: 129: {
  1597                           ;Keypad4X4.c: 130: _delay((unsigned long)((5)*(4000000/4000.0)));
  1598  000994  0E07               	movlw	7
  1599  000996  6E15               	movwf	??_getKey& (0+255),c
  1600  000998  0E7D               	movlw	125
  1601  00099A                     u1697:
  1602  00099A  2EE8               	decfsz	wreg,f,c
  1603  00099C  D7FE               	bra	u1697
  1604  00099E  2E15               	decfsz	??_getKey& (0+255),f,c
  1605  0009A0  D7FC               	bra	u1697
  1606  0009A2  F000               	nop	
  1607                           
  1608                           ;Keypad4X4.c: 131: buttonPressed = button_8;
  1609  0009A4  0E08               	movlw	8
  1610  0009A6  D7E9               	goto	L4
  1611  0009A8                     l2032:
  1612                           
  1613                           ;Keypad4X4.c: 132: KeypadStatus->keyPressIndicator = 1;
  1614  0009A8  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1615  0009AC  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1616  0009B0  80DF               	bsf	indf2,0,c
  1617  0009B2  D7E5               	goto	l2022
  1618  0009B4                     l68:
  1619                           
  1620                           ;Keypad4X4.c: 137: else if ((PORTB & 0x02) == 0x00)
  1621  0009B4  B281               	btfsc	3969,1,c	;volatile
  1622  0009B6  D00A               	goto	l70
  1623                           
  1624                           ;Keypad4X4.c: 138: {
  1625                           ;Keypad4X4.c: 139: _delay((unsigned long)((5)*(4000000/4000.0)));
  1626  0009B8  0E07               	movlw	7
  1627  0009BA  6E15               	movwf	??_getKey& (0+255),c
  1628  0009BC  0E7D               	movlw	125
  1629  0009BE                     u1707:
  1630  0009BE  2EE8               	decfsz	wreg,f,c
  1631  0009C0  D7FE               	bra	u1707
  1632  0009C2  2E15               	decfsz	??_getKey& (0+255),f,c
  1633  0009C4  D7FC               	bra	u1707
  1634  0009C6  F000               	nop	
  1635                           
  1636                           ;Keypad4X4.c: 140: buttonPressed = button_9;
  1637  0009C8  0E09               	movlw	9
  1638  0009CA  D7D7               	goto	L4
  1639  0009CC                     l70:
  1640                           
  1641                           ;Keypad4X4.c: 146: else if ((PORTB & 0x01) == 0x00)
  1642  0009CC  B081               	btfsc	3969,0,c	;volatile
  1643  0009CE  D018               	goto	l72
  1644                           
  1645                           ;Keypad4X4.c: 147: {
  1646                           ;Keypad4X4.c: 148: _delay((unsigned long)((5)*(4000000/4000.0)));
  1647  0009D0  0E07               	movlw	7
  1648  0009D2  6E15               	movwf	??_getKey& (0+255),c
  1649  0009D4  0E7D               	movlw	125
  1650  0009D6                     u1717:
  1651  0009D6  2EE8               	decfsz	wreg,f,c
  1652  0009D8  D7FE               	bra	u1717
  1653  0009DA  2E15               	decfsz	??_getKey& (0+255),f,c
  1654  0009DC  D7FC               	bra	u1717
  1655  0009DE  F000               	nop	
  1656                           
  1657                           ;Keypad4X4.c: 149: buttonPressed = SP_FUNC_B;
  1658  0009E0  0E0C               	movlw	12
  1659  0009E2  6E16               	movwf	getKey@buttonPressed,c
  1660                           
  1661                           ;Keypad4X4.c: 150: KeypadStatus->keyPressIndicator = 1;
  1662  0009E4  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1663  0009E8  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1664  0009EC  80DF               	bsf	indf2,0,c
  1665                           
  1666                           ;Keypad4X4.c: 151: KeypadStatus->keyPressed = buttonPressed;
  1667  0009EE  EE20 F001          	lfsr	2,1
  1668  0009F2  5013               	movf	getKey@KeypadStatus,w,c
  1669  0009F4  26D9               	addwf	fsr2l,f,c
  1670  0009F6  5014               	movf	getKey@KeypadStatus+1,w,c
  1671  0009F8  22DA               	addwfc	fsr2h,f,c
  1672  0009FA  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1673                           
  1674                           ;Keypad4X4.c: 152: return;
  1675  0009FE  0012               	return	
  1676  000A00                     l72:
  1677                           
  1678                           ;Keypad4X4.c: 153: }
  1679                           ;Keypad4X4.c: 155: LATB = 0xEF;
  1680  000A00  0EEF               	movlw	239
  1681  000A02  6E8A               	movwf	3978,c	;volatile
  1682                           
  1683                           ;Keypad4X4.c: 156: if ((PORTB & 0x08) == 0x00)
  1684  000A04  B681               	btfsc	3969,3,c	;volatile
  1685  000A06  D018               	goto	l73
  1686                           
  1687                           ;Keypad4X4.c: 157: {
  1688                           ;Keypad4X4.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
  1689  000A08  0E07               	movlw	7
  1690  000A0A  6E15               	movwf	??_getKey& (0+255),c
  1691  000A0C  0E7D               	movlw	125
  1692  000A0E                     u1727:
  1693  000A0E  2EE8               	decfsz	wreg,f,c
  1694  000A10  D7FE               	bra	u1727
  1695  000A12  2E15               	decfsz	??_getKey& (0+255),f,c
  1696  000A14  D7FC               	bra	u1727
  1697  000A16  F000               	nop	
  1698                           
  1699                           ;Keypad4X4.c: 159: buttonPressed = SP_FUNC_ON;
  1700  000A18  0E0D               	movlw	13
  1701  000A1A  6E16               	movwf	getKey@buttonPressed,c
  1702                           
  1703                           ;Keypad4X4.c: 160: KeypadStatus->keyPressIndicator = 1;
  1704  000A1C  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1705  000A20  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1706  000A24  80DF               	bsf	indf2,0,c
  1707                           
  1708                           ;Keypad4X4.c: 161: KeypadStatus->keyPressed = buttonPressed;
  1709  000A26  EE20 F001          	lfsr	2,1
  1710  000A2A  5013               	movf	getKey@KeypadStatus,w,c
  1711  000A2C  26D9               	addwf	fsr2l,f,c
  1712  000A2E  5014               	movf	getKey@KeypadStatus+1,w,c
  1713  000A30  22DA               	addwfc	fsr2h,f,c
  1714  000A32  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1715                           
  1716                           ;Keypad4X4.c: 163: }
  1717                           
  1718                           ;Keypad4X4.c: 162: return;
  1719  000A36  0012               	return	
  1720  000A38                     l73:
  1721                           
  1722                           ;Keypad4X4.c: 165: else if ((PORTB & 0x04) == 0x00)
  1723  000A38  B481               	btfsc	3969,2,c	;volatile
  1724  000A3A  D018               	goto	l75
  1725                           
  1726                           ;Keypad4X4.c: 166: {
  1727                           ;Keypad4X4.c: 167: _delay((unsigned long)((5)*(4000000/4000.0)));
  1728  000A3C  0E07               	movlw	7
  1729  000A3E  6E15               	movwf	??_getKey& (0+255),c
  1730  000A40  0E7D               	movlw	125
  1731  000A42                     u1737:
  1732  000A42  2EE8               	decfsz	wreg,f,c
  1733  000A44  D7FE               	bra	u1737
  1734  000A46  2E15               	decfsz	??_getKey& (0+255),f,c
  1735  000A48  D7FC               	bra	u1737
  1736  000A4A  F000               	nop	
  1737                           
  1738                           ;Keypad4X4.c: 168: buttonPressed = button_0;
  1739  000A4C  0E00               	movlw	0
  1740  000A4E  6E16               	movwf	getKey@buttonPressed,c
  1741                           
  1742                           ;Keypad4X4.c: 169: KeypadStatus->keyPressIndicator = 1;
  1743  000A50  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1744  000A54  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1745  000A58  80DF               	bsf	indf2,0,c
  1746                           
  1747                           ;Keypad4X4.c: 170: KeypadStatus->keyPressed = buttonPressed;
  1748  000A5A  EE20 F001          	lfsr	2,1
  1749  000A5E  5013               	movf	getKey@KeypadStatus,w,c
  1750  000A60  26D9               	addwf	fsr2l,f,c
  1751  000A62  5014               	movf	getKey@KeypadStatus+1,w,c
  1752  000A64  22DA               	addwfc	fsr2h,f,c
  1753  000A66  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1754                           
  1755                           ;Keypad4X4.c: 172: }
  1756                           
  1757                           ;Keypad4X4.c: 171: return;
  1758  000A6A  0012               	return	
  1759  000A6C                     l75:
  1760                           
  1761                           ;Keypad4X4.c: 174: else if ((PORTB & 0x02) == 0x00)
  1762  000A6C  B281               	btfsc	3969,1,c	;volatile
  1763  000A6E  D018               	goto	l77
  1764                           
  1765                           ;Keypad4X4.c: 175: {
  1766                           ;Keypad4X4.c: 176: _delay((unsigned long)((5)*(4000000/4000.0)));
  1767  000A70  0E07               	movlw	7
  1768  000A72  6E15               	movwf	??_getKey& (0+255),c
  1769  000A74  0E7D               	movlw	125
  1770  000A76                     u1747:
  1771  000A76  2EE8               	decfsz	wreg,f,c
  1772  000A78  D7FE               	bra	u1747
  1773  000A7A  2E15               	decfsz	??_getKey& (0+255),f,c
  1774  000A7C  D7FC               	bra	u1747
  1775  000A7E  F000               	nop	
  1776                           
  1777                           ;Keypad4X4.c: 177: buttonPressed = SP_FUNC_ENTER;
  1778  000A80  0E0F               	movlw	15
  1779  000A82  6E16               	movwf	getKey@buttonPressed,c
  1780                           
  1781                           ;Keypad4X4.c: 178: KeypadStatus->keyPressIndicator = 1;
  1782  000A84  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1783  000A88  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1784  000A8C  80DF               	bsf	indf2,0,c
  1785                           
  1786                           ;Keypad4X4.c: 179: KeypadStatus->keyPressed = buttonPressed;
  1787  000A8E  EE20 F001          	lfsr	2,1
  1788  000A92  5013               	movf	getKey@KeypadStatus,w,c
  1789  000A94  26D9               	addwf	fsr2l,f,c
  1790  000A96  5014               	movf	getKey@KeypadStatus+1,w,c
  1791  000A98  22DA               	addwfc	fsr2h,f,c
  1792  000A9A  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1793                           
  1794                           ;Keypad4X4.c: 181: }
  1795                           
  1796                           ;Keypad4X4.c: 180: return;
  1797  000A9E  0012               	return	
  1798  000AA0                     l77:
  1799                           
  1800                           ;Keypad4X4.c: 183: else if ((PORTB & 0x01) == 0x00)
  1801  000AA0  B081               	btfsc	3969,0,c	;volatile
  1802  000AA2  D018               	goto	l79
  1803                           
  1804                           ;Keypad4X4.c: 184: {
  1805                           ;Keypad4X4.c: 185: _delay((unsigned long)((5)*(4000000/4000.0)));
  1806  000AA4  0E07               	movlw	7
  1807  000AA6  6E15               	movwf	??_getKey& (0+255),c
  1808  000AA8  0E7D               	movlw	125
  1809  000AAA                     u1757:
  1810  000AAA  2EE8               	decfsz	wreg,f,c
  1811  000AAC  D7FE               	bra	u1757
  1812  000AAE  2E15               	decfsz	??_getKey& (0+255),f,c
  1813  000AB0  D7FC               	bra	u1757
  1814  000AB2  F000               	nop	
  1815                           
  1816                           ;Keypad4X4.c: 186: buttonPressed = SP_FUNC_OFF;
  1817  000AB4  0E0E               	movlw	14
  1818  000AB6  6E16               	movwf	getKey@buttonPressed,c
  1819                           
  1820                           ;Keypad4X4.c: 187: KeypadStatus->keyPressIndicator = 1;
  1821  000AB8  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1822  000ABC  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1823  000AC0  80DF               	bsf	indf2,0,c
  1824                           
  1825                           ;Keypad4X4.c: 188: KeypadStatus->keyPressed = buttonPressed;
  1826  000AC2  EE20 F001          	lfsr	2,1
  1827  000AC6  5013               	movf	getKey@KeypadStatus,w,c
  1828  000AC8  26D9               	addwf	fsr2l,f,c
  1829  000ACA  5014               	movf	getKey@KeypadStatus+1,w,c
  1830  000ACC  22DA               	addwfc	fsr2h,f,c
  1831  000ACE  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1832                           
  1833                           ;Keypad4X4.c: 190: }
  1834                           
  1835                           ;Keypad4X4.c: 189: return;
  1836  000AD2  0012               	return	
  1837  000AD4                     l79:
  1838                           
  1839                           ;Keypad4X4.c: 192: else {
  1840                           ;Keypad4X4.c: 193: KeypadStatus->keyPressIndicator = 0;
  1841  000AD4  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  1842  000AD8  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  1843  000ADC  90DF               	bcf	indf2,0,c
  1844                           
  1845                           ;Keypad4X4.c: 194: KeypadStatus->keyPressed = NONE;
  1846  000ADE  EE20 F001          	lfsr	2,1
  1847  000AE2  5013               	movf	getKey@KeypadStatus,w,c
  1848  000AE4  26D9               	addwf	fsr2l,f,c
  1849  000AE6  5014               	movf	getKey@KeypadStatus+1,w,c
  1850  000AE8  22DA               	addwfc	fsr2h,f,c
  1851  000AEA  0E10               	movlw	16
  1852  000AEC  6EDF               	movwf	indf2,c
  1853                           
  1854                           ;Keypad4X4.c: 195: return;
  1855  000AEE  0012               	return	
  1856  000AF0                     __end_of_getKey:
  1857                           	opt stack 0
  1858                           tblptru	equ	0xFF8
  1859                           tblptrh	equ	0xFF7
  1860                           tblptrl	equ	0xFF6
  1861                           tablat	equ	0xFF5
  1862                           prodh	equ	0xFF4
  1863                           prodl	equ	0xFF3
  1864                           intcon	equ	0xFF2
  1865                           intcon2	equ	0xFF1
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           postdec1	equ	0xFE5
  1869                           fsr1l	equ	0xFE1
  1870                           indf2	equ	0xFDF
  1871                           postinc2	equ	0xFDE
  1872                           fsr2h	equ	0xFDA
  1873                           fsr2l	equ	0xFD9
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _eepromWriteCode *****************
  1877 ;; Defined at:
  1878 ;;		line 8 in file "eeprom_functions.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  eepromWriteA    1    wreg     unsigned char 
  1881 ;;  codeLenght      1   21[COMRAM] unsigned char 
  1882 ;;  codeBuffer      2   22[COMRAM] PTR unsigned char 
  1883 ;;		 -> main@keypressArray(10), 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  eepromWriteA    1   24[COMRAM] unsigned char 
  1886 ;;  i               1   25[COMRAM] unsigned char 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1896 ;;      Params:         3       0       0       0       0       0       0       0       0
  1897 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1898 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1899 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1900 ;;Total ram usage:        5 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    2
  1903 ;; This function calls:
  1904 ;;		_writeEEPROM
  1905 ;; This function is called by:
  1906 ;;		_main
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           	psect	text6
  1911  000E98                     __ptext6:
  1912                           	opt stack 0
  1913  000E98                     _eepromWriteCode:
  1914                           	opt stack 28
  1915                           
  1916                           ;incstack = 0
  1917                           ;eepromWriteCode@eepromWriteAddr stored from wreg
  1918  000E98  6E19               	movwf	eepromWriteCode@eepromWriteAddr,c
  1919                           
  1920                           ;eeprom_functions.c: 10: writeEEPROM(eepromWriteAddr, codeLenght);
  1921  000E9A  C016  F013         	movff	eepromWriteCode@codeLenght,writeEEPROM@datas
  1922  000E9E  5019               	movf	eepromWriteCode@eepromWriteAddr,w,c
  1923  000EA0  EC69  F007         	call	_writeEEPROM
  1924                           
  1925                           ;eeprom_functions.c: 11: for(unsigned char i=0; i <= codeLenght; i++)
  1926  000EA4  0E00               	movlw	0
  1927  000EA6  6E1A               	movwf	eepromWriteCode@i,c
  1928  000EA8  D00F               	goto	l17
  1929  000EAA                     
  1930                           ;eeprom_functions.c: 12: {
  1931                           ;eeprom_functions.c: 13: eepromWriteAddr++;
  1932  000EAA  2A19               	incf	eepromWriteCode@eepromWriteAddr,f,c
  1933                           
  1934                           ;eeprom_functions.c: 15: writeEEPROM(eepromWriteAddr, *(codeBuffer + i));
  1935  000EAC  501A               	movf	eepromWriteCode@i,w,c
  1936  000EAE  0D01               	mullw	1
  1937  000EB0  50F3               	movf	prodl,w,c
  1938  000EB2  2417               	addwf	eepromWriteCode@codeBuffer,w,c
  1939  000EB4  6ED9               	movwf	fsr2l,c
  1940  000EB6  50F4               	movf	prodh,w,c
  1941  000EB8  2018               	addwfc	eepromWriteCode@codeBuffer+1,w,c
  1942  000EBA  6EDA               	movwf	fsr2h,c
  1943  000EBC  50DF               	movf	indf2,w,c
  1944  000EBE  6E13               	movwf	writeEEPROM@datas,c
  1945  000EC0  5019               	movf	eepromWriteCode@eepromWriteAddr,w,c
  1946  000EC2  EC69  F007         	call	_writeEEPROM
  1947  000EC6  2A1A               	incf	eepromWriteCode@i,f,c
  1948  000EC8                     l17:
  1949  000EC8  501A               	movf	eepromWriteCode@i,w,c
  1950  000ECA  5C16               	subwf	eepromWriteCode@codeLenght,w,c
  1951  000ECC  A0D8               	btfss	status,0,c
  1952  000ECE  0012               	return	
  1953  000ED0  D7EC               	goto	l18
  1954  000ED2                     __end_of_eepromWriteCode:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           tblptrh	equ	0xFF7
  1958                           tblptrl	equ	0xFF6
  1959                           tablat	equ	0xFF5
  1960                           prodh	equ	0xFF4
  1961                           prodl	equ	0xFF3
  1962                           intcon	equ	0xFF2
  1963                           intcon2	equ	0xFF1
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           indf2	equ	0xFDF
  1969                           postinc2	equ	0xFDE
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           status	equ	0xFD8
  1973                           
  1974 ;; *************** function _writeEEPROM *****************
  1975 ;; Defined at:
  1976 ;;		line 19 in file "eeprom_functions.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  address         1    wreg     unsigned char 
  1979 ;;  datas           1   18[COMRAM] unsigned char 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  address         1   19[COMRAM] unsigned char 
  1982 ;;  gie_Status      1   20[COMRAM] unsigned char 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1992 ;;      Params:         1       0       0       0       0       0       0       0       0
  1993 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1994 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1995 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1996 ;;Total ram usage:        3 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    1
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_eepromWriteCode
  2003 ;;		_main
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text7
  2008  000ED2                     __ptext7:
  2009                           	opt stack 0
  2010  000ED2                     _writeEEPROM:
  2011                           	opt stack 29
  2012                           
  2013                           ;incstack = 0
  2014                           ;writeEEPROM@address stored from wreg
  2015  000ED2  6E14               	movwf	writeEEPROM@address,c
  2016  000ED4                     
  2017                           ;eeprom_functions.c: 21: unsigned char gie_Status;
  2018                           ;eeprom_functions.c: 23: while(EECON1bits.WR);
  2019  000ED4  B2A6               	btfsc	4006,1,c	;volsfr
  2020  000ED6  D7FE               	goto	l1860
  2021                           
  2022                           ;eeprom_functions.c: 24: EEADR = address;
  2023  000ED8  C014  FFA9         	movff	writeEEPROM@address,4009	;volatile
  2024                           
  2025                           ;eeprom_functions.c: 25: EEDATA = datas;
  2026  000EDC  C013  FFA8         	movff	writeEEPROM@datas,4008	;volatile
  2027                           
  2028                           ;eeprom_functions.c: 26: EECON1bits.WREN = 1;
  2029  000EE0  84A6               	bsf	4006,2,c	;volsfr
  2030                           
  2031                           ;eeprom_functions.c: 27: gie_Status = INTCONbits.GIE;
  2032  000EE2  0E00               	movlw	0
  2033  000EE4  BEF2               	btfsc	intcon,7,c	;volatile
  2034  000EE6  0E01               	movlw	1
  2035  000EE8  6E15               	movwf	writeEEPROM@gie_Status,c
  2036                           
  2037                           ;eeprom_functions.c: 28: INTCONbits.GIE = 0;
  2038  000EEA  9EF2               	bcf	intcon,7,c	;volatile
  2039                           
  2040                           ;eeprom_functions.c: 29: EECON2 = 0x55;
  2041  000EEC  0E55               	movlw	85
  2042  000EEE  6EA7               	movwf	4007,c	;volsfr
  2043                           
  2044                           ;eeprom_functions.c: 30: EECON2 = 0xaa;
  2045  000EF0  0EAA               	movlw	170
  2046  000EF2  6EA7               	movwf	4007,c	;volsfr
  2047                           
  2048                           ;eeprom_functions.c: 31: EECON1bits.WR = 1;
  2049  000EF4  82A6               	bsf	4006,1,c	;volsfr
  2050                           
  2051                           ;eeprom_functions.c: 32: INTCONbits.GIE = gie_Status;
  2052  000EF6  B015               	btfsc	writeEEPROM@gie_Status,0,c
  2053  000EF8  D002               	bra	u1095
  2054  000EFA  9EF2               	bcf	intcon,7,c	;volatile
  2055  000EFC  D001               	bra	u1096
  2056  000EFE                     u1095:
  2057  000EFE  8EF2               	bsf	intcon,7,c	;volatile
  2058  000F00                     u1096:
  2059                           
  2060                           ;eeprom_functions.c: 33: EECON1bits.WREN = 0;
  2061  000F00  94A6               	bcf	4006,2,c	;volsfr
  2062  000F02  0012               	return		;funcret
  2063  000F04                     __end_of_writeEEPROM:
  2064                           	opt stack 0
  2065                           tblptru	equ	0xFF8
  2066                           tblptrh	equ	0xFF7
  2067                           tblptrl	equ	0xFF6
  2068                           tablat	equ	0xFF5
  2069                           prodh	equ	0xFF4
  2070                           prodl	equ	0xFF3
  2071                           intcon	equ	0xFF2
  2072                           intcon2	equ	0xFF1
  2073                           postinc0	equ	0xFEE
  2074                           wreg	equ	0xFE8
  2075                           postdec1	equ	0xFE5
  2076                           fsr1l	equ	0xFE1
  2077                           indf2	equ	0xFDF
  2078                           postinc2	equ	0xFDE
  2079                           fsr2h	equ	0xFDA
  2080                           fsr2l	equ	0xFD9
  2081                           status	equ	0xFD8
  2082                           
  2083 ;; *************** function _clear_keyArray *****************
  2084 ;; Defined at:
  2085 ;;		line 294 in file "main.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  arr             2   18[COMRAM] PTR unsigned char 
  2088 ;;		 -> main@keypressArray(10), 
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  a               1   20[COMRAM] unsigned char 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2100 ;;      Params:         2       0       0       0       0       0       0       0       0
  2101 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2102 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2103 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2104 ;;Total ram usage:        3 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    1
  2107 ;; This function calls:
  2108 ;;		Nothing
  2109 ;; This function is called by:
  2110 ;;		_main
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text8
  2115  000F2E                     __ptext8:
  2116                           	opt stack 0
  2117  000F2E                     _clear_keyArray:
  2118                           	opt stack 29
  2119                           
  2120                           ;main.c: 296: for(unsigned char a = 0; a < 10; a++)
  2121                           
  2122                           ;incstack = 0
  2123  000F2E  0E00               	movlw	0
  2124  000F30  6E15               	movwf	clear_keyArray@a,c
  2125  000F32                     l2186:
  2126  000F32  0E09               	movlw	9
  2127  000F34  6415               	cpfsgt	clear_keyArray@a,c
  2128  000F36  D001               	goto	l266
  2129  000F38  0012               	return	
  2130  000F3A                     l266:
  2131                           
  2132                           ;main.c: 297: arr[a] = 0;
  2133  000F3A  5015               	movf	clear_keyArray@a,w,c
  2134  000F3C  0D01               	mullw	1
  2135  000F3E  50F3               	movf	prodl,w,c
  2136  000F40  2413               	addwf	clear_keyArray@arr,w,c
  2137  000F42  6ED9               	movwf	fsr2l,c
  2138  000F44  50F4               	movf	prodh,w,c
  2139  000F46  2014               	addwfc	clear_keyArray@arr+1,w,c
  2140  000F48  6EDA               	movwf	fsr2h,c
  2141  000F4A  0E00               	movlw	0
  2142  000F4C  6EDF               	movwf	indf2,c
  2143  000F4E  2A15               	incf	clear_keyArray@a,f,c
  2144  000F50  D7F0               	goto	l2186
  2145  000F52                     __end_of_clear_keyArray:
  2146                           	opt stack 0
  2147                           tblptru	equ	0xFF8
  2148                           tblptrh	equ	0xFF7
  2149                           tblptrl	equ	0xFF6
  2150                           tablat	equ	0xFF5
  2151                           prodh	equ	0xFF4
  2152                           prodl	equ	0xFF3
  2153                           intcon	equ	0xFF2
  2154                           intcon2	equ	0xFF1
  2155                           postinc0	equ	0xFEE
  2156                           wreg	equ	0xFE8
  2157                           postdec1	equ	0xFE5
  2158                           fsr1l	equ	0xFE1
  2159                           indf2	equ	0xFDF
  2160                           postinc2	equ	0xFDE
  2161                           fsr2h	equ	0xFDA
  2162                           fsr2l	equ	0xFD9
  2163                           status	equ	0xFD8
  2164                           
  2165 ;; *************** function _check_password_presence *****************
  2166 ;; Defined at:
  2167 ;;		line 129 in file "main.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;  lock_num        1    wreg     unsigned char 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  lock_num        1   20[COMRAM] unsigned char 
  2172 ;;  addr            1   22[COMRAM] unsigned char 
  2173 ;;  validity        1   21[COMRAM] unsigned char 
  2174 ;;  a               1   19[COMRAM] unsigned char 
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      unsigned char 
  2177 ;; Registers used:
  2178 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2184 ;;      Params:         0       0       0       0       0       0       0       0       0
  2185 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2187 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2188 ;;Total ram usage:        4 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    2
  2191 ;; This function calls:
  2192 ;;		_readEEPROM
  2193 ;; This function is called by:
  2194 ;;		_main
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           	psect	text9
  2199  000F04                     __ptext9:
  2200                           	opt stack 0
  2201  000F04                     _check_password_presence:
  2202                           	opt stack 28
  2203                           
  2204                           ;incstack = 0
  2205                           ;check_password_presence@lock_num stored from wreg
  2206  000F04  6E15               	movwf	check_password_presence@lock_num,c
  2207                           
  2208                           ;main.c: 131: unsigned char validity = 0;
  2209  000F06  0E00               	movlw	0
  2210  000F08  6E16               	movwf	check_password_presence@validity,c
  2211                           
  2212                           ;main.c: 133: unsigned char addr = (lock_num - 1) * 10;
  2213  000F0A  0415               	decf	check_password_presence@lock_num,w,c
  2214  000F0C  0D0A               	mullw	10
  2215  000F0E  CFF3 F017          	movff	prodl,check_password_presence@addr
  2216                           
  2217                           ;main.c: 135: char a = readEEPROM(addr);
  2218  000F12  5017               	movf	check_password_presence@addr,w,c
  2219  000F14  ECC6  F007         	call	_readEEPROM
  2220  000F18  6E14               	movwf	check_password_presence@a,c
  2221                           
  2222                           ;main.c: 136: if(readEEPROM(addr))
  2223  000F1A  5017               	movf	check_password_presence@addr,w,c
  2224  000F1C  ECC6  F007         	call	_readEEPROM
  2225  000F20  0900               	iorlw	0
  2226  000F22  B4D8               	btfsc	status,2,c
  2227  000F24  D002               	goto	l250
  2228                           
  2229                           ;main.c: 137: validity = 1;
  2230  000F26  0E01               	movlw	1
  2231  000F28  6E16               	movwf	check_password_presence@validity,c
  2232  000F2A                     l250:
  2233                           
  2234                           ;main.c: 138: return validity;
  2235  000F2A  5016               	movf	check_password_presence@validity,w,c
  2236  000F2C  0012               	return	
  2237  000F2E                     __end_of_check_password_presence:
  2238                           	opt stack 0
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           prodh	equ	0xFF4
  2244                           prodl	equ	0xFF3
  2245                           intcon	equ	0xFF2
  2246                           intcon2	equ	0xFF1
  2247                           postinc0	equ	0xFEE
  2248                           wreg	equ	0xFE8
  2249                           postdec1	equ	0xFE5
  2250                           fsr1l	equ	0xFE1
  2251                           indf2	equ	0xFDF
  2252                           postinc2	equ	0xFDE
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _readEEPROM *****************
  2258 ;; Defined at:
  2259 ;;		line 36 in file "eeprom_functions.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  address         1    wreg     unsigned char 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  address         1   18[COMRAM] unsigned char 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      unsigned char 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2273 ;;      Params:         0       0       0       0       0       0       0       0       0
  2274 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2276 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2277 ;;Total ram usage:        1 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    1
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_check_password_presence
  2284 ;;		_main
  2285 ;;		_passcodeCompare
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text10
  2290  000F8C                     __ptext10:
  2291                           	opt stack 0
  2292  000F8C                     _readEEPROM:
  2293                           	opt stack 29
  2294                           
  2295                           ;incstack = 0
  2296                           ;readEEPROM@address stored from wreg
  2297  000F8C  6E13               	movwf	readEEPROM@address,c
  2298                           
  2299                           ;eeprom_functions.c: 38: EEADR = address;
  2300  000F8E  C013  FFA9         	movff	readEEPROM@address,4009	;volatile
  2301                           
  2302                           ;eeprom_functions.c: 40: EECON1bits.RD = 1;
  2303  000F92  80A6               	bsf	4006,0,c	;volsfr
  2304                           
  2305                           ;eeprom_functions.c: 41: return EEDATA;
  2306  000F94  50A8               	movf	4008,w,c	;volatile
  2307  000F96  0012               	return	
  2308  000F98                     __end_of_readEEPROM:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           intcon	equ	0xFF2
  2317                           intcon2	equ	0xFF1
  2318                           postinc0	equ	0xFEE
  2319                           wreg	equ	0xFE8
  2320                           postdec1	equ	0xFE5
  2321                           fsr1l	equ	0xFE1
  2322                           indf2	equ	0xFDF
  2323                           postinc2	equ	0xFDE
  2324                           fsr2h	equ	0xFDA
  2325                           fsr2l	equ	0xFD9
  2326                           status	equ	0xFD8
  2327                           
  2328 ;; *************** function _check_lock_num_validity *****************
  2329 ;; Defined at:
  2330 ;;		line 119 in file "main.c"
  2331 ;; Parameters:    Size  Location     Type
  2332 ;;  lock_num        1    wreg     unsigned char 
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;  lock_num        1   19[COMRAM] unsigned char 
  2335 ;;  validity        1   18[COMRAM] unsigned char 
  2336 ;; Return value:  Size  Location     Type
  2337 ;;                  1    wreg      unsigned char 
  2338 ;; Registers used:
  2339 ;;		wreg, status,2, status,0
  2340 ;; Tracked objects:
  2341 ;;		On entry : 0/0
  2342 ;;		On exit  : 0/0
  2343 ;;		Unchanged: 0/0
  2344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2345 ;;      Params:         0       0       0       0       0       0       0       0       0
  2346 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2347 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2348 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2349 ;;Total ram usage:        2 bytes
  2350 ;; Hardware stack levels used:    1
  2351 ;; Hardware stack levels required when called:    1
  2352 ;; This function calls:
  2353 ;;		Nothing
  2354 ;; This function is called by:
  2355 ;;		_main
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text11
  2360  000F52                     __ptext11:
  2361                           	opt stack 0
  2362  000F52                     _check_lock_num_validity:
  2363                           	opt stack 29
  2364                           
  2365                           ;incstack = 0
  2366                           ;check_lock_num_validity@lock_num stored from wreg
  2367  000F52  6E14               	movwf	check_lock_num_validity@lock_num,c
  2368                           
  2369                           ;main.c: 121: unsigned char validity = 0;
  2370  000F54  0E00               	movlw	0
  2371  000F56  6E13               	movwf	check_lock_num_validity@validity,c
  2372                           
  2373                           ;main.c: 122: if(lock_num)
  2374  000F58  5014               	movf	check_lock_num_validity@lock_num,w,c
  2375  000F5A  B4D8               	btfsc	status,2,c
  2376  000F5C  D007               	goto	l246
  2377                           
  2378                           ;main.c: 123: {
  2379                           ;main.c: 124: lock_num <= 21 ? validity = 1 : validity = 0;
  2380  000F5E  0E16               	movlw	22
  2381  000F60  6014               	cpfslt	check_lock_num_validity@lock_num,c
  2382  000F62  D002               	goto	l244
  2383  000F64  0E01               	movlw	1
  2384  000F66  D001               	goto	L5
  2385  000F68                     l244:
  2386  000F68  0E00               	movlw	0
  2387  000F6A                     L5:
  2388  000F6A  6E13               	movwf	check_lock_num_validity@validity,c
  2389  000F6C                     l246:
  2390                           
  2391                           ;main.c: 125: }
  2392                           ;main.c: 126: return validity;
  2393  000F6C  5013               	movf	check_lock_num_validity@validity,w,c
  2394  000F6E  0012               	return	
  2395  000F70                     __end_of_check_lock_num_validity:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           prodh	equ	0xFF4
  2402                           prodl	equ	0xFF3
  2403                           intcon	equ	0xFF2
  2404                           intcon2	equ	0xFF1
  2405                           postinc0	equ	0xFEE
  2406                           wreg	equ	0xFE8
  2407                           postdec1	equ	0xFE5
  2408                           fsr1l	equ	0xFE1
  2409                           indf2	equ	0xFDF
  2410                           postinc2	equ	0xFDE
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _arr_to_num *****************
  2416 ;; Defined at:
  2417 ;;		line 100 in file "main.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  arr             2   18[COMRAM] PTR unsigned char 
  2420 ;;		 -> main@keypressArray(10), 
  2421 ;;  num_of_eleme    1   20[COMRAM] unsigned char 
  2422 ;;  number          2   21[COMRAM] PTR unsigned char 
  2423 ;;		 -> main@locker_num(1), 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  a               1   24[COMRAM] unsigned char 
  2426 ;;  validity        1   25[COMRAM] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      unsigned char 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2436 ;;      Params:         5       0       0       0       0       0       0       0       0
  2437 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2438 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2439 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2440 ;;Total ram usage:        8 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    1
  2443 ;; This function calls:
  2444 ;;		Nothing
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text12
  2451  000D2A                     __ptext12:
  2452                           	opt stack 0
  2453  000D2A                     _arr_to_num:
  2454                           	opt stack 29
  2455                           
  2456                           ;main.c: 102: unsigned char validity = 0;
  2457                           
  2458                           ;incstack = 0
  2459  000D2A  0E00               	movlw	0
  2460  000D2C  6E1A               	movwf	arr_to_num@validity,c
  2461                           
  2462                           ;main.c: 103: *number = 0;
  2463  000D2E  C016  FFD9         	movff	arr_to_num@number,fsr2l
  2464  000D32  C017  FFDA         	movff	arr_to_num@number+1,fsr2h
  2465  000D36  0E00               	movlw	0
  2466  000D38  6EDF               	movwf	indf2,c
  2467                           
  2468                           ;main.c: 105: if(num_of_elements > 3)
  2469  000D3A  0E03               	movlw	3
  2470  000D3C  6415               	cpfsgt	arr_to_num@num_of_elements,c
  2471  000D3E  D002               	goto	l234
  2472                           
  2473                           ;main.c: 106: return validity;
  2474  000D40  501A               	movf	arr_to_num@validity,w,c
  2475  000D42  0012               	return	
  2476  000D44                     l234:
  2477                           
  2478                           ;main.c: 108: if((num_of_elements == 3) && (arr[0] == 2) && (arr[1] == 5) && (arr[2] == 
      +                          6))
  2479  000D44  0E03               	movlw	3
  2480  000D46  1815               	xorwf	arr_to_num@num_of_elements,w,c
  2481  000D48  A4D8               	btfss	status,2,c
  2482  000D4A  D01E               	goto	l236
  2483  000D4C  C013  FFD9         	movff	arr_to_num@arr,fsr2l
  2484  000D50  C014  FFDA         	movff	arr_to_num@arr+1,fsr2h
  2485  000D54  0E02               	movlw	2
  2486  000D56  18DE               	xorwf	postinc2,w,c
  2487  000D58  A4D8               	btfss	status,2,c
  2488  000D5A  D016               	goto	l236
  2489  000D5C  EE20 F001          	lfsr	2,1
  2490  000D60  5013               	movf	arr_to_num@arr,w,c
  2491  000D62  26D9               	addwf	fsr2l,f,c
  2492  000D64  5014               	movf	arr_to_num@arr+1,w,c
  2493  000D66  22DA               	addwfc	fsr2h,f,c
  2494  000D68  0E05               	movlw	5
  2495  000D6A  18DE               	xorwf	postinc2,w,c
  2496  000D6C  A4D8               	btfss	status,2,c
  2497  000D6E  D00C               	goto	l236
  2498  000D70  EE20 F002          	lfsr	2,2
  2499  000D74  5013               	movf	arr_to_num@arr,w,c
  2500  000D76  26D9               	addwf	fsr2l,f,c
  2501  000D78  5014               	movf	arr_to_num@arr+1,w,c
  2502  000D7A  22DA               	addwfc	fsr2h,f,c
  2503  000D7C  0E06               	movlw	6
  2504  000D7E  18DE               	xorwf	postinc2,w,c
  2505  000D80  A4D8               	btfss	status,2,c
  2506  000D82  D002               	goto	l236
  2507                           
  2508                           ;main.c: 109: return validity;
  2509  000D84  501A               	movf	arr_to_num@validity,w,c
  2510  000D86  0012               	return	
  2511  000D88                     l236:
  2512                           
  2513                           ;main.c: 110: for(unsigned char a = 0; a < num_of_elements; a++)
  2514  000D88  0E00               	movlw	0
  2515  000D8A  6E19               	movwf	arr_to_num@a,c
  2516  000D8C  D018               	goto	l237
  2517  000D8E                     
  2518                           ;main.c: 111: {
  2519                           ;main.c: 112: *number = (*number * 10) + arr[a];
  2520  000D8E  5019               	movf	arr_to_num@a,w,c
  2521  000D90  0D01               	mullw	1
  2522  000D92  50F3               	movf	prodl,w,c
  2523  000D94  2413               	addwf	arr_to_num@arr,w,c
  2524  000D96  6ED9               	movwf	fsr2l,c
  2525  000D98  50F4               	movf	prodh,w,c
  2526  000D9A  2014               	addwfc	arr_to_num@arr+1,w,c
  2527  000D9C  6EDA               	movwf	fsr2h,c
  2528  000D9E  50DF               	movf	indf2,w,c
  2529  000DA0  6E18               	movwf	??_arr_to_num& (0+255),c
  2530  000DA2  C016  FFD9         	movff	arr_to_num@number,fsr2l
  2531  000DA6  C017  FFDA         	movff	arr_to_num@number+1,fsr2h
  2532  000DAA  50DF               	movf	indf2,w,c
  2533  000DAC  0D0A               	mullw	10
  2534  000DAE  50F3               	movf	prodl,w,c
  2535  000DB0  2418               	addwf	??_arr_to_num,w,c
  2536  000DB2  C016  FFD9         	movff	arr_to_num@number,fsr2l
  2537  000DB6  C017  FFDA         	movff	arr_to_num@number+1,fsr2h
  2538  000DBA  6EDF               	movwf	indf2,c
  2539  000DBC  2A19               	incf	arr_to_num@a,f,c
  2540  000DBE                     l237:
  2541  000DBE  5015               	movf	arr_to_num@num_of_elements,w,c
  2542  000DC0  5C19               	subwf	arr_to_num@a,w,c
  2543  000DC2  A0D8               	btfss	status,0,c
  2544  000DC4  D7E4               	goto	l238
  2545                           
  2546                           ;main.c: 113: }
  2547                           ;main.c: 114: validity = 1;
  2548  000DC6  0E01               	movlw	1
  2549  000DC8  6E1A               	movwf	arr_to_num@validity,c
  2550                           
  2551                           ;main.c: 115: return validity;
  2552  000DCA  501A               	movf	arr_to_num@validity,w,c
  2553  000DCC  0012               	return	
  2554  000DCE                     __end_of_arr_to_num:
  2555                           	opt stack 0
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           intcon	equ	0xFF2
  2563                           intcon2	equ	0xFF1
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           postdec1	equ	0xFE5
  2567                           fsr1l	equ	0xFE1
  2568                           indf2	equ	0xFDF
  2569                           postinc2	equ	0xFDE
  2570                           fsr2h	equ	0xFDA
  2571                           fsr2l	equ	0xFD9
  2572                           status	equ	0xFD8
  2573                           
  2574 ;; *************** function _ISR *****************
  2575 ;; Defined at:
  2576 ;;		line 141 in file "main.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;		None
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;		None
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      void 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2590 ;;      Params:         0       0       0       0       0       0       0       0       0
  2591 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2592 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2593 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2594 ;;Total ram usage:       18 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		Interrupt level 2
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	intcode
  2604  000008                     __pintcode:
  2605                           	opt stack 0
  2606  000008                     _ISR:
  2607                           	opt stack 28
  2608                           
  2609                           ;incstack = 0
  2610  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2611  00000A  ED31  F006         	call	int_func,f	;refresh shadow registers
  2612                           tblptru	equ	0xFF8
  2613                           tblptrh	equ	0xFF7
  2614                           tblptrl	equ	0xFF6
  2615                           tablat	equ	0xFF5
  2616                           prodh	equ	0xFF4
  2617                           prodl	equ	0xFF3
  2618                           intcon	equ	0xFF2
  2619                           intcon2	equ	0xFF1
  2620                           postinc0	equ	0xFEE
  2621                           wreg	equ	0xFE8
  2622                           postdec1	equ	0xFE5
  2623                           fsr1l	equ	0xFE1
  2624                           indf2	equ	0xFDF
  2625                           postinc2	equ	0xFDE
  2626                           fsr2h	equ	0xFDA
  2627                           fsr2l	equ	0xFD9
  2628                           status	equ	0xFD8
  2629                           
  2630                           	psect	intcode_body
  2631  000C62                     __pintcode_body:
  2632                           	opt stack 28
  2633  000C62                     int_func:
  2634                           	opt stack 28
  2635  000C62  0006               	pop		; remove dummy address from shadow register refresh
  2636  000C64  CFFA F001          	movff	pclath,??_ISR
  2637  000C68  CFFB F002          	movff	pclatu,??_ISR+1
  2638  000C6C  CFE9 F003          	movff	fsr0l,??_ISR+2
  2639  000C70  CFEA F004          	movff	fsr0h,??_ISR+3
  2640  000C74  CFE1 F005          	movff	fsr1l,??_ISR+4
  2641  000C78  CFE2 F006          	movff	fsr1h,??_ISR+5
  2642  000C7C  CFD9 F007          	movff	fsr2l,??_ISR+6
  2643  000C80  CFDA F008          	movff	fsr2h,??_ISR+7
  2644  000C84  CFF3 F009          	movff	prodl,??_ISR+8
  2645  000C88  CFF4 F00A          	movff	prodh,??_ISR+9
  2646  000C8C  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2647  000C90  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2648  000C94  CFF8 F00D          	movff	tblptru,??_ISR+12
  2649  000C98  CFF5 F00E          	movff	tablat,??_ISR+13
  2650  000C9C  C042  F00F         	movff	btemp,??_ISR+14
  2651  000CA0  C043  F010         	movff	btemp+1,??_ISR+15
  2652  000CA4  C044  F011         	movff	btemp+2,??_ISR+16
  2653  000CA8  C045  F012         	movff	btemp+3,??_ISR+17
  2654                           
  2655                           ;main.c: 143: if(RBIF)
  2656  000CAC  A0F2               	btfss	intcon,0,c	;volatile
  2657  000CAE  D008               	goto	i2l257
  2658                           
  2659                           ;main.c: 144: {
  2660                           ;main.c: 145: RBIF = 0;
  2661  000CB0  90F2               	bcf	intcon,0,c	;volatile
  2662                           
  2663                           ;main.c: 146: ((volatile _io_reg*)&systemStateReg)->bit7 = 0;
  2664  000CB2  9E3C               	bcf	_systemStateReg,7,c	;volatile
  2665                           
  2666                           ;main.c: 148: timer1OVFcount = 0;
  2667  000CB4  0E00               	movlw	0
  2668  000CB6  6E39               	movwf	_timer1OVFcount,c	;volatile
  2669                           
  2670                           ;main.c: 149: T1CONbits.TMR1ON = 1;
  2671  000CB8  80CD               	bsf	4045,0,c	;volatile
  2672                           
  2673                           ;main.c: 151: if(PORTB)
  2674  000CBA  5081               	movf	3969,w,c	;volatile
  2675  000CBC  A4D8               	btfss	status,2,c
  2676                           
  2677                           ;main.c: 152: __nop();
  2678  000CBE  F000               	nop	
  2679  000CC0                     i2l257:
  2680                           
  2681                           ;main.c: 153: }
  2682                           ;main.c: 154: if(PIR1bits.TMR1IF)
  2683  000CC0  A09E               	btfss	3998,0,c	;volatile
  2684  000CC2  D00D               	goto	i2l258
  2685                           
  2686                           ;main.c: 155: {
  2687                           ;main.c: 156: timer1OVFcount++;
  2688  000CC4  2A39               	incf	_timer1OVFcount,f,c	;volatile
  2689                           
  2690                           ;main.c: 157: TMR1 = 0;
  2691  000CC6  0E00               	movlw	0
  2692  000CC8  6ECF               	movwf	4047,c	;volatile
  2693  000CCA  0E00               	movlw	0
  2694  000CCC  6ECE               	movwf	4046,c	;volatile
  2695                           
  2696                           ;main.c: 158: if(timer1OVFcount == 10)
  2697  000CCE  0E0A               	movlw	10
  2698  000CD0  1839               	xorwf	_timer1OVFcount,w,c	;volatile
  2699  000CD2  A4D8               	btfss	status,2,c
  2700  000CD4  D003               	goto	i2l259
  2701                           
  2702                           ;main.c: 159: {
  2703                           ;main.c: 160: ((volatile _io_reg*)&systemStateReg)->bit7 = 1;
  2704  000CD6  8E3C               	bsf	_systemStateReg,7,c	;volatile
  2705                           
  2706                           ;main.c: 161: T1CONbits.TMR1ON = 0;
  2707  000CD8  90CD               	bcf	4045,0,c	;volatile
  2708                           
  2709                           ;main.c: 162: ((volatile _io_reg*)&systemStateReg)->bit5 = 1;
  2710  000CDA  8A3C               	bsf	_systemStateReg,5,c	;volatile
  2711  000CDC                     i2l259:
  2712                           
  2713                           ;main.c: 164: }
  2714                           ;main.c: 165: PIR1bits.TMR1IF = 0;
  2715  000CDC  909E               	bcf	3998,0,c	;volatile
  2716  000CDE                     i2l258:
  2717  000CDE  C012  F045         	movff	??_ISR+17,btemp+3
  2718  000CE2  C011  F044         	movff	??_ISR+16,btemp+2
  2719  000CE6  C010  F043         	movff	??_ISR+15,btemp+1
  2720  000CEA  C00F  F042         	movff	??_ISR+14,btemp
  2721  000CEE  C00E  FFF5         	movff	??_ISR+13,tablat
  2722  000CF2  C00D  FFF8         	movff	??_ISR+12,tblptru
  2723  000CF6  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2724  000CFA  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2725  000CFE  C00A  FFF4         	movff	??_ISR+9,prodh
  2726  000D02  C009  FFF3         	movff	??_ISR+8,prodl
  2727  000D06  C008  FFDA         	movff	??_ISR+7,fsr2h
  2728  000D0A  C007  FFD9         	movff	??_ISR+6,fsr2l
  2729  000D0E  C006  FFE2         	movff	??_ISR+5,fsr1h
  2730  000D12  C005  FFE1         	movff	??_ISR+4,fsr1l
  2731  000D16  C004  FFEA         	movff	??_ISR+3,fsr0h
  2732  000D1A  C003  FFE9         	movff	??_ISR+2,fsr0l
  2733  000D1E  C002  FFFB         	movff	??_ISR+1,pclatu
  2734  000D22  C001  FFFA         	movff	??_ISR,pclath
  2735  000D26  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2736  000D28  0011               	retfie		f
  2737  000D2A                     __end_of_ISR:
  2738                           	opt stack 0
  2739                           pclatu	equ	0xFFB
  2740                           pclath	equ	0xFFA
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           prodh	equ	0xFF4
  2746                           prodl	equ	0xFF3
  2747                           intcon	equ	0xFF2
  2748                           intcon2	equ	0xFF1
  2749                           postinc0	equ	0xFEE
  2750                           fsr0h	equ	0xFEA
  2751                           fsr0l	equ	0xFE9
  2752                           wreg	equ	0xFE8
  2753                           postdec1	equ	0xFE5
  2754                           fsr1h	equ	0xFE2
  2755                           fsr1l	equ	0xFE1
  2756                           indf2	equ	0xFDF
  2757                           postinc2	equ	0xFDE
  2758                           fsr2h	equ	0xFDA
  2759                           fsr2l	equ	0xFD9
  2760                           status	equ	0xFD8
  2761                           pclatu	equ	0xFFB
  2762                           pclath	equ	0xFFA
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           intcon	equ	0xFF2
  2770                           intcon2	equ	0xFF1
  2771                           postinc0	equ	0xFEE
  2772                           fsr0h	equ	0xFEA
  2773                           fsr0l	equ	0xFE9
  2774                           wreg	equ	0xFE8
  2775                           postdec1	equ	0xFE5
  2776                           fsr1h	equ	0xFE2
  2777                           fsr1l	equ	0xFE1
  2778                           indf2	equ	0xFDF
  2779                           postinc2	equ	0xFDE
  2780                           fsr2h	equ	0xFDA
  2781                           fsr2l	equ	0xFD9
  2782                           status	equ	0xFD8
  2783                           
  2784                           	psect	rparam
  2785  0000                     pclatu	equ	0xFFB
  2786                           pclath	equ	0xFFA
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           intcon2	equ	0xFF1
  2795                           postinc0	equ	0xFEE
  2796                           fsr0h	equ	0xFEA
  2797                           fsr0l	equ	0xFE9
  2798                           wreg	equ	0xFE8
  2799                           postdec1	equ	0xFE5
  2800                           fsr1h	equ	0xFE2
  2801                           fsr1l	equ	0xFE1
  2802                           indf2	equ	0xFDF
  2803                           postinc2	equ	0xFDE
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808                           	psect	temp
  2809  000042                     btemp:
  2810                           	opt stack 0
  2811  000042                     	ds	1
  2812  0000                     int$flags	set	btemp
  2813  0000                     wtemp6	set	btemp+1
  2814                           pclatu	equ	0xFFB
  2815                           pclath	equ	0xFFA
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           prodh	equ	0xFF4
  2821                           prodl	equ	0xFF3
  2822                           intcon	equ	0xFF2
  2823                           intcon2	equ	0xFF1
  2824                           postinc0	equ	0xFEE
  2825                           fsr0h	equ	0xFEA
  2826                           fsr0l	equ	0xFE9
  2827                           wreg	equ	0xFE8
  2828                           postdec1	equ	0xFE5
  2829                           fsr1h	equ	0xFE2
  2830                           fsr1l	equ	0xFE1
  2831                           indf2	equ	0xFDF
  2832                           postinc2	equ	0xFDE
  2833                           fsr2h	equ	0xFDA
  2834                           fsr2l	equ	0xFD9
  2835                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    14
    Data        5
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      65
    BANK0           160     17     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eepromCode	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    passcodeCompare@keybuffer1	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    clear_keyArray@arr	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    arr_to_num@arr	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    arr_to_num@number	PTR unsigned char  size(2) Largest target is 1
		 -> main@locker_num(BANK0[1]), 

    getKey@KeypadStatus	PTR struct . size(2) Largest target is 2
		 -> main@currentKeypadStatus(BANK0[2]), buttonPressedIndicator@KeypadStatus(COMRAM[2]), 

    eepromWriteCode@codeBuffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_passcodeCompare
    _passcodeCompare->_readEEPROM
    _eepromWriteCode->_writeEEPROM
    _check_password_presence->_readEEPROM

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    6225
                                              0 BANK0     17    17      0
                         _arr_to_num
            _check_lock_num_validity
            _check_password_presence
                     _clear_keyArray
                    _eepromWriteCode
                             _getKey
                   _initControllerIO
                         _initKeypad
                   _initStandbyTimer
                    _passcodeCompare
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _passcodeCompare                                     14    10      4     564
                                             19 COMRAM    14    10      4
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _initStandbyTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initControllerIO                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getKey                                               4     2      2    1778
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _eepromWriteCode                                      5     2      3     862
                                             21 COMRAM     5     2      3
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _writeEEPROM                                          3     2      1     456
                                             18 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _clear_keyArray                                       3     1      2     400
                                             18 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _check_password_presence                              4     4      0     114
                                             19 COMRAM     4     4      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _readEEPROM                                           1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_lock_num_validity                              2     2      0      69
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _arr_to_num                                           8     3      5     747
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _arr_to_num
   _check_lock_num_validity
   _check_password_presence
     _readEEPROM
   _clear_keyArray
   _eepromWriteCode
     _writeEEPROM
   _getKey
   _initControllerIO
   _initKeypad
   _initStandbyTimer
   _passcodeCompare
     _readEEPROM
   _readEEPROM
   _writeEEPROM

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     11      75       5       73.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      41       1       69.1%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B6      11        0.0%
DATA                 0      0      B6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Mar 19 22:51:40 2018

                              l17 0EC8                                l18 0EAA  
                              l51 086C                                l61 0914  
                              l70 09CC                                l54 0888  
                              l63 092C                                l47 0844  
                              l72 0A00                                l73 0A38  
                              l65 0960                                l66 0990  
                              l58 08C0                                l75 0A6C  
                              l59 08F0                                l68 09B4  
                              l77 0AA0                                l79 0AD4  
                     __CFG_BOR$ON 000000                       __CFG_BORV$3 000000  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                             l310 0E18                               l305 0DEA  
                             l234 0D44                               l250 0F2A  
                             l307 0E1A                               l236 0D88  
                             l244 0F68                               l308 0DF0  
                             l237 0DBE                               l309 0E14  
                             l238 0D8E                               l246 0F6C  
                             l280 0BA4                               l273 0B3C  
                             l266 0F3A                               l295 0C40  
                             l279 0BEC  eeprom_functions@eepromCodeBuffer 0060  
                    __CFG_CPB$OFF 000000                               _PR2 000FCB  
                    __CFG_CPD$OFF 000000                               _ISR 0008  
                             prod 000FF3                               wreg 000FE8  
                    __CFG_LVP$OFF 000000                              ?_ISR 0001  
                    __CFG_WDT$OFF 000000                              l2022 097E  
                            l2032 09A8                              l2204 0DE4  
                            l2312 0C2E                              l2316 0C3A  
                            l2186 0F32                              l2292 0BDE  
                            l1922 0832                              l1860 0ED4  
                            l1932 0860                              l1972 08DE  
                            l1982 0908                              _LATB 000F8A  
                            u1095 0EFE                              u1096 0F00  
                            u1440 0E4A                              u1607 081E  
                            u1617 084E                              u1707 09BE  
                            u1627 0876                              u1717 09D6  
                            u1637 0892                              u1727 0A0E  
                            u1647 08CE                              u1737 0A42  
                            u1657 08FA                              u1747 0A76  
                            u1667 091E                              u1757 0AAA  
                            u1677 0936                              u1687 096E  
                            u1697 099A                              _RBIF 007F90  
                            _TMR1 000FCE                   _passcodeCompare 0DCE  
                     arr_to_num@a 0019                              _main 0AF0  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0042  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
                     _writeEEPROM 0ED2                             ??_ISR 0001  
                  _systemStateReg 003C   check_lock_num_validity@lock_num 0014  
                   __CFG_PLLDIV$1 000000                writeEEPROM@address 0014  
                           ?_main 0001                             _EEADR 000FA9  
 check_lock_num_validity@validity 0013                             _T2CON 000FCA  
                           i2l257 0CC0                             i2l258 0CDE  
                           i2l259 0CDC                             _PORTB 000F81  
                   __CFG_USBDIV$1 000000                             _TRISB 000F93  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
       ??_check_lock_num_validity 0013                             main@a 00C4  
          _factoryResetCodeLenght 0041                             pclath 000FFA  
                           tablat 000FF5                             status 000FD8  
                           wtemp6 0043                    __CFG_ICPRT$OFF 000000  
         __size_of_clear_keyArray 0024                   __initialization 0E4E  
                    __end_of_main 0C62                   _systemStateReg2 003B  
                _initStandbyTimer 0F70                            ??_main 0022  
                   __activetblptr 000001             _tempCodeKeyPressCount 0035  
  eepromWriteCode@eepromWriteAddr 0019           __end_of_passcodeCompare 0E4E  
                 __CFG_CCP2MX$OFF 000000          __size_of_eepromWriteCode 003A  
                          _EEDATA 000FA8                            _CCPR1L 000FBE  
                          _EECON2 000FA7                     _keyPressCount 003A  
               main@keypressArray 00C5                   _defaultPassCode 0801  
                          _TRISA3 007C93   passcodeCompare@storedCodeLenght 001F  
         main@currentKeypadStatus 00D3          ?_check_password_presence 0001  
                  __CFG_XINST$OFF 000000   __end_of_check_lock_num_validity 0F70  
                   arr_to_num@arr 0013                  _factoryResetCode 003D  
               ?_initControllerIO 0001                    __CFG_STVREN$ON 000000  
                          _getKey 0810                ??_initControllerIO 0013  
                          clear_0 0E74                            clear_1 0E80  
                    __pdataCOMRAM 003D                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                        __accesstop 0060  
         __end_of__initialization 0E86                   __CFG_PBADEN$OFF 000000  
                   ___rparam_used 000001                    __pcstackCOMRAM 0001  
      passcodeCompare@compareAddr 0017           __end_of_defaultPassCode 080A  
                ?_passcodeCompare 0014                    _tempCodeBuffer 0079  
                      __pbssBANK0 0060                    _clear_keyArray 0F2E  
               ??_eepromWriteCode 0019                      ?_writeEEPROM 0013  
                         ?_getKey 0013                           _CCP1CON 000FBD  
                passcodeCompare@i 0020                        _eepromCode 002E  
                 clear_keyArray@a 0015                  _defaultPassCode2 080A  
                      _arr_to_num 0D2A            __end_of_clear_keyArray 0F52  
   __end_of_defaultPassCodeLenght 080F                   __CFG_VREGEN$OFF 000000  
        __end_of_initStandbyTimer 0F80                        _readEEPROM 0F8C  
       passcodeCompare@keybuffer1 0014                    main@locker_num 00D2  
          main@currentSystemState 00D0                           __Hparam 0000  
     check_password_presence@addr 0017                           __Lparam 0000  
                      _initKeypad 0F80            _defaultPassCode2Lenght 080D  
                 __size_of_getKey 02E0                      __psmallconst 0800  
                         __pcinit 0E4E                           __ramtop 0800  
                         __ptext0 0AF0                           __ptext1 0DCE  
                         __ptext2 0F70                           __ptext3 0F80  
                         __ptext4 0F9E                           __ptext5 0810  
                         __ptext6 0E98                           __ptext7 0ED2  
                         __ptext8 0F2E                           __ptext9 0F04  
                    __size_of_ISR 0D22                         _T1CONbits 000FCD  
                eepromWriteCode@i 001A                    __pintcode_body 0C62  
            end_of_initialization 0E86                   ?_clear_keyArray 0013  
                         int_func 0C62                 clear_keyArray@arr 0013  
         passcodeCompare@validity 0021                timer@timerOVFcount 0032  
                  _timer1OVFcount 0039                           postdec1 000FE5  
                         postinc0 000FEE                           postinc2 000FDE  
                  _timer2OVFcount 0030                      _LASTPASSCODE 0036  
__size_of_check_password_presence 002A          ?_check_lock_num_validity 0001  
       __size_of_initControllerIO 0002                       ?_arr_to_num 0013  
               readEEPROM@address 0013                        _soundStuff 0028  
                     ?_readEEPROM 0001                  writeEEPROM@datas 0013  
                     ?_initKeypad 0001              __size_of_writeEEPROM 0032  
                   __pidataCOMRAM 0F98                    __end_of_getKey 0AF0  
             getKey@buttonPressed 0016                arr_to_num@validity 001A  
             start_initialization 0E4E                       __end_of_ISR 0D2A  
                 _eepromWriteCode 0E98          __end_of_defaultPassCode2 080D  
             __size_of_arr_to_num 00A4                          ??_getKey 0015  
                __CFG_LPT1OSC$OFF 000000               __size_of_readEEPROM 000C  
                     __pbssCOMRAM 0022                     __pcstackBANK0 00C4  
                arr_to_num@number 0016               __size_of_initKeypad 000C  
        __size_of_passcodeCompare 0080                 ?_initStandbyTimer 0001  
              ??_initStandbyTimer 0013                         __pintcode 0008  
                       _bufferPtr 0037           _check_password_presence 0F04  
         __end_of_eepromWriteCode 0ED2              main@numOfKeysPressed 00D1  
                     __smallconst 0800                         _keyBuffer 0092  
                ??_clear_keyArray 0015         arr_to_num@num_of_elements 0015  
                _initControllerIO 0F9E      passcodeCompare@compareLenght 0016  
              getKey@KeypadStatus 0013    __end_of_defaultPassCode2Lenght 080E  
           _defaultPassCodeLenght 080E                          _PIE1bits 000F9D  
           writeEEPROM@gie_Status 0015                          _PIR1bits 000F9E  
                __CFG_WDTPS$32768 000000   check_password_presence@lock_num 0015  
 check_password_presence@validity 0016                      ??_arr_to_num 0018  
                     _INTCON2bits 000FF1                         copy_data0 0E62  
__size_of_check_lock_num_validity 001E                      ??_readEEPROM 0013  
                      _EECON1bits 000FA6                          __Hrparam 0000  
                        __Lrparam 0000                      __Lsmallconst 0800  
                    ??_initKeypad 0013                 ??_passcodeCompare 0018  
       ??_check_password_presence 0014                     _timerOVFcount 0034  
              __end_of_arr_to_num 0DCE                  ?_eepromWriteCode 0016  
           __CFG_FOSC$INTOSCIO_EC 000000                __end_of_readEEPROM 0F98  
                        __ptext10 0F8C                          __ptext11 0F52  
                        __ptext12 0D2A                __end_of_initKeypad 0F8C  
                   __size_of_main 0172          check_password_presence@a 0014  
                   ??_writeEEPROM 0014                          int$flags 0042  
                        main@addr 00CF                          _soundOut 0022  
           __CFG_CPUDIV$OSC1_PLL2 000000                        _INTCONbits 000FF2  
 __end_of_check_password_presence 0F2E                          intlevel2 0000  
               _currentTimerState 0033             _wrongCodeEnteredCount 0038  
                _eepromCodeBuffer 00AB          __end_of_initControllerIO 0FA0  
             __end_of_writeEEPROM 0F04         __size_of_initStandbyTimer 0010  
         _check_lock_num_validity 0F52         eepromWriteCode@codeBuffer 0017  
       eepromWriteCode@codeLenght 0016  

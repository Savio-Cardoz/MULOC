

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Mar 25 11:55:16 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.44
    36                           ; Generated 14/09/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4550 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  001020                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _factoryResetCode
    75  001020  08                 	db	8
    76  001021  00                 	db	0
    77  001022  08                 	db	8
    78  001023  00                 	db	0
    79                           
    80                           ;initializer for _factoryResetCodeLenght
    81  001024  04                 	db	4
    82                           
    83                           	psect	smallconst
    84  000800                     __psmallconst:
    85                           	opt stack 0
    86  000800  00                 	db	0
    87  000801                     _defaultPassCode:
    88                           	opt stack 0
    89  000801  09                 	db	9
    90  000802  08                 	db	8
    91  000803  07                 	db	7
    92  000804  06                 	db	6
    93  000805  05                 	db	5
    94  000806  04                 	db	4
    95  000807  03                 	db	3
    96  000808  02                 	db	2
    97  000809  01                 	db	1
    98  00080A                     __end_of_defaultPassCode:
    99                           	opt stack 0
   100  00080A                     _defaultPassCode2:
   101                           	opt stack 0
   102  00080A  01                 	db	1
   103  00080B  02                 	db	2
   104  00080C  03                 	db	3
   105  00080D                     __end_of_defaultPassCode2:
   106                           	opt stack 0
   107  00080D                     _defaultPassCode2Lenght:
   108                           	opt stack 0
   109  00080D  03                 	db	3
   110  00080E                     __end_of_defaultPassCode2Lenght:
   111                           	opt stack 0
   112  00080E                     _defaultPassCodeLenght:
   113                           	opt stack 0
   114  00080E  09                 	db	9
   115  00080F                     __end_of_defaultPassCodeLenght:
   116                           	opt stack 0
   117  0000                     _LATAbits	set	3977
   118  0000                     _TRISAbits	set	3986
   119  0000                     _PORTB	set	3969
   120  0000                     _LATB	set	3978
   121  0000                     _TRISB	set	3987
   122  0000                     _TRISA3	set	31891
   123  0000                     _TMR1	set	4046
   124  0000                     _CMCON	set	4020
   125  0000                     _ADCON1	set	4033
   126  0000                     _PIR1bits	set	3998
   127  0000                     _PIE1bits	set	3997
   128  0000                     _T1CONbits	set	4045
   129  0000                     _CCPR1L	set	4030
   130  0000                     _T2CON	set	4042
   131  0000                     _PR2	set	4043
   132  0000                     _CCP1CON	set	4029
   133  0000                     _EECON2	set	4007
   134  0000                     _EEDATA	set	4008
   135  0000                     _EEADR	set	4009
   136  0000                     _EECON1bits	set	4006
   137  0000                     _INTCON2bits	set	4081
   138  0000                     _INTCONbits	set	4082
   139  0000                     _RBIF	set	32656
   140                           
   141                           ; #config settings
   142  00080F  00                 	db	0	; dummy byte at the end
   143  0000                     
   144                           	psect	cinit
   145  000E62                     __pcinit:
   146                           	opt stack 0
   147  000E62                     start_initialization:
   148                           	opt stack 0
   149  000E62                     __initialization:
   150                           	opt stack 0
   151                           
   152                           ; Initialize objects allocated to COMRAM (5 bytes)
   153                           ; load TBLPTR registers with __pidataCOMRAM
   154  000E62  0E20               	movlw	low __pidataCOMRAM
   155  000E64  6EF6               	movwf	tblptrl,c
   156  000E66  0E10               	movlw	high __pidataCOMRAM
   157  000E68  6EF7               	movwf	tblptrh,c
   158  000E6A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   159  000E6C  6EF8               	movwf	tblptru,c
   160  000E6E  EE00  F03D         	lfsr	0,__pdataCOMRAM
   161  000E72  EE10 F005          	lfsr	1,5
   162  000E76                     copy_data0:
   163  000E76  0009               	tblrd		*+
   164  000E78  CFF5 FFEE          	movff	tablat,postinc0
   165  000E7C  50E5               	movf	postdec1,w,c
   166  000E7E  50E1               	movf	fsr1l,w,c
   167  000E80  E1FA               	bnz	copy_data0
   168                           
   169                           ; Clear objects allocated to BANK0 (100 bytes)
   170  000E82  EE00  F060         	lfsr	0,__pbssBANK0
   171  000E86  0E64               	movlw	100
   172  000E88                     clear_0:
   173  000E88  6AEE               	clrf	postinc0,c
   174  000E8A  06E8               	decf	wreg,f,c
   175  000E8C  E1FD               	bnz	clear_0
   176                           
   177                           ; Clear objects allocated to COMRAM (27 bytes)
   178  000E8E  EE00  F022         	lfsr	0,__pbssCOMRAM
   179  000E92  0E1B               	movlw	27
   180  000E94                     clear_1:
   181  000E94  6AEE               	clrf	postinc0,c
   182  000E96  06E8               	decf	wreg,f,c
   183  000E98  E1FD               	bnz	clear_1
   184  000E9A                     end_of_initialization:
   185                           	opt stack 0
   186  000E9A                     __end_of__initialization:
   187                           	opt stack 0
   188  000E9A  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   189  000E9C  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   190  000E9E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   191  000EA0  6EF8               	movwf	tblptru,c
   192  000EA2  0E08               	movlw	high __Lsmallconst
   193  000EA4  6EF7               	movwf	tblptrh,c
   194  000EA6  0100               	movlb	0
   195  000EA8  EF78  F005         	goto	_main	;jump to C main() function
   196                           tblptru	equ	0xFF8
   197                           tblptrh	equ	0xFF7
   198                           tblptrl	equ	0xFF6
   199                           tablat	equ	0xFF5
   200                           postinc0	equ	0xFEE
   201                           wreg	equ	0xFE8
   202                           postdec1	equ	0xFE5
   203                           fsr1l	equ	0xFE1
   204                           
   205                           	psect	bssCOMRAM
   206  000022                     __pbssCOMRAM:
   207                           	opt stack 0
   208  000022                     _soundOut:
   209                           	opt stack 0
   210  000022                     	ds	6
   211  000028                     _soundStuff:
   212                           	opt stack 0
   213  000028                     	ds	6
   214  00002E                     _eepromCode:
   215                           	opt stack 0
   216  00002E                     	ds	2
   217  000030                     _timer2OVFcount:
   218                           	opt stack 0
   219  000030                     	ds	2
   220  000032                     	ds	1
   221  000033                     _currentTimerState:
   222                           	opt stack 0
   223  000033                     	ds	1
   224  000034                     	ds	1
   225  000035                     _tempCodeKeyPressCount:
   226                           	opt stack 0
   227  000035                     	ds	1
   228  000036                     _LASTPASSCODE:
   229                           	opt stack 0
   230  000036                     	ds	1
   231  000037                     _bufferPtr:
   232                           	opt stack 0
   233  000037                     	ds	1
   234  000038                     _wrongCodeEnteredCount:
   235                           	opt stack 0
   236  000038                     	ds	1
   237  000039                     _timer1OVFcount:
   238                           	opt stack 0
   239  000039                     	ds	1
   240  00003A                     _keyPressCount:
   241                           	opt stack 0
   242  00003A                     	ds	1
   243  00003B                     _systemStateReg2:
   244                           	opt stack 0
   245  00003B                     	ds	1
   246  00003C                     _systemStateReg:
   247                           	opt stack 0
   248  00003C                     	ds	1
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           tblptrl	equ	0xFF6
   252                           tablat	equ	0xFF5
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           postdec1	equ	0xFE5
   256                           fsr1l	equ	0xFE1
   257                           
   258                           	psect	dataCOMRAM
   259  00003D                     __pdataCOMRAM:
   260                           	opt stack 0
   261  00003D                     _factoryResetCode:
   262                           	opt stack 0
   263  00003D                     	ds	4
   264  000041                     _factoryResetCodeLenght:
   265                           	opt stack 0
   266  000041                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	bssBANK0
   277  000060                     __pbssBANK0:
   278                           	opt stack 0
   279  000060                     	ds	25
   280  000079                     _tempCodeBuffer:
   281                           	opt stack 0
   282  000079                     	ds	25
   283  000092                     _keyBuffer:
   284                           	opt stack 0
   285  000092                     	ds	25
   286  0000AB                     	ds	25
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	cstackBANK0
   297  0000C4                     __pcstackBANK0:
   298                           	opt stack 0
   299  0000C4                     main@a:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x0
   303  0000C4                     	ds	1
   304  0000C5                     main@keypressArray:
   305                           	opt stack 0
   306                           
   307                           ; 10 bytes @ 0x1
   308  0000C5                     	ds	10
   309  0000CF                     main@addr:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0xB
   313  0000CF                     	ds	1
   314  0000D0                     main@currentSystemState:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0xC
   318  0000D0                     	ds	1
   319  0000D1                     main@numOfKeysPressed:
   320                           	opt stack 0
   321                           
   322                           ; 1 bytes @ 0xD
   323  0000D1                     	ds	1
   324  0000D2                     main@locker_num:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0xE
   328  0000D2                     	ds	1
   329  0000D3                     main@currentKeypadStatus:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0xF
   333  0000D3                     	ds	2
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           postdec1	equ	0xFE5
   341                           fsr1l	equ	0xFE1
   342                           
   343                           	psect	cstackCOMRAM
   344  000001                     __pcstackCOMRAM:
   345                           	opt stack 0
   346  000001                     ??_ISR:
   347  000001                     
   348                           ; 2 bytes @ 0x0
   349  000001                     	ds	18
   350  000013                     ??_beep:
   351  000013                     ??_beep_ok:
   352  000013                     writeEEPROM@datas:
   353                           	opt stack 0
   354  000013                     readEEPROM@address:
   355                           	opt stack 0
   356  000013                     check_lock_num_validity@validity:
   357                           	opt stack 0
   358  000013                     getKey@KeypadStatus:
   359                           	opt stack 0
   360  000013                     arr_to_num@arr:
   361                           	opt stack 0
   362  000013                     clear_keyArray@arr:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x12
   366  000013                     	ds	1
   367  000014                     writeEEPROM@address:
   368                           	opt stack 0
   369  000014                     check_lock_num_validity@lock_num:
   370                           	opt stack 0
   371  000014                     check_password_presence@a:
   372                           	opt stack 0
   373  000014                     passcodeCompare@keybuffer1:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x13
   377  000014                     	ds	1
   378  000015                     ??_getKey:
   379  000015                     writeEEPROM@gie_Status:
   380                           	opt stack 0
   381  000015                     arr_to_num@num_of_elements:
   382                           	opt stack 0
   383  000015                     check_password_presence@lock_num:
   384                           	opt stack 0
   385  000015                     clear_keyArray@a:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x14
   389  000015                     	ds	1
   390  000016                     eepromWriteCode@codeLenght:
   391                           	opt stack 0
   392  000016                     getKey@buttonPressed:
   393                           	opt stack 0
   394  000016                     check_password_presence@validity:
   395                           	opt stack 0
   396  000016                     passcodeCompare@compareLenght:
   397                           	opt stack 0
   398  000016                     arr_to_num@number:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x15
   402  000016                     	ds	1
   403  000017                     check_password_presence@addr:
   404                           	opt stack 0
   405  000017                     passcodeCompare@compareAddr:
   406                           	opt stack 0
   407  000017                     eepromWriteCode@codeBuffer:
   408                           	opt stack 0
   409  000017                     buttonPressedIndicator@keypad_state:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x16
   413  000017                     	ds	1
   414  000018                     ??_passcodeCompare:
   415  000018                     ??_arr_to_num:
   416                           
   417                           ; 1 bytes @ 0x17
   418  000018                     	ds	1
   419  000019                     eepromWriteCode@eepromWriteAddr:
   420                           	opt stack 0
   421  000019                     arr_to_num@a:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x18
   425  000019                     	ds	1
   426  00001A                     eepromWriteCode@i:
   427                           	opt stack 0
   428  00001A                     arr_to_num@validity:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x19
   432  00001A                     	ds	5
   433  00001F                     passcodeCompare@storedCodeLenght:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x1E
   437  00001F                     	ds	1
   438  000020                     passcodeCompare@i:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x1F
   442  000020                     	ds	1
   443  000021                     passcodeCompare@validity:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x20
   447  000021                     	ds	1
   448  000022                     tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1l	equ	0xFE1
   456                           
   457                           ; 1 bytes @ 0x21
   458 ;;
   459 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   460 ;;
   461 ;; *************** function _main *****************
   462 ;; Defined at:
   463 ;;		line 320 in file "main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;  keypressArra   10    1[BANK0 ] unsigned char [10]
   468 ;;  currentKeypa    2   15[BANK0 ] struct .
   469 ;;  locker_num      1   14[BANK0 ] unsigned char 
   470 ;;  numOfKeysPre    1   13[BANK0 ] unsigned char 
   471 ;;  currentSyste    1   12[BANK0 ] enum E4103
   472 ;;  addr            1   11[BANK0 ] unsigned char 
   473 ;;  a               1    0[BANK0 ] unsigned char 
   474 ;; Return value:  Size  Location     Type
   475 ;;                  2  283[None  ] int 
   476 ;; Registers used:
   477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   483 ;;      Params:         0       0       0       0       0       0       0       0       0
   484 ;;      Locals:         0      17       0       0       0       0       0       0       0
   485 ;;      Temps:          0       0       0       0       0       0       0       0       0
   486 ;;      Totals:         0      17       0       0       0       0       0       0       0
   487 ;;Total ram usage:       17 bytes
   488 ;; Hardware stack levels required when called:    3
   489 ;; This function calls:
   490 ;;		_arr_to_num
   491 ;;		_beep
   492 ;;		_beep_ok
   493 ;;		_buttonPressedIndicator
   494 ;;		_check_lock_num_validity
   495 ;;		_check_password_presence
   496 ;;		_clear_keyArray
   497 ;;		_eepromWriteCode
   498 ;;		_getKey
   499 ;;		_initControllerIO
   500 ;;		_initKeypad
   501 ;;		_initStandbyTimer
   502 ;;		_passcodeCompare
   503 ;;		_readEEPROM
   504 ;;		_writeEEPROM
   505 ;; This function is called by:
   506 ;;		Startup code after reset
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510                           	psect	text0
   511  000AF0                     __ptext0:
   512                           	opt stack 0
   513  000AF0                     _main:
   514                           	opt stack 28
   515                           
   516                           ;main.c: 322: keypadStatus currentKeypadStatus;
   517                           ;main.c: 323: systemState_t currentSystemState = NORMAL;
   518                           
   519                           ;incstack = 0
   520  000AF0  0E00               	movlw	0
   521  000AF2  0100               	movlb	0	; () banked
   522  000AF4  6FD0               	movwf	main@currentSystemState& (0+255),b
   523                           
   524                           ;main.c: 324: unsigned char keypressArray[10];
   525                           ;main.c: 325: unsigned char numOfKeysPressed = 0;
   526  000AF6  0E00               	movlw	0
   527  000AF8  6FD1               	movwf	main@numOfKeysPressed& (0+255),b
   528                           
   529                           ;main.c: 326: unsigned char locker_num = 0;
   530  000AFA  0E00               	movlw	0
   531  000AFC  6FD2               	movwf	main@locker_num& (0+255),b
   532                           
   533                           ;main.c: 327: unsigned char addr = 0;
   534  000AFE  0E00               	movlw	0
   535  000B00  6FCF               	movwf	main@addr& (0+255),b
   536                           
   537                           ; BSR set to: 0
   538                           ;main.c: 328: initControllerIO();
   539  000B02  EC04  F008         	call	_initControllerIO	;wreg free
   540                           
   541                           ;main.c: 329: initKeypad();
   542  000B06  ECFD  F007         	call	_initKeypad	;wreg free
   543                           
   544                           ;main.c: 330: initStandbyTimer();
   545  000B0A  ECF5  F007         	call	_initStandbyTimer	;wreg free
   546                           
   547                           ;main.c: 332: INTCONbits.PEIE = 1;
   548  000B0E  8CF2               	bsf	intcon,6,c	;volatile
   549                           
   550                           ;main.c: 333: INTCONbits.GIE = 1;
   551  000B10  8EF2               	bsf	intcon,7,c	;volatile
   552                           
   553                           ;main.c: 346: clear_keyArray(keypressArray);
   554  000B12  0EC5               	movlw	low main@keypressArray
   555  000B14  6E13               	movwf	clear_keyArray@arr,c
   556  000B16  0E00               	movlw	high main@keypressArray
   557  000B18  6E14               	movwf	clear_keyArray@arr+1,c
   558  000B1A  ECBD  F007         	call	_clear_keyArray	;wreg free
   559                           
   560                           ;main.c: 348: writeEEPROM(0, 0x01);
   561  000B1E  0E01               	movlw	1
   562  000B20  6E13               	movwf	writeEEPROM@datas,c
   563  000B22  0E00               	movlw	0
   564  000B24  EC8F  F007         	call	_writeEEPROM
   565                           
   566                           ;main.c: 349: writeEEPROM(1, 0x01);
   567  000B28  0E01               	movlw	1
   568  000B2A  6E13               	movwf	writeEEPROM@datas,c
   569  000B2C  0E01               	movlw	1
   570  000B2E  EC8F  F007         	call	_writeEEPROM
   571                           
   572                           ;main.c: 350: char a = readEEPROM(0);
   573  000B32  0E00               	movlw	0
   574  000B34  EC0A  F008         	call	_readEEPROM
   575  000B38  0100               	movlb	0	; () banked
   576  000B3A  6FC4               	movwf	main@a& (0+255),b
   577  000B3C                     
   578                           ;main.c: 353: {
   579                           ;main.c: 355: getKey(&currentKeypadStatus);
   580                           
   581                           ; BSR set to: 0
   582  000B3C  0ED3               	movlw	low main@currentKeypadStatus
   583  000B3E  6E13               	movwf	getKey@KeypadStatus,c
   584  000B40  0E00               	movlw	high main@currentKeypadStatus
   585  000B42  6E14               	movwf	getKey@KeypadStatus+1,c
   586  000B44  EC08  F004         	call	_getKey	;wreg free
   587                           
   588                           ;main.c: 357: if(currentKeypadStatus.keyPressIndicator == 1)
   589  000B48  0100               	movlb	0	; () banked
   590  000B4A  A1D3               	btfss	main@currentKeypadStatus& (0+255),0,b
   591  000B4C  D7F7               	goto	l284
   592                           
   593                           ; BSR set to: 0
   594                           ;main.c: 358: {
   595                           ;main.c: 359: beep();
   596  000B4E  ECEA  F007         	call	_beep	;wreg free
   597                           
   598                           ;main.c: 360: if(currentKeypadStatus.keyPressed == SP_FUNC_A)
   599  000B52  0E0B               	movlw	11
   600  000B54  0100               	movlb	0	; () banked
   601  000B56  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   602  000B58  B4D8               	btfsc	status,2,c
   603  000B5A  D087               	goto	l311
   604                           
   605                           ; BSR set to: 0
   606                           ;main.c: 364: else if(currentKeypadStatus.keyPressed == SP_FUNC_B)
   607                           
   608                           ; BSR set to: 0
   609                           
   610                           ; BSR set to: 0
   611                           ;main.c: 361: {
   612                           ;main.c: 363: }
   613  000B5C  0E0C               	movlw	12
   614  000B5E  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   615  000B60  B4D8               	btfsc	status,2,c
   616  000B62  D083               	goto	l311
   617                           
   618                           ; BSR set to: 0
   619                           ;main.c: 368: else if(currentKeypadStatus.keyPressed == SP_FUNC_ENTER)
   620                           
   621                           ; BSR set to: 0
   622                           
   623                           ; BSR set to: 0
   624                           ;main.c: 365: {
   625                           ;main.c: 367: }
   626  000B64  0E0F               	movlw	15
   627  000B66  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   628  000B68  A4D8               	btfss	status,2,c
   629  000B6A  D045               	goto	l290
   630                           
   631                           ; BSR set to: 0
   632                           ;main.c: 369: {
   633                           ;main.c: 371: if(currentSystemState == NORMAL)
   634  000B6C  51D0               	movf	main@currentSystemState& (0+255),w,b
   635  000B6E  A4D8               	btfss	status,2,c
   636  000B70  D01E               	goto	l291
   637                           
   638                           ; BSR set to: 0
   639                           ;main.c: 372: {
   640                           ;main.c: 374: if(0 == arr_to_num(keypressArray, numOfKeysPressed, &locker_num))
   641  000B72  0EC5               	movlw	low main@keypressArray
   642  000B74  6E13               	movwf	arr_to_num@arr,c
   643  000B76  0E00               	movlw	high main@keypressArray
   644  000B78  6E14               	movwf	arr_to_num@arr+1,c
   645  000B7A  C0D1  F015         	movff	main@numOfKeysPressed,arr_to_num@num_of_elements
   646  000B7E  0ED2               	movlw	low main@locker_num
   647  000B80  6E16               	movwf	arr_to_num@number,c
   648  000B82  0E00               	movlw	high main@locker_num
   649  000B84  6E17               	movwf	arr_to_num@number+1,c
   650  000B86  EC9F  F006         	call	_arr_to_num	;wreg free
   651  000B8A  0900               	iorlw	0
   652  000B8C  B4D8               	btfsc	status,2,c
   653  000B8E  EF07  F000         	goto	start
   654                           
   655                           ;main.c: 380: else if(0 == check_lock_num_validity(locker_num))
   656                           
   657                           ;main.c: 378: }
   658                           
   659                           ;main.c: 375: {
   660                           ;main.c: 377: break;
   661  000B92  0100               	movlb	0	; () banked
   662  000B94  51D2               	movf	main@locker_num& (0+255),w,b
   663  000B96  ECCF  F007         	call	_check_lock_num_validity
   664  000B9A  0900               	iorlw	0
   665  000B9C  B4D8               	btfsc	status,2,c
   666  000B9E  EF07  F000         	goto	start
   667                           
   668                           ;main.c: 385: else
   669                           ;main.c: 386: {
   670                           ;main.c: 387: beep_ok();
   671                           
   672                           ;main.c: 384: }
   673                           
   674                           ;main.c: 381: {
   675                           ;main.c: 383: break;
   676  000BA2  EC73  F007         	call	_beep_ok	;wreg free
   677                           
   678                           ;main.c: 388: currentSystemState = UID_ENTERED;
   679  000BA6  0E01               	movlw	1
   680  000BA8  0100               	movlb	0	; () banked
   681  000BAA  6FD0               	movwf	main@currentSystemState& (0+255),b
   682                           
   683                           ; BSR set to: 0
   684                           ;main.c: 389: }
   685                           ;main.c: 390: }
   686                           
   687                           ; BSR set to: 0
   688  000BAC  D01D               	goto	l2354
   689  000BAE                     l291:
   690                           
   691                           ; BSR set to: 0
   692                           ;main.c: 391: else if(currentSystemState == UID_ENTERED)
   693                           
   694                           ; BSR set to: 0
   695  000BAE  05D0               	decf	main@currentSystemState& (0+255),w,b
   696  000BB0  A4D8               	btfss	status,2,c
   697  000BB2  D01A               	goto	l2354
   698                           
   699                           ; BSR set to: 0
   700                           ;main.c: 392: {
   701                           ;main.c: 394: if(0 == check_password_presence(locker_num))
   702  000BB4  51D2               	movf	main@locker_num& (0+255),w,b
   703  000BB6  ECA8  F007         	call	_check_password_presence
   704  000BBA  0900               	iorlw	0
   705  000BBC  B4D8               	btfsc	status,2,c
   706  000BBE  EF07  F000         	goto	start
   707                           
   708                           ;main.c: 399: else
   709                           ;main.c: 400: {
   710                           ;main.c: 401: addr = (locker_num - 1) * 10;
   711                           
   712                           ;main.c: 398: }
   713                           
   714                           ;main.c: 395: {
   715                           ;main.c: 397: break;
   716  000BC2  0100               	movlb	0	; () banked
   717  000BC4  05D2               	decf	main@locker_num& (0+255),w,b
   718  000BC6  0D0A               	mullw	10
   719  000BC8  CFF3 F0CF          	movff	prodl,main@addr
   720                           
   721                           ; BSR set to: 0
   722                           ;main.c: 402: if(0 == passcodeCompare(keypressArray, numOfKeysPressed, addr))
   723  000BCC  0EC5               	movlw	low main@keypressArray
   724  000BCE  6E14               	movwf	passcodeCompare@keybuffer1,c
   725  000BD0  0E00               	movlw	high main@keypressArray
   726  000BD2  6E15               	movwf	passcodeCompare@keybuffer1+1,c
   727  000BD4  C0D1  F016         	movff	main@numOfKeysPressed,passcodeCompare@compareLenght
   728  000BD8  C0CF  F017         	movff	main@addr,passcodeCompare@compareAddr
   729  000BDC  ECF1  F006         	call	_passcodeCompare	;wreg free
   730  000BE0  0900               	iorlw	0
   731  000BE2  B4D8               	btfsc	status,2,c
   732  000BE4  EF07  F000         	goto	start
   733  000BE8                     l2354:
   734                           
   735                           ;main.c: 410: }
   736                           ;main.c: 411: }
   737                           ;main.c: 412: }
   738                           ;main.c: 413: clear_keyArray(keypressArray);
   739                           
   740                           ;main.c: 407: else
   741                           ;main.c: 408: {
   742                           
   743                           ;main.c: 406: }
   744  000BE8  0EC5               	movlw	low main@keypressArray
   745  000BEA  6E13               	movwf	clear_keyArray@arr,c
   746  000BEC  0E00               	movlw	high main@keypressArray
   747  000BEE  6E14               	movwf	clear_keyArray@arr+1,c
   748  000BF0  ECBD  F007         	call	_clear_keyArray	;wreg free
   749  000BF4  D027               	goto	l2378
   750  000BF6                     l290:
   751                           
   752                           ; BSR set to: 0
   753                           ;main.c: 416: else if(currentKeypadStatus.keyPressed == SP_FUNC_OFF)
   754                           
   755                           ; BSR set to: 0
   756  000BF6  0E0E               	movlw	14
   757  000BF8  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   758  000BFA  B4D8               	btfsc	status,2,c
   759  000BFC  D036               	goto	l311
   760                           
   761                           ; BSR set to: 0
   762                           ;main.c: 420: else if(currentKeypadStatus.keyPressed == SP_FUNC_ON)
   763                           
   764                           ; BSR set to: 0
   765                           
   766                           ; BSR set to: 0
   767                           ;main.c: 417: {
   768                           ;main.c: 419: }
   769  000BFE  0E0D               	movlw	13
   770  000C00  19D4               	xorwf	(main@currentKeypadStatus+1)& (0+255),w,b
   771  000C02  A4D8               	btfss	status,2,c
   772  000C04  D022               	goto	l306
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 421: {
   776                           ;main.c: 422: if(currentSystemState == UID_ENTERED)
   777  000C06  05D0               	decf	main@currentSystemState& (0+255),w,b
   778  000C08  A4D8               	btfss	status,2,c
   779  000C0A  D016               	goto	l2374
   780                           
   781                           ; BSR set to: 0
   782                           ;main.c: 423: {
   783                           ;main.c: 425: if(0 == check_password_presence(locker_num))
   784  000C0C  51D2               	movf	main@locker_num& (0+255),w,b
   785  000C0E  ECA8  F007         	call	_check_password_presence
   786  000C12  0900               	iorlw	0
   787  000C14  A4D8               	btfss	status,2,c
   788  000C16  D010               	goto	l2374
   789                           
   790                           ;main.c: 426: {
   791                           ;main.c: 428: addr = (locker_num - 1) * 10;
   792  000C18  0100               	movlb	0	; () banked
   793  000C1A  05D2               	decf	main@locker_num& (0+255),w,b
   794  000C1C  0D0A               	mullw	10
   795  000C1E  CFF3 F0CF          	movff	prodl,main@addr
   796                           
   797                           ; BSR set to: 0
   798                           ;main.c: 429: eepromWriteCode(addr, numOfKeysPressed, keypressArray);
   799  000C22  C0D1  F016         	movff	main@numOfKeysPressed,eepromWriteCode@codeLenght
   800  000C26  0EC5               	movlw	low main@keypressArray
   801  000C28  6E17               	movwf	eepromWriteCode@codeBuffer,c
   802  000C2A  0E00               	movlw	high main@keypressArray
   803  000C2C  6E18               	movwf	eepromWriteCode@codeBuffer+1,c
   804  000C2E  51CF               	movf	main@addr& (0+255),w,b
   805  000C30  EC56  F007         	call	_eepromWriteCode
   806                           
   807                           ;main.c: 430: break;
   808  000C34  EF07  F000         	goto	start
   809  000C38                     l2374:
   810                           
   811                           ;main.c: 436: }
   812                           ;main.c: 437: }
   813                           ;main.c: 438: clear_keyArray(keypressArray);
   814                           
   815                           ;main.c: 432: else
   816                           ;main.c: 433: {
   817                           
   818                           ;main.c: 431: }
   819  000C38  0EC5               	movlw	low main@keypressArray
   820  000C3A  6E13               	movwf	clear_keyArray@arr,c
   821  000C3C  0E00               	movlw	high main@keypressArray
   822  000C3E  6E14               	movwf	clear_keyArray@arr+1,c
   823  000C40  ECBD  F007         	call	_clear_keyArray	;wreg free
   824  000C44                     l2378:
   825                           
   826                           ;main.c: 439: numOfKeysPressed = 0;
   827  000C44  0E00               	movlw	0
   828  000C46  0100               	movlb	0	; () banked
   829  000C48  D00F               	goto	L1
   830  000C4A                     l306:
   831                           
   832                           ; BSR set to: 0
   833                           ;main.c: 441: else
   834                           ;main.c: 442: {
   835                           ;main.c: 443: keypressArray[numOfKeysPressed++] = currentKeypadStatus.keyPressed;
   836                           
   837                           ; BSR set to: 0
   838  000C4A  51D1               	movf	main@numOfKeysPressed& (0+255),w,b
   839  000C4C  0D01               	mullw	1
   840  000C4E  0EC5               	movlw	low main@keypressArray
   841  000C50  24F3               	addwf	prodl,w,c
   842  000C52  6ED9               	movwf	fsr2l,c
   843  000C54  0E00               	movlw	high main@keypressArray
   844  000C56  20F4               	addwfc	prodh,w,c
   845  000C58  6EDA               	movwf	fsr2h,c
   846  000C5A  C0D4  FFDF         	movff	main@currentKeypadStatus+1,indf2
   847                           
   848                           ; BSR set to: 0
   849  000C5E  2BD1               	incf	main@numOfKeysPressed& (0+255),f,b
   850                           
   851                           ; BSR set to: 0
   852                           ;main.c: 444: if(numOfKeysPressed > 10)
   853  000C60  0E0A               	movlw	10
   854  000C62  65D1               	cpfsgt	main@numOfKeysPressed& (0+255),b
   855  000C64  D002               	goto	l311
   856                           
   857                           ; BSR set to: 0
   858                           ;main.c: 445: {
   859                           ;main.c: 446: numOfKeysPressed = 0;
   860  000C66  0E00               	movlw	0
   861  000C68                     L1:
   862  000C68  6FD1               	movwf	main@numOfKeysPressed& (0+255),b
   863  000C6A                     l311:
   864                           
   865                           ; BSR set to: 0
   866                           
   867                           ; BSR set to: 0
   868                           
   869                           ; BSR set to: 0
   870                           ;main.c: 448: }
   871                           ;main.c: 449: }
   872                           ;main.c: 451: while(buttonPressedIndicator());
   873                           
   874                           ; BSR set to: 0
   875                           
   876                           ; BSR set to: 0
   877                           
   878                           ; BSR set to: 0
   879                           
   880                           ; BSR set to: 0
   881                           
   882                           ; BSR set to: 0
   883  000C6A  ECDE  F007         	call	_buttonPressedIndicator	;wreg free
   884  000C6E  0900               	iorlw	0
   885  000C70  B4D8               	btfsc	status,2,c
   886  000C72  D764               	goto	l284
   887  000C74  D7FA               	goto	l311
   888  000C76                     __end_of_main:
   889                           	opt stack 0
   890                           tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           tblptrl	equ	0xFF6
   893                           tablat	equ	0xFF5
   894                           prodh	equ	0xFF4
   895                           prodl	equ	0xFF3
   896                           intcon	equ	0xFF2
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postdec1	equ	0xFE5
   900                           fsr1l	equ	0xFE1
   901                           indf2	equ	0xFDF
   902                           fsr2h	equ	0xFDA
   903                           fsr2l	equ	0xFD9
   904                           status	equ	0xFD8
   905                           
   906 ;; *************** function _passcodeCompare *****************
   907 ;; Defined at:
   908 ;;		line 675 in file "main.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  keybuffer1      2   19[COMRAM] PTR unsigned char 
   911 ;;		 -> main@keypressArray(10), 
   912 ;;  compareLengh    1   21[COMRAM] unsigned char 
   913 ;;  compareAddr     1   22[COMRAM] unsigned char 
   914 ;; Auto vars:     Size  Location     Type
   915 ;;  i               1   31[COMRAM] unsigned char 
   916 ;;  validity        1   32[COMRAM] unsigned char 
   917 ;;  storedCodeLe    1   30[COMRAM] unsigned char 
   918 ;; Return value:  Size  Location     Type
   919 ;;                  1    wreg      unsigned char 
   920 ;; Registers used:
   921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   927 ;;      Params:         4       0       0       0       0       0       0       0       0
   928 ;;      Locals:         3       0       0       0       0       0       0       0       0
   929 ;;      Temps:          7       0       0       0       0       0       0       0       0
   930 ;;      Totals:        14       0       0       0       0       0       0       0       0
   931 ;;Total ram usage:       14 bytes
   932 ;; Hardware stack levels used:    1
   933 ;; Hardware stack levels required when called:    2
   934 ;; This function calls:
   935 ;;		_readEEPROM
   936 ;; This function is called by:
   937 ;;		_main
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text1
   942  000DE2                     __ptext1:
   943                           	opt stack 0
   944  000DE2                     _passcodeCompare:
   945                           	opt stack 28
   946                           
   947                           ;main.c: 677: unsigned char validity = 0;
   948                           
   949                           ;incstack = 0
   950  000DE2  0E00               	movlw	0
   951  000DE4  6E21               	movwf	passcodeCompare@validity,c
   952                           
   953                           ;main.c: 678: unsigned char storedCodeLenght = readEEPROM(compareAddr);
   954  000DE6  5017               	movf	passcodeCompare@compareAddr,w,c
   955  000DE8  EC0A  F008         	call	_readEEPROM
   956  000DEC  6E1F               	movwf	passcodeCompare@storedCodeLenght,c
   957                           
   958                           ;main.c: 679: if(compareLenght != storedCodeLenght)
   959  000DEE  501F               	movf	passcodeCompare@storedCodeLenght,w,c
   960  000DF0  1816               	xorwf	passcodeCompare@compareLenght,w,c
   961  000DF2  B4D8               	btfsc	status,2,c
   962  000DF4  D004               	goto	l319
   963  000DF6  D018               	goto	l323
   964  000DF8                     l2266:
   965                           
   966                           ;main.c: 682: validity = 0;
   967  000DF8  0E00               	movlw	0
   968  000DFA  6E21               	movwf	passcodeCompare@validity,c
   969                           
   970                           ;main.c: 684: }
   971  000DFC  D030               	goto	u1470
   972  000DFE                     l319:
   973                           
   974                           ;main.c: 685: else
   975                           ;main.c: 686: {
   976                           ;main.c: 687: for(unsigned char i = 0; i <= (compareLenght - 1); i++)
   977  000DFE  0E00               	movlw	0
   978  000E00  6E20               	movwf	passcodeCompare@i,c
   979  000E02  D015               	goto	l321
   980  000E04                     
   981                           ;main.c: 688: {
   982                           ;main.c: 689: if(*keybuffer1 == readEEPROM(++compareAddr))
   983  000E04  C014  FFD9         	movff	passcodeCompare@keybuffer1,fsr2l
   984  000E08  C015  FFDA         	movff	passcodeCompare@keybuffer1+1,fsr2h
   985  000E0C  2A17               	incf	passcodeCompare@compareAddr,f,c
   986  000E0E  5017               	movf	passcodeCompare@compareAddr,w,c
   987  000E10  EC0A  F008         	call	_readEEPROM
   988  000E14  6E19               	movwf	(??_passcodeCompare+1)& (0+255),c
   989  000E16  50DE               	movf	postinc2,w,c
   990  000E18  1819               	xorwf	??_passcodeCompare+1,w,c
   991  000E1A  A4D8               	btfss	status,2,c
   992  000E1C  D005               	goto	l323
   993                           
   994                           ;main.c: 690: {
   995                           ;main.c: 691: keybuffer1++;
   996  000E1E  4A14               	infsnz	passcodeCompare@keybuffer1,f,c
   997  000E20  2A15               	incf	passcodeCompare@keybuffer1+1,f,c
   998                           
   999                           ;main.c: 692: validity = 1;
  1000  000E22  0E01               	movlw	1
  1001  000E24  6E21               	movwf	passcodeCompare@validity,c
  1002                           
  1003                           ;main.c: 693: }
  1004  000E26  D002               	goto	l324
  1005  000E28                     l323:
  1006                           
  1007                           ;main.c: 694: else
  1008                           ;main.c: 695: {
  1009                           ;main.c: 696: ((volatile _io_reg*)&systemStateReg2)->bit2 = 0;
  1010  000E28  943B               	bcf	_systemStateReg2,2,c	;volatile
  1011  000E2A  D7E6               	goto	l2266
  1012  000E2C                     l324:
  1013  000E2C  2A20               	incf	passcodeCompare@i,f,c
  1014  000E2E                     l321:
  1015  000E2E  5020               	movf	passcodeCompare@i,w,c
  1016  000E30  6E18               	movwf	??_passcodeCompare& (0+255),c
  1017  000E32  6A19               	clrf	(??_passcodeCompare+1)& (0+255),c
  1018  000E34  0EFF               	movlw	255
  1019  000E36  6E1A               	movwf	(??_passcodeCompare+2)& (0+255),c
  1020  000E38  0EFF               	movlw	255
  1021  000E3A  6E1B               	movwf	(??_passcodeCompare+3)& (0+255),c
  1022  000E3C  5016               	movf	passcodeCompare@compareLenght,w,c
  1023  000E3E  6E1C               	movwf	(??_passcodeCompare+4)& (0+255),c
  1024  000E40  6A1D               	clrf	(??_passcodeCompare+5)& (0+255),c
  1025  000E42  501A               	movf	??_passcodeCompare+2,w,c
  1026  000E44  261C               	addwf	??_passcodeCompare+4,f,c
  1027  000E46  501B               	movf	??_passcodeCompare+3,w,c
  1028  000E48  221D               	addwfc	??_passcodeCompare+5,f,c
  1029  000E4A  5018               	movf	??_passcodeCompare,w,c
  1030  000E4C  5C1C               	subwf	??_passcodeCompare+4,w,c
  1031  000E4E  501D               	movf	??_passcodeCompare+5,w,c
  1032  000E50  0A80               	xorlw	128
  1033  000E52  6E1E               	movwf	(??_passcodeCompare+6)& (0+255),c
  1034  000E54  5019               	movf	??_passcodeCompare+1,w,c
  1035  000E56  0A80               	xorlw	128
  1036  000E58  581E               	subwfb	(??_passcodeCompare+6)& (0+255),w,c
  1037  000E5A  B0D8               	btfsc	status,0,c
  1038  000E5C  D7D3               	goto	l322
  1039  000E5E                     u1470:
  1040                           
  1041                           ;main.c: 699: }
  1042                           ;main.c: 700: }
  1043                           ;main.c: 701: }
  1044                           ;main.c: 702: return validity;
  1045  000E5E  5021               	movf	passcodeCompare@validity,w,c
  1046  000E60  0012               	return	
  1047  000E62                     __end_of_passcodeCompare:
  1048                           	opt stack 0
  1049                           tblptru	equ	0xFF8
  1050                           tblptrh	equ	0xFF7
  1051                           tblptrl	equ	0xFF6
  1052                           tablat	equ	0xFF5
  1053                           prodh	equ	0xFF4
  1054                           prodl	equ	0xFF3
  1055                           intcon	equ	0xFF2
  1056                           postinc0	equ	0xFEE
  1057                           wreg	equ	0xFE8
  1058                           postdec1	equ	0xFE5
  1059                           fsr1l	equ	0xFE1
  1060                           indf2	equ	0xFDF
  1061                           postinc2	equ	0xFDE
  1062                           fsr2h	equ	0xFDA
  1063                           fsr2l	equ	0xFD9
  1064                           status	equ	0xFD8
  1065                           
  1066 ;; *************** function _initStandbyTimer *****************
  1067 ;; Defined at:
  1068 ;;		line 96 in file "timer.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;		None
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg, status,2
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1082 ;;      Params:         0       0       0       0       0       0       0       0       0
  1083 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1084 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1085 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1086 ;;Total ram usage:        0 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    1
  1089 ;; This function calls:
  1090 ;;		Nothing
  1091 ;; This function is called by:
  1092 ;;		_main
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           	psect	text2
  1097  000FEA                     __ptext2:
  1098                           	opt stack 0
  1099  000FEA                     _initStandbyTimer:
  1100                           	opt stack 29
  1101                           
  1102                           ;timer.c: 98: T1CONbits.T1CKPS0 = 1;
  1103                           
  1104                           ;incstack = 0
  1105  000FEA  88CD               	bsf	4045,4,c	;volatile
  1106                           
  1107                           ;timer.c: 99: T1CONbits.T1CKPS1 = 1;
  1108  000FEC  8ACD               	bsf	4045,5,c	;volatile
  1109                           
  1110                           ;timer.c: 100: TMR1 = 0;
  1111  000FEE  0E00               	movlw	0
  1112  000FF0  6ECF               	movwf	4047,c	;volatile
  1113  000FF2  0E00               	movlw	0
  1114  000FF4  6ECE               	movwf	4046,c	;volatile
  1115                           
  1116                           ;timer.c: 101: PIE1bits.TMR1IE = 1;
  1117  000FF6  809D               	bsf	3997,0,c	;volatile
  1118  000FF8  0012               	return		;funcret
  1119  000FFA                     __end_of_initStandbyTimer:
  1120                           	opt stack 0
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           prodh	equ	0xFF4
  1126                           prodl	equ	0xFF3
  1127                           intcon	equ	0xFF2
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1l	equ	0xFE1
  1132                           indf2	equ	0xFDF
  1133                           postinc2	equ	0xFDE
  1134                           fsr2h	equ	0xFDA
  1135                           fsr2l	equ	0xFD9
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _initKeypad *****************
  1139 ;; Defined at:
  1140 ;;		line 14 in file "Keypad4X4.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg, status,2
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1154 ;;      Params:         0       0       0       0       0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1156 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1157 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1158 ;;Total ram usage:        0 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    1
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text3
  1169  000FFA                     __ptext3:
  1170                           	opt stack 0
  1171  000FFA                     _initKeypad:
  1172                           	opt stack 29
  1173                           
  1174                           ;Keypad4X4.c: 16: TRISB = 0xF0;
  1175                           
  1176                           ;incstack = 0
  1177  000FFA  0EF0               	movlw	240
  1178  000FFC  6E93               	movwf	3987,c	;volatile
  1179                           
  1180                           ;Keypad4X4.c: 17: LATB = 0xF0;
  1181  000FFE  0EF0               	movlw	240
  1182  001000  6E8A               	movwf	3978,c	;volatile
  1183                           
  1184                           ;Keypad4X4.c: 18: INTCON2bits.RBPU = 0;
  1185  001002  9EF1               	bcf	intcon2,7,c	;volatile
  1186                           
  1187                           ;Keypad4X4.c: 19: INTCONbits.RBIE = 1;
  1188  001004  86F2               	bsf	intcon,3,c	;volatile
  1189  001006  0012               	return		;funcret
  1190  001008                     __end_of_initKeypad:
  1191                           	opt stack 0
  1192                           tblptru	equ	0xFF8
  1193                           tblptrh	equ	0xFF7
  1194                           tblptrl	equ	0xFF6
  1195                           tablat	equ	0xFF5
  1196                           prodh	equ	0xFF4
  1197                           prodl	equ	0xFF3
  1198                           intcon	equ	0xFF2
  1199                           intcon2	equ	0xFF1
  1200                           postinc0	equ	0xFEE
  1201                           wreg	equ	0xFE8
  1202                           postdec1	equ	0xFE5
  1203                           fsr1l	equ	0xFE1
  1204                           indf2	equ	0xFDF
  1205                           postinc2	equ	0xFDE
  1206                           fsr2h	equ	0xFDA
  1207                           fsr2l	equ	0xFD9
  1208                           status	equ	0xFD8
  1209                           
  1210 ;; *************** function _initControllerIO *****************
  1211 ;; Defined at:
  1212 ;;		line 251 in file "main.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;		None
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;		None
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg, status,2
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1226 ;;      Params:         0       0       0       0       0       0       0       0       0
  1227 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1229 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1230 ;;Total ram usage:        0 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:    1
  1233 ;; This function calls:
  1234 ;;		Nothing
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text4
  1241  001008                     __ptext4:
  1242                           	opt stack 0
  1243  001008                     _initControllerIO:
  1244                           	opt stack 29
  1245                           
  1246                           ;main.c: 253: ADCON1 = 0x0F;
  1247                           
  1248                           ;incstack = 0
  1249  001008  0E0F               	movlw	15
  1250  00100A  6EC1               	movwf	4033,c	;volatile
  1251                           
  1252                           ;main.c: 254: CMCON = 0x07;
  1253  00100C  0E07               	movlw	7
  1254  00100E  6EB4               	movwf	4020,c	;volatile
  1255                           
  1256                           ;main.c: 255: TRISAbits.RA0 = 0;
  1257  001010  9092               	bcf	3986,0,c	;volatile
  1258  001012  0012               	return		;funcret
  1259  001014                     __end_of_initControllerIO:
  1260                           	opt stack 0
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           prodh	equ	0xFF4
  1266                           prodl	equ	0xFF3
  1267                           intcon	equ	0xFF2
  1268                           intcon2	equ	0xFF1
  1269                           postinc0	equ	0xFEE
  1270                           wreg	equ	0xFE8
  1271                           postdec1	equ	0xFE5
  1272                           fsr1l	equ	0xFE1
  1273                           indf2	equ	0xFDF
  1274                           postinc2	equ	0xFDE
  1275                           fsr2h	equ	0xFDA
  1276                           fsr2l	equ	0xFD9
  1277                           status	equ	0xFD8
  1278                           
  1279 ;; *************** function _eepromWriteCode *****************
  1280 ;; Defined at:
  1281 ;;		line 8 in file "eeprom_functions.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  eepromWriteA    1    wreg     unsigned char 
  1284 ;;  codeLenght      1   21[COMRAM] unsigned char 
  1285 ;;  codeBuffer      2   22[COMRAM] PTR unsigned char 
  1286 ;;		 -> main@keypressArray(10), 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  eepromWriteA    1   24[COMRAM] unsigned char 
  1289 ;;  i               1   25[COMRAM] unsigned char 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1299 ;;      Params:         3       0       0       0       0       0       0       0       0
  1300 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1302 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1303 ;;Total ram usage:        5 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; Hardware stack levels required when called:    2
  1306 ;; This function calls:
  1307 ;;		_writeEEPROM
  1308 ;; This function is called by:
  1309 ;;		_main
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text5
  1314  000EAC                     __ptext5:
  1315                           	opt stack 0
  1316  000EAC                     _eepromWriteCode:
  1317                           	opt stack 28
  1318                           
  1319                           ;incstack = 0
  1320                           ;eepromWriteCode@eepromWriteAddr stored from wreg
  1321  000EAC  6E19               	movwf	eepromWriteCode@eepromWriteAddr,c
  1322                           
  1323                           ;eeprom_functions.c: 10: writeEEPROM(eepromWriteAddr, codeLenght);
  1324  000EAE  C016  F013         	movff	eepromWriteCode@codeLenght,writeEEPROM@datas
  1325  000EB2  5019               	movf	eepromWriteCode@eepromWriteAddr,w,c
  1326  000EB4  EC8F  F007         	call	_writeEEPROM
  1327                           
  1328                           ;eeprom_functions.c: 11: for(unsigned char i=0; i <= codeLenght; i++)
  1329  000EB8  0E00               	movlw	0
  1330  000EBA  6E1A               	movwf	eepromWriteCode@i,c
  1331  000EBC  D00F               	goto	l17
  1332  000EBE                     
  1333                           ;eeprom_functions.c: 12: {
  1334                           ;eeprom_functions.c: 13: eepromWriteAddr++;
  1335  000EBE  2A19               	incf	eepromWriteCode@eepromWriteAddr,f,c
  1336                           
  1337                           ;eeprom_functions.c: 15: writeEEPROM(eepromWriteAddr, *(codeBuffer + i));
  1338  000EC0  501A               	movf	eepromWriteCode@i,w,c
  1339  000EC2  0D01               	mullw	1
  1340  000EC4  50F3               	movf	prodl,w,c
  1341  000EC6  2417               	addwf	eepromWriteCode@codeBuffer,w,c
  1342  000EC8  6ED9               	movwf	fsr2l,c
  1343  000ECA  50F4               	movf	prodh,w,c
  1344  000ECC  2018               	addwfc	eepromWriteCode@codeBuffer+1,w,c
  1345  000ECE  6EDA               	movwf	fsr2h,c
  1346  000ED0  50DF               	movf	indf2,w,c
  1347  000ED2  6E13               	movwf	writeEEPROM@datas,c
  1348  000ED4  5019               	movf	eepromWriteCode@eepromWriteAddr,w,c
  1349  000ED6  EC8F  F007         	call	_writeEEPROM
  1350  000EDA  2A1A               	incf	eepromWriteCode@i,f,c
  1351  000EDC                     l17:
  1352  000EDC  501A               	movf	eepromWriteCode@i,w,c
  1353  000EDE  5C16               	subwf	eepromWriteCode@codeLenght,w,c
  1354  000EE0  A0D8               	btfss	status,0,c
  1355  000EE2  0012               	return	
  1356  000EE4  D7EC               	goto	l18
  1357  000EE6                     __end_of_eepromWriteCode:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           prodh	equ	0xFF4
  1364                           prodl	equ	0xFF3
  1365                           intcon	equ	0xFF2
  1366                           intcon2	equ	0xFF1
  1367                           postinc0	equ	0xFEE
  1368                           wreg	equ	0xFE8
  1369                           postdec1	equ	0xFE5
  1370                           fsr1l	equ	0xFE1
  1371                           indf2	equ	0xFDF
  1372                           postinc2	equ	0xFDE
  1373                           fsr2h	equ	0xFDA
  1374                           fsr2l	equ	0xFD9
  1375                           status	equ	0xFD8
  1376                           
  1377 ;; *************** function _writeEEPROM *****************
  1378 ;; Defined at:
  1379 ;;		line 19 in file "eeprom_functions.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  address         1    wreg     unsigned char 
  1382 ;;  datas           1   18[COMRAM] unsigned char 
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  address         1   19[COMRAM] unsigned char 
  1385 ;;  gie_Status      1   20[COMRAM] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg, status,2
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1395 ;;      Params:         1       0       0       0       0       0       0       0       0
  1396 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1398 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1399 ;;Total ram usage:        3 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    1
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_eepromWriteCode
  1406 ;;		_main
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text6
  1411  000F1E                     __ptext6:
  1412                           	opt stack 0
  1413  000F1E                     _writeEEPROM:
  1414                           	opt stack 29
  1415                           
  1416                           ;incstack = 0
  1417                           ;writeEEPROM@address stored from wreg
  1418  000F1E  6E14               	movwf	writeEEPROM@address,c
  1419  000F20                     
  1420                           ;eeprom_functions.c: 21: unsigned char gie_Status;
  1421                           ;eeprom_functions.c: 23: while(EECON1bits.WR);
  1422  000F20  B2A6               	btfsc	4006,1,c	;volsfr
  1423  000F22  D7FE               	goto	l1898
  1424                           
  1425                           ;eeprom_functions.c: 24: EEADR = address;
  1426  000F24  C014  FFA9         	movff	writeEEPROM@address,4009	;volatile
  1427                           
  1428                           ;eeprom_functions.c: 25: EEDATA = datas;
  1429  000F28  C013  FFA8         	movff	writeEEPROM@datas,4008	;volatile
  1430                           
  1431                           ;eeprom_functions.c: 26: EECON1bits.WREN = 1;
  1432  000F2C  84A6               	bsf	4006,2,c	;volsfr
  1433                           
  1434                           ;eeprom_functions.c: 27: gie_Status = INTCONbits.GIE;
  1435  000F2E  0E00               	movlw	0
  1436  000F30  BEF2               	btfsc	intcon,7,c	;volatile
  1437  000F32  0E01               	movlw	1
  1438  000F34  6E15               	movwf	writeEEPROM@gie_Status,c
  1439                           
  1440                           ;eeprom_functions.c: 28: INTCONbits.GIE = 0;
  1441  000F36  9EF2               	bcf	intcon,7,c	;volatile
  1442                           
  1443                           ;eeprom_functions.c: 29: EECON2 = 0x55;
  1444  000F38  0E55               	movlw	85
  1445  000F3A  6EA7               	movwf	4007,c	;volsfr
  1446                           
  1447                           ;eeprom_functions.c: 30: EECON2 = 0xaa;
  1448  000F3C  0EAA               	movlw	170
  1449  000F3E  6EA7               	movwf	4007,c	;volsfr
  1450                           
  1451                           ;eeprom_functions.c: 31: EECON1bits.WR = 1;
  1452  000F40  82A6               	bsf	4006,1,c	;volsfr
  1453                           
  1454                           ;eeprom_functions.c: 32: INTCONbits.GIE = gie_Status;
  1455  000F42  B015               	btfsc	writeEEPROM@gie_Status,0,c
  1456  000F44  D002               	bra	u1115
  1457  000F46  9EF2               	bcf	intcon,7,c	;volatile
  1458  000F48  D001               	bra	u1116
  1459  000F4A                     u1115:
  1460  000F4A  8EF2               	bsf	intcon,7,c	;volatile
  1461  000F4C                     u1116:
  1462                           
  1463                           ;eeprom_functions.c: 33: EECON1bits.WREN = 0;
  1464  000F4C  94A6               	bcf	4006,2,c	;volsfr
  1465  000F4E  0012               	return		;funcret
  1466  000F50                     __end_of_writeEEPROM:
  1467                           	opt stack 0
  1468                           tblptru	equ	0xFF8
  1469                           tblptrh	equ	0xFF7
  1470                           tblptrl	equ	0xFF6
  1471                           tablat	equ	0xFF5
  1472                           prodh	equ	0xFF4
  1473                           prodl	equ	0xFF3
  1474                           intcon	equ	0xFF2
  1475                           intcon2	equ	0xFF1
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           postdec1	equ	0xFE5
  1479                           fsr1l	equ	0xFE1
  1480                           indf2	equ	0xFDF
  1481                           postinc2	equ	0xFDE
  1482                           fsr2h	equ	0xFDA
  1483                           fsr2l	equ	0xFD9
  1484                           status	equ	0xFD8
  1485                           
  1486 ;; *************** function _clear_keyArray *****************
  1487 ;; Defined at:
  1488 ;;		line 314 in file "main.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  arr             2   18[COMRAM] PTR unsigned char 
  1491 ;;		 -> main@keypressArray(10), 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  a               1   20[COMRAM] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1503 ;;      Params:         2       0       0       0       0       0       0       0       0
  1504 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1506 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1507 ;;Total ram usage:        3 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text7
  1518  000F7A                     __ptext7:
  1519                           	opt stack 0
  1520  000F7A                     _clear_keyArray:
  1521                           	opt stack 29
  1522                           
  1523                           ;main.c: 316: for(unsigned char a = 0; a < 10; a++)
  1524                           
  1525                           ;incstack = 0
  1526  000F7A  0E00               	movlw	0
  1527  000F7C  6E15               	movwf	clear_keyArray@a,c
  1528  000F7E                     l2248:
  1529  000F7E  0E09               	movlw	9
  1530  000F80  6415               	cpfsgt	clear_keyArray@a,c
  1531  000F82  D001               	goto	l277
  1532  000F84  0012               	return	
  1533  000F86                     l277:
  1534                           
  1535                           ;main.c: 317: arr[a] = 0;
  1536  000F86  5015               	movf	clear_keyArray@a,w,c
  1537  000F88  0D01               	mullw	1
  1538  000F8A  50F3               	movf	prodl,w,c
  1539  000F8C  2413               	addwf	clear_keyArray@arr,w,c
  1540  000F8E  6ED9               	movwf	fsr2l,c
  1541  000F90  50F4               	movf	prodh,w,c
  1542  000F92  2014               	addwfc	clear_keyArray@arr+1,w,c
  1543  000F94  6EDA               	movwf	fsr2h,c
  1544  000F96  0E00               	movlw	0
  1545  000F98  6EDF               	movwf	indf2,c
  1546  000F9A  2A15               	incf	clear_keyArray@a,f,c
  1547  000F9C  D7F0               	goto	l2248
  1548  000F9E                     __end_of_clear_keyArray:
  1549                           	opt stack 0
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           prodh	equ	0xFF4
  1555                           prodl	equ	0xFF3
  1556                           intcon	equ	0xFF2
  1557                           intcon2	equ	0xFF1
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1l	equ	0xFE1
  1562                           indf2	equ	0xFDF
  1563                           postinc2	equ	0xFDE
  1564                           fsr2h	equ	0xFDA
  1565                           fsr2l	equ	0xFD9
  1566                           status	equ	0xFD8
  1567                           
  1568 ;; *************** function _check_password_presence *****************
  1569 ;; Defined at:
  1570 ;;		line 129 in file "main.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;  lock_num        1    wreg     unsigned char 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  lock_num        1   20[COMRAM] unsigned char 
  1575 ;;  addr            1   22[COMRAM] unsigned char 
  1576 ;;  validity        1   21[COMRAM] unsigned char 
  1577 ;;  a               1   19[COMRAM] unsigned char 
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      unsigned char 
  1580 ;; Registers used:
  1581 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1587 ;;      Params:         0       0       0       0       0       0       0       0       0
  1588 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1590 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1591 ;;Total ram usage:        4 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; Hardware stack levels required when called:    2
  1594 ;; This function calls:
  1595 ;;		_readEEPROM
  1596 ;; This function is called by:
  1597 ;;		_main
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text8
  1602  000F50                     __ptext8:
  1603                           	opt stack 0
  1604  000F50                     _check_password_presence:
  1605                           	opt stack 28
  1606                           
  1607                           ;incstack = 0
  1608                           ;check_password_presence@lock_num stored from wreg
  1609  000F50  6E15               	movwf	check_password_presence@lock_num,c
  1610                           
  1611                           ;main.c: 131: unsigned char validity = 0;
  1612  000F52  0E00               	movlw	0
  1613  000F54  6E16               	movwf	check_password_presence@validity,c
  1614                           
  1615                           ;main.c: 133: unsigned char addr = (lock_num - 1) * 10;
  1616  000F56  0415               	decf	check_password_presence@lock_num,w,c
  1617  000F58  0D0A               	mullw	10
  1618  000F5A  CFF3 F017          	movff	prodl,check_password_presence@addr
  1619                           
  1620                           ;main.c: 135: char a = readEEPROM(addr);
  1621  000F5E  5017               	movf	check_password_presence@addr,w,c
  1622  000F60  EC0A  F008         	call	_readEEPROM
  1623  000F64  6E14               	movwf	check_password_presence@a,c
  1624                           
  1625                           ;main.c: 136: if(readEEPROM(addr))
  1626  000F66  5017               	movf	check_password_presence@addr,w,c
  1627  000F68  EC0A  F008         	call	_readEEPROM
  1628  000F6C  0900               	iorlw	0
  1629  000F6E  B4D8               	btfsc	status,2,c
  1630  000F70  D002               	goto	l255
  1631                           
  1632                           ;main.c: 137: validity = 1;
  1633  000F72  0E01               	movlw	1
  1634  000F74  6E16               	movwf	check_password_presence@validity,c
  1635  000F76                     l255:
  1636                           
  1637                           ;main.c: 138: return validity;
  1638  000F76  5016               	movf	check_password_presence@validity,w,c
  1639  000F78  0012               	return	
  1640  000F7A                     __end_of_check_password_presence:
  1641                           	opt stack 0
  1642                           tblptru	equ	0xFF8
  1643                           tblptrh	equ	0xFF7
  1644                           tblptrl	equ	0xFF6
  1645                           tablat	equ	0xFF5
  1646                           prodh	equ	0xFF4
  1647                           prodl	equ	0xFF3
  1648                           intcon	equ	0xFF2
  1649                           intcon2	equ	0xFF1
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           postdec1	equ	0xFE5
  1653                           fsr1l	equ	0xFE1
  1654                           indf2	equ	0xFDF
  1655                           postinc2	equ	0xFDE
  1656                           fsr2h	equ	0xFDA
  1657                           fsr2l	equ	0xFD9
  1658                           status	equ	0xFD8
  1659                           
  1660 ;; *************** function _readEEPROM *****************
  1661 ;; Defined at:
  1662 ;;		line 36 in file "eeprom_functions.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  address         1    wreg     unsigned char 
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  address         1   18[COMRAM] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      unsigned char 
  1669 ;; Registers used:
  1670 ;;		wreg, status,2
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1676 ;;      Params:         0       0       0       0       0       0       0       0       0
  1677 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1679 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1680 ;;Total ram usage:        1 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_check_password_presence
  1687 ;;		_main
  1688 ;;		_passcodeCompare
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text9
  1693  001014                     __ptext9:
  1694                           	opt stack 0
  1695  001014                     _readEEPROM:
  1696                           	opt stack 29
  1697                           
  1698                           ;incstack = 0
  1699                           ;readEEPROM@address stored from wreg
  1700  001014  6E13               	movwf	readEEPROM@address,c
  1701                           
  1702                           ;eeprom_functions.c: 38: EEADR = address;
  1703  001016  C013  FFA9         	movff	readEEPROM@address,4009	;volatile
  1704                           
  1705                           ;eeprom_functions.c: 40: EECON1bits.RD = 1;
  1706  00101A  80A6               	bsf	4006,0,c	;volsfr
  1707                           
  1708                           ;eeprom_functions.c: 41: return EEDATA;
  1709  00101C  50A8               	movf	4008,w,c	;volatile
  1710  00101E  0012               	return	
  1711  001020                     __end_of_readEEPROM:
  1712                           	opt stack 0
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           intcon	equ	0xFF2
  1720                           intcon2	equ	0xFF1
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           postdec1	equ	0xFE5
  1724                           fsr1l	equ	0xFE1
  1725                           indf2	equ	0xFDF
  1726                           postinc2	equ	0xFDE
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function _check_lock_num_validity *****************
  1732 ;; Defined at:
  1733 ;;		line 119 in file "main.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  lock_num        1    wreg     unsigned char 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  lock_num        1   19[COMRAM] unsigned char 
  1738 ;;  validity        1   18[COMRAM] unsigned char 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      unsigned char 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2, status,0
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1748 ;;      Params:         0       0       0       0       0       0       0       0       0
  1749 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1751 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1752 ;;Total ram usage:        2 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    1
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_main
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text10
  1763  000F9E                     __ptext10:
  1764                           	opt stack 0
  1765  000F9E                     _check_lock_num_validity:
  1766                           	opt stack 29
  1767                           
  1768                           ;incstack = 0
  1769                           ;check_lock_num_validity@lock_num stored from wreg
  1770  000F9E  6E14               	movwf	check_lock_num_validity@lock_num,c
  1771                           
  1772                           ;main.c: 121: unsigned char validity = 0;
  1773  000FA0  0E00               	movlw	0
  1774  000FA2  6E13               	movwf	check_lock_num_validity@validity,c
  1775                           
  1776                           ;main.c: 122: if(lock_num)
  1777  000FA4  5014               	movf	check_lock_num_validity@lock_num,w,c
  1778  000FA6  B4D8               	btfsc	status,2,c
  1779  000FA8  D007               	goto	l251
  1780                           
  1781                           ;main.c: 123: {
  1782                           ;main.c: 124: lock_num <= 21 ? validity = 1 : validity = 0;
  1783  000FAA  0E16               	movlw	22
  1784  000FAC  6014               	cpfslt	check_lock_num_validity@lock_num,c
  1785  000FAE  D002               	goto	l249
  1786  000FB0  0E01               	movlw	1
  1787  000FB2  D001               	goto	L2
  1788  000FB4                     l249:
  1789  000FB4  0E00               	movlw	0
  1790  000FB6                     L2:
  1791  000FB6  6E13               	movwf	check_lock_num_validity@validity,c
  1792  000FB8                     l251:
  1793                           
  1794                           ;main.c: 125: }
  1795                           ;main.c: 126: return validity;
  1796  000FB8  5013               	movf	check_lock_num_validity@validity,w,c
  1797  000FBA  0012               	return	
  1798  000FBC                     __end_of_check_lock_num_validity:
  1799                           	opt stack 0
  1800                           tblptru	equ	0xFF8
  1801                           tblptrh	equ	0xFF7
  1802                           tblptrl	equ	0xFF6
  1803                           tablat	equ	0xFF5
  1804                           prodh	equ	0xFF4
  1805                           prodl	equ	0xFF3
  1806                           intcon	equ	0xFF2
  1807                           intcon2	equ	0xFF1
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           fsr1l	equ	0xFE1
  1812                           indf2	equ	0xFDF
  1813                           postinc2	equ	0xFDE
  1814                           fsr2h	equ	0xFDA
  1815                           fsr2l	equ	0xFD9
  1816                           status	equ	0xFD8
  1817                           
  1818 ;; *************** function _buttonPressedIndicator *****************
  1819 ;; Defined at:
  1820 ;;		line 200 in file "Keypad4X4.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;  keypad_state    2   22[COMRAM] struct .
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      unsigned char 
  1827 ;; Registers used:
  1828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1834 ;;      Params:         0       0       0       0       0       0       0       0       0
  1835 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1836 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1837 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1838 ;;Total ram usage:        2 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    2
  1841 ;; This function calls:
  1842 ;;		_getKey
  1843 ;; This function is called by:
  1844 ;;		_main
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text11
  1849  000FBC                     __ptext11:
  1850                           	opt stack 0
  1851  000FBC                     _buttonPressedIndicator:
  1852                           	opt stack 28
  1853                           
  1854                           ;Keypad4X4.c: 202: keypadStatus keypad_state;
  1855                           ;Keypad4X4.c: 203: getKey(&keypad_state);
  1856                           
  1857                           ;incstack = 0
  1858  000FBC  0E17               	movlw	low buttonPressedIndicator@keypad_state
  1859  000FBE  6E13               	movwf	getKey@KeypadStatus,c
  1860  000FC0  0E00               	movlw	high buttonPressedIndicator@keypad_state
  1861  000FC2  6E14               	movwf	getKey@KeypadStatus+1,c
  1862  000FC4  EC08  F004         	call	_getKey	;wreg free
  1863                           
  1864                           ;Keypad4X4.c: 204: return keypad_state.keyPressIndicator;
  1865  000FC8  A017               	btfss	buttonPressedIndicator@keypad_state,0,c
  1866  000FCA  D002               	goto	u1330
  1867  000FCC  0E01               	movlw	1
  1868  000FCE  0012               	return	
  1869  000FD0                     u1330:
  1870  000FD0  0E00               	movlw	0
  1871  000FD2  0012               	return	
  1872  000FD4                     __end_of_buttonPressedIndicator:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           prodh	equ	0xFF4
  1879                           prodl	equ	0xFF3
  1880                           intcon	equ	0xFF2
  1881                           intcon2	equ	0xFF1
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           postdec1	equ	0xFE5
  1885                           fsr1l	equ	0xFE1
  1886                           indf2	equ	0xFDF
  1887                           postinc2	equ	0xFDE
  1888                           fsr2h	equ	0xFDA
  1889                           fsr2l	equ	0xFD9
  1890                           status	equ	0xFD8
  1891                           
  1892 ;; *************** function _getKey *****************
  1893 ;; Defined at:
  1894 ;;		line 28 in file "Keypad4X4.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  KeypadStatus    2   18[COMRAM] PTR struct .
  1897 ;;		 -> main@currentKeypadStatus(2), buttonPressedIndicator@keypad_state(2), 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  buttonPresse    1   21[COMRAM] enum E3790
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1909 ;;      Params:         2       0       0       0       0       0       0       0       0
  1910 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1911 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1912 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1913 ;;Total ram usage:        4 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    1
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_buttonPressedIndicator
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text12
  1925  000810                     __ptext12:
  1926                           	opt stack 0
  1927  000810                     _getKey:
  1928                           	opt stack 29
  1929                           
  1930                           ;Keypad4X4.c: 30: enum button buttonPressed;
  1931                           ;Keypad4X4.c: 32: LATB = 0xF7;
  1932                           
  1933                           ;incstack = 0
  1934  000810  0EF7               	movlw	247
  1935  000812  6E8A               	movwf	3978,c	;volatile
  1936                           
  1937                           ;Keypad4X4.c: 33: if ((PORTB & 0x80) == 0x00)
  1938  000814  BE81               	btfsc	3969,7,c	;volatile
  1939  000816  D016               	goto	l47
  1940                           
  1941                           ;Keypad4X4.c: 34: {
  1942                           ;Keypad4X4.c: 35: _delay((unsigned long)((5)*(4000000/4000.0)));
  1943  000818  0E07               	movlw	7
  1944  00081A  6E15               	movwf	??_getKey& (0+255),c
  1945  00081C  0E7D               	movlw	125
  1946  00081E                     u1647:
  1947  00081E  2EE8               	decfsz	wreg,f,c
  1948  000820  D7FE               	bra	u1647
  1949  000822  2E15               	decfsz	??_getKey& (0+255),f,c
  1950  000824  D7FC               	bra	u1647
  1951  000826  F000               	nop	
  1952                           
  1953                           ;Keypad4X4.c: 36: if ((PORTB & 0x80) == 0x00)
  1954  000828  BE81               	btfsc	3969,7,c	;volatile
  1955  00082A  D04A               	goto	l58
  1956                           
  1957                           ;Keypad4X4.c: 37: {
  1958                           ;Keypad4X4.c: 38: buttonPressed = button_1;
  1959  00082C  0E01               	movlw	1
  1960  00082E                     L3:
  1961  00082E  6E16               	movwf	getKey@buttonPressed,c
  1962  000830  D017               	goto	l1950
  1963  000832                     l1940:
  1964                           
  1965                           ;Keypad4X4.c: 40: KeypadStatus->keyPressed = buttonPressed;
  1966  000832  EE20 F001          	lfsr	2,1
  1967  000836  5013               	movf	getKey@KeypadStatus,w,c
  1968  000838  26D9               	addwf	fsr2l,f,c
  1969  00083A  5014               	movf	getKey@KeypadStatus+1,w,c
  1970  00083C  22DA               	addwfc	fsr2h,f,c
  1971  00083E  C016  FFDF         	movff	getKey@buttonPressed,indf2
  1972                           
  1973                           ;Keypad4X4.c: 41: return;
  1974  000842  0012               	return	
  1975  000844                     l47:
  1976                           
  1977                           ;Keypad4X4.c: 45: else if ((PORTB & 0x40) == 0x00)
  1978  000844  BC81               	btfsc	3969,6,c	;volatile
  1979  000846  D012               	goto	l51
  1980                           
  1981                           ;Keypad4X4.c: 46: {
  1982                           ;Keypad4X4.c: 47: _delay((unsigned long)((5)*(4000000/4000.0)));
  1983  000848  0E07               	movlw	7
  1984  00084A  6E15               	movwf	??_getKey& (0+255),c
  1985  00084C  0E7D               	movlw	125
  1986  00084E                     u1657:
  1987  00084E  2EE8               	decfsz	wreg,f,c
  1988  000850  D7FE               	bra	u1657
  1989  000852  2E15               	decfsz	??_getKey& (0+255),f,c
  1990  000854  D7FC               	bra	u1657
  1991  000856  F000               	nop	
  1992                           
  1993                           ;Keypad4X4.c: 48: if ((PORTB & 0x40) == 0x00)
  1994  000858  BC81               	btfsc	3969,6,c	;volatile
  1995  00085A  D032               	goto	l58
  1996                           
  1997                           ;Keypad4X4.c: 49: {
  1998                           ;Keypad4X4.c: 50: buttonPressed = button_4;
  1999  00085C  0E04               	movlw	4
  2000  00085E  D7E7               	goto	L3
  2001  000860                     l1950:
  2002                           
  2003                           ;Keypad4X4.c: 51: KeypadStatus->keyPressIndicator = 1;
  2004  000860  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2005  000864  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2006  000868  80DF               	bsf	indf2,0,c
  2007  00086A  D7E3               	goto	l1940
  2008  00086C                     l51:
  2009                           
  2010                           ;Keypad4X4.c: 57: else if ((PORTB & 0x20) == 0x00)
  2011  00086C  BA81               	btfsc	3969,5,c	;volatile
  2012  00086E  D00C               	goto	l54
  2013                           
  2014                           ;Keypad4X4.c: 58: {
  2015                           ;Keypad4X4.c: 59: _delay((unsigned long)((5)*(4000000/4000.0)));
  2016  000870  0E07               	movlw	7
  2017  000872  6E15               	movwf	??_getKey& (0+255),c
  2018  000874  0E7D               	movlw	125
  2019  000876                     u1667:
  2020  000876  2EE8               	decfsz	wreg,f,c
  2021  000878  D7FE               	bra	u1667
  2022  00087A  2E15               	decfsz	??_getKey& (0+255),f,c
  2023  00087C  D7FC               	bra	u1667
  2024  00087E  F000               	nop	
  2025                           
  2026                           ;Keypad4X4.c: 60: if ((PORTB & 0x20) == 0x00)
  2027  000880  BA81               	btfsc	3969,5,c	;volatile
  2028  000882  D01E               	goto	l58
  2029                           
  2030                           ;Keypad4X4.c: 61: {
  2031                           ;Keypad4X4.c: 62: buttonPressed = button_7;
  2032  000884  0E07               	movlw	7
  2033  000886  D7D3               	goto	L3
  2034  000888                     l54:
  2035                           
  2036                           ;Keypad4X4.c: 69: else if ((PORTB & 0x10) == 0x00)
  2037  000888  B881               	btfsc	3969,4,c	;volatile
  2038  00088A  D01A               	goto	l58
  2039                           
  2040                           ;Keypad4X4.c: 70: {
  2041                           ;Keypad4X4.c: 71: _delay((unsigned long)((5)*(4000000/4000.0)));
  2042  00088C  0E07               	movlw	7
  2043  00088E  6E15               	movwf	??_getKey& (0+255),c
  2044  000890  0E7D               	movlw	125
  2045  000892                     u1677:
  2046  000892  2EE8               	decfsz	wreg,f,c
  2047  000894  D7FE               	bra	u1677
  2048  000896  2E15               	decfsz	??_getKey& (0+255),f,c
  2049  000898  D7FC               	bra	u1677
  2050  00089A  F000               	nop	
  2051                           
  2052                           ;Keypad4X4.c: 72: if ((PORTB & 0x10) == 0x00)
  2053  00089C  B881               	btfsc	3969,4,c	;volatile
  2054  00089E  D010               	goto	l58
  2055                           
  2056                           ;Keypad4X4.c: 73: {
  2057                           ;Keypad4X4.c: 74: buttonPressed = SP_FUNC_ON;
  2058  0008A0  0E0D               	movlw	13
  2059  0008A2  6E16               	movwf	getKey@buttonPressed,c
  2060                           
  2061                           ;Keypad4X4.c: 75: KeypadStatus->keyPressIndicator = 1;
  2062  0008A4  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2063  0008A8  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2064  0008AC  80DF               	bsf	indf2,0,c
  2065                           
  2066                           ;Keypad4X4.c: 76: KeypadStatus->keyPressed = buttonPressed;
  2067  0008AE  EE20 F001          	lfsr	2,1
  2068  0008B2  5013               	movf	getKey@KeypadStatus,w,c
  2069  0008B4  26D9               	addwf	fsr2l,f,c
  2070  0008B6  5014               	movf	getKey@KeypadStatus+1,w,c
  2071  0008B8  22DA               	addwfc	fsr2h,f,c
  2072  0008BA  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2073                           
  2074                           ;Keypad4X4.c: 77: return;
  2075  0008BE  0012               	return	
  2076  0008C0                     l58:
  2077                           
  2078                           ;Keypad4X4.c: 78: }
  2079                           ;Keypad4X4.c: 79: }
  2080                           ;Keypad4X4.c: 81: LATB = 0xFB;
  2081  0008C0  0EFB               	movlw	251
  2082  0008C2  6E8A               	movwf	3978,c	;volatile
  2083                           
  2084                           ;Keypad4X4.c: 82: if ((PORTB & 0x80) == 0x00)
  2085  0008C4  BE81               	btfsc	3969,7,c	;volatile
  2086  0008C6  D014               	goto	l59
  2087                           
  2088                           ;Keypad4X4.c: 83: {
  2089                           ;Keypad4X4.c: 84: _delay((unsigned long)((5)*(4000000/4000.0)));
  2090  0008C8  0E07               	movlw	7
  2091  0008CA  6E15               	movwf	??_getKey& (0+255),c
  2092  0008CC  0E7D               	movlw	125
  2093  0008CE                     u1687:
  2094  0008CE  2EE8               	decfsz	wreg,f,c
  2095  0008D0  D7FE               	bra	u1687
  2096  0008D2  2E15               	decfsz	??_getKey& (0+255),f,c
  2097  0008D4  D7FC               	bra	u1687
  2098  0008D6  F000               	nop	
  2099                           
  2100                           ;Keypad4X4.c: 85: buttonPressed = button_2;
  2101  0008D8  0E02               	movlw	2
  2102  0008DA                     L4:
  2103  0008DA  6E16               	movwf	getKey@buttonPressed,c
  2104  0008DC  D015               	goto	l2000
  2105  0008DE                     l1990:
  2106                           
  2107                           ;Keypad4X4.c: 87: KeypadStatus->keyPressed = buttonPressed;
  2108  0008DE  EE20 F001          	lfsr	2,1
  2109  0008E2  5013               	movf	getKey@KeypadStatus,w,c
  2110  0008E4  26D9               	addwf	fsr2l,f,c
  2111  0008E6  5014               	movf	getKey@KeypadStatus+1,w,c
  2112  0008E8  22DA               	addwfc	fsr2h,f,c
  2113  0008EA  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2114                           
  2115                           ;Keypad4X4.c: 88: return;
  2116  0008EE  0012               	return	
  2117  0008F0                     l59:
  2118                           
  2119                           ;Keypad4X4.c: 91: else if ((PORTB & 0x40) == 0x00)
  2120  0008F0  BC81               	btfsc	3969,6,c	;volatile
  2121  0008F2  D010               	goto	l61
  2122                           
  2123                           ;Keypad4X4.c: 92: {
  2124                           ;Keypad4X4.c: 93: _delay((unsigned long)((5)*(4000000/4000.0)));
  2125  0008F4  0E07               	movlw	7
  2126  0008F6  6E15               	movwf	??_getKey& (0+255),c
  2127  0008F8  0E7D               	movlw	125
  2128  0008FA                     u1697:
  2129  0008FA  2EE8               	decfsz	wreg,f,c
  2130  0008FC  D7FE               	bra	u1697
  2131  0008FE  2E15               	decfsz	??_getKey& (0+255),f,c
  2132  000900  D7FC               	bra	u1697
  2133  000902  F000               	nop	
  2134                           
  2135                           ;Keypad4X4.c: 94: buttonPressed = button_5;
  2136  000904  0E05               	movlw	5
  2137  000906  D7E9               	goto	L4
  2138  000908                     l2000:
  2139                           
  2140                           ;Keypad4X4.c: 95: KeypadStatus->keyPressIndicator = 1;
  2141  000908  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2142  00090C  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2143  000910  80DF               	bsf	indf2,0,c
  2144  000912  D7E5               	goto	l1990
  2145  000914                     l61:
  2146                           
  2147                           ;Keypad4X4.c: 100: else if ((PORTB & 0x20) == 0x00)
  2148  000914  BA81               	btfsc	3969,5,c	;volatile
  2149  000916  D00A               	goto	l63
  2150                           
  2151                           ;Keypad4X4.c: 101: {
  2152                           ;Keypad4X4.c: 102: _delay((unsigned long)((5)*(4000000/4000.0)));
  2153  000918  0E07               	movlw	7
  2154  00091A  6E15               	movwf	??_getKey& (0+255),c
  2155  00091C  0E7D               	movlw	125
  2156  00091E                     u1707:
  2157  00091E  2EE8               	decfsz	wreg,f,c
  2158  000920  D7FE               	bra	u1707
  2159  000922  2E15               	decfsz	??_getKey& (0+255),f,c
  2160  000924  D7FC               	bra	u1707
  2161  000926  F000               	nop	
  2162                           
  2163                           ;Keypad4X4.c: 103: buttonPressed = button_8;
  2164  000928  0E08               	movlw	8
  2165  00092A  D7D7               	goto	L4
  2166  00092C                     l63:
  2167                           
  2168                           ;Keypad4X4.c: 109: else if ((PORTB & 0x10) == 0x00)
  2169  00092C  B881               	btfsc	3969,4,c	;volatile
  2170  00092E  D018               	goto	l65
  2171                           
  2172                           ;Keypad4X4.c: 110: {
  2173                           ;Keypad4X4.c: 111: _delay((unsigned long)((5)*(4000000/4000.0)));
  2174  000930  0E07               	movlw	7
  2175  000932  6E15               	movwf	??_getKey& (0+255),c
  2176  000934  0E7D               	movlw	125
  2177  000936                     u1717:
  2178  000936  2EE8               	decfsz	wreg,f,c
  2179  000938  D7FE               	bra	u1717
  2180  00093A  2E15               	decfsz	??_getKey& (0+255),f,c
  2181  00093C  D7FC               	bra	u1717
  2182  00093E  F000               	nop	
  2183                           
  2184                           ;Keypad4X4.c: 112: buttonPressed = button_0;
  2185  000940  0E00               	movlw	0
  2186  000942  6E16               	movwf	getKey@buttonPressed,c
  2187                           
  2188                           ;Keypad4X4.c: 113: KeypadStatus->keyPressIndicator = 1;
  2189  000944  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2190  000948  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2191  00094C  80DF               	bsf	indf2,0,c
  2192                           
  2193                           ;Keypad4X4.c: 114: KeypadStatus->keyPressed = buttonPressed;
  2194  00094E  EE20 F001          	lfsr	2,1
  2195  000952  5013               	movf	getKey@KeypadStatus,w,c
  2196  000954  26D9               	addwf	fsr2l,f,c
  2197  000956  5014               	movf	getKey@KeypadStatus+1,w,c
  2198  000958  22DA               	addwfc	fsr2h,f,c
  2199  00095A  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2200                           
  2201                           ;Keypad4X4.c: 115: return;
  2202  00095E  0012               	return	
  2203  000960                     l65:
  2204                           
  2205                           ;Keypad4X4.c: 116: }
  2206                           ;Keypad4X4.c: 118: LATB = 0xFD;
  2207  000960  0EFD               	movlw	253
  2208  000962  6E8A               	movwf	3978,c	;volatile
  2209                           
  2210                           ;Keypad4X4.c: 119: if ((PORTB & 0x80) == 0x00)
  2211  000964  BE81               	btfsc	3969,7,c	;volatile
  2212  000966  D014               	goto	l66
  2213                           
  2214                           ;Keypad4X4.c: 120: {
  2215                           ;Keypad4X4.c: 121: _delay((unsigned long)((5)*(4000000/4000.0)));
  2216  000968  0E07               	movlw	7
  2217  00096A  6E15               	movwf	??_getKey& (0+255),c
  2218  00096C  0E7D               	movlw	125
  2219  00096E                     u1727:
  2220  00096E  2EE8               	decfsz	wreg,f,c
  2221  000970  D7FE               	bra	u1727
  2222  000972  2E15               	decfsz	??_getKey& (0+255),f,c
  2223  000974  D7FC               	bra	u1727
  2224  000976  F000               	nop	
  2225                           
  2226                           ;Keypad4X4.c: 122: buttonPressed = button_3;
  2227  000978  0E03               	movlw	3
  2228  00097A                     L5:
  2229  00097A  6E16               	movwf	getKey@buttonPressed,c
  2230  00097C  D015               	goto	l2050
  2231  00097E                     l2040:
  2232                           
  2233                           ;Keypad4X4.c: 124: KeypadStatus->keyPressed = buttonPressed;
  2234  00097E  EE20 F001          	lfsr	2,1
  2235  000982  5013               	movf	getKey@KeypadStatus,w,c
  2236  000984  26D9               	addwf	fsr2l,f,c
  2237  000986  5014               	movf	getKey@KeypadStatus+1,w,c
  2238  000988  22DA               	addwfc	fsr2h,f,c
  2239  00098A  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2240                           
  2241                           ;Keypad4X4.c: 125: return;
  2242  00098E  0012               	return	
  2243  000990                     l66:
  2244                           
  2245                           ;Keypad4X4.c: 128: else if ((PORTB & 0x40) == 0x00)
  2246  000990  BC81               	btfsc	3969,6,c	;volatile
  2247  000992  D010               	goto	l68
  2248                           
  2249                           ;Keypad4X4.c: 129: {
  2250                           ;Keypad4X4.c: 130: _delay((unsigned long)((5)*(4000000/4000.0)));
  2251  000994  0E07               	movlw	7
  2252  000996  6E15               	movwf	??_getKey& (0+255),c
  2253  000998  0E7D               	movlw	125
  2254  00099A                     u1737:
  2255  00099A  2EE8               	decfsz	wreg,f,c
  2256  00099C  D7FE               	bra	u1737
  2257  00099E  2E15               	decfsz	??_getKey& (0+255),f,c
  2258  0009A0  D7FC               	bra	u1737
  2259  0009A2  F000               	nop	
  2260                           
  2261                           ;Keypad4X4.c: 131: buttonPressed = button_6;
  2262  0009A4  0E06               	movlw	6
  2263  0009A6  D7E9               	goto	L5
  2264  0009A8                     l2050:
  2265                           
  2266                           ;Keypad4X4.c: 132: KeypadStatus->keyPressIndicator = 1;
  2267  0009A8  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2268  0009AC  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2269  0009B0  80DF               	bsf	indf2,0,c
  2270  0009B2  D7E5               	goto	l2040
  2271  0009B4                     l68:
  2272                           
  2273                           ;Keypad4X4.c: 137: else if ((PORTB & 0x20) == 0x00)
  2274  0009B4  BA81               	btfsc	3969,5,c	;volatile
  2275  0009B6  D00A               	goto	l70
  2276                           
  2277                           ;Keypad4X4.c: 138: {
  2278                           ;Keypad4X4.c: 139: _delay((unsigned long)((5)*(4000000/4000.0)));
  2279  0009B8  0E07               	movlw	7
  2280  0009BA  6E15               	movwf	??_getKey& (0+255),c
  2281  0009BC  0E7D               	movlw	125
  2282  0009BE                     u1747:
  2283  0009BE  2EE8               	decfsz	wreg,f,c
  2284  0009C0  D7FE               	bra	u1747
  2285  0009C2  2E15               	decfsz	??_getKey& (0+255),f,c
  2286  0009C4  D7FC               	bra	u1747
  2287  0009C6  F000               	nop	
  2288                           
  2289                           ;Keypad4X4.c: 140: buttonPressed = button_9;
  2290  0009C8  0E09               	movlw	9
  2291  0009CA  D7D7               	goto	L5
  2292  0009CC                     l70:
  2293                           
  2294                           ;Keypad4X4.c: 146: else if ((PORTB & 0x10) == 0x00)
  2295  0009CC  B881               	btfsc	3969,4,c	;volatile
  2296  0009CE  D018               	goto	l72
  2297                           
  2298                           ;Keypad4X4.c: 147: {
  2299                           ;Keypad4X4.c: 148: _delay((unsigned long)((5)*(4000000/4000.0)));
  2300  0009D0  0E07               	movlw	7
  2301  0009D2  6E15               	movwf	??_getKey& (0+255),c
  2302  0009D4  0E7D               	movlw	125
  2303  0009D6                     u1757:
  2304  0009D6  2EE8               	decfsz	wreg,f,c
  2305  0009D8  D7FE               	bra	u1757
  2306  0009DA  2E15               	decfsz	??_getKey& (0+255),f,c
  2307  0009DC  D7FC               	bra	u1757
  2308  0009DE  F000               	nop	
  2309                           
  2310                           ;Keypad4X4.c: 149: buttonPressed = SP_FUNC_ENTER;
  2311  0009E0  0E0F               	movlw	15
  2312  0009E2  6E16               	movwf	getKey@buttonPressed,c
  2313                           
  2314                           ;Keypad4X4.c: 150: KeypadStatus->keyPressIndicator = 1;
  2315  0009E4  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2316  0009E8  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2317  0009EC  80DF               	bsf	indf2,0,c
  2318                           
  2319                           ;Keypad4X4.c: 151: KeypadStatus->keyPressed = buttonPressed;
  2320  0009EE  EE20 F001          	lfsr	2,1
  2321  0009F2  5013               	movf	getKey@KeypadStatus,w,c
  2322  0009F4  26D9               	addwf	fsr2l,f,c
  2323  0009F6  5014               	movf	getKey@KeypadStatus+1,w,c
  2324  0009F8  22DA               	addwfc	fsr2h,f,c
  2325  0009FA  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2326                           
  2327                           ;Keypad4X4.c: 152: return;
  2328  0009FE  0012               	return	
  2329  000A00                     l72:
  2330                           
  2331                           ;Keypad4X4.c: 153: }
  2332                           ;Keypad4X4.c: 155: LATB = 0xFE;
  2333  000A00  0EFE               	movlw	254
  2334  000A02  6E8A               	movwf	3978,c	;volatile
  2335                           
  2336                           ;Keypad4X4.c: 156: if ((PORTB & 0x80) == 0x00)
  2337  000A04  BE81               	btfsc	3969,7,c	;volatile
  2338  000A06  D018               	goto	l73
  2339                           
  2340                           ;Keypad4X4.c: 157: {
  2341                           ;Keypad4X4.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
  2342  000A08  0E07               	movlw	7
  2343  000A0A  6E15               	movwf	??_getKey& (0+255),c
  2344  000A0C  0E7D               	movlw	125
  2345  000A0E                     u1767:
  2346  000A0E  2EE8               	decfsz	wreg,f,c
  2347  000A10  D7FE               	bra	u1767
  2348  000A12  2E15               	decfsz	??_getKey& (0+255),f,c
  2349  000A14  D7FC               	bra	u1767
  2350  000A16  F000               	nop	
  2351                           
  2352                           ;Keypad4X4.c: 159: buttonPressed = SP_FUNC_A;
  2353  000A18  0E0B               	movlw	11
  2354  000A1A  6E16               	movwf	getKey@buttonPressed,c
  2355                           
  2356                           ;Keypad4X4.c: 160: KeypadStatus->keyPressIndicator = 1;
  2357  000A1C  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2358  000A20  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2359  000A24  80DF               	bsf	indf2,0,c
  2360                           
  2361                           ;Keypad4X4.c: 161: KeypadStatus->keyPressed = buttonPressed;
  2362  000A26  EE20 F001          	lfsr	2,1
  2363  000A2A  5013               	movf	getKey@KeypadStatus,w,c
  2364  000A2C  26D9               	addwf	fsr2l,f,c
  2365  000A2E  5014               	movf	getKey@KeypadStatus+1,w,c
  2366  000A30  22DA               	addwfc	fsr2h,f,c
  2367  000A32  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2368                           
  2369                           ;Keypad4X4.c: 163: }
  2370                           
  2371                           ;Keypad4X4.c: 162: return;
  2372  000A36  0012               	return	
  2373  000A38                     l73:
  2374                           
  2375                           ;Keypad4X4.c: 165: else if ((PORTB & 0x40) == 0x00)
  2376  000A38  BC81               	btfsc	3969,6,c	;volatile
  2377  000A3A  D018               	goto	l75
  2378                           
  2379                           ;Keypad4X4.c: 166: {
  2380                           ;Keypad4X4.c: 167: _delay((unsigned long)((5)*(4000000/4000.0)));
  2381  000A3C  0E07               	movlw	7
  2382  000A3E  6E15               	movwf	??_getKey& (0+255),c
  2383  000A40  0E7D               	movlw	125
  2384  000A42                     u1777:
  2385  000A42  2EE8               	decfsz	wreg,f,c
  2386  000A44  D7FE               	bra	u1777
  2387  000A46  2E15               	decfsz	??_getKey& (0+255),f,c
  2388  000A48  D7FC               	bra	u1777
  2389  000A4A  F000               	nop	
  2390                           
  2391                           ;Keypad4X4.c: 168: buttonPressed = SP_FUNC_B;
  2392  000A4C  0E0C               	movlw	12
  2393  000A4E  6E16               	movwf	getKey@buttonPressed,c
  2394                           
  2395                           ;Keypad4X4.c: 169: KeypadStatus->keyPressIndicator = 1;
  2396  000A50  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2397  000A54  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2398  000A58  80DF               	bsf	indf2,0,c
  2399                           
  2400                           ;Keypad4X4.c: 170: KeypadStatus->keyPressed = buttonPressed;
  2401  000A5A  EE20 F001          	lfsr	2,1
  2402  000A5E  5013               	movf	getKey@KeypadStatus,w,c
  2403  000A60  26D9               	addwf	fsr2l,f,c
  2404  000A62  5014               	movf	getKey@KeypadStatus+1,w,c
  2405  000A64  22DA               	addwfc	fsr2h,f,c
  2406  000A66  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2407                           
  2408                           ;Keypad4X4.c: 172: }
  2409                           
  2410                           ;Keypad4X4.c: 171: return;
  2411  000A6A  0012               	return	
  2412  000A6C                     l75:
  2413                           
  2414                           ;Keypad4X4.c: 174: else if ((PORTB & 0x20) == 0x00)
  2415  000A6C  BA81               	btfsc	3969,5,c	;volatile
  2416  000A6E  D018               	goto	l77
  2417                           
  2418                           ;Keypad4X4.c: 175: {
  2419                           ;Keypad4X4.c: 176: _delay((unsigned long)((5)*(4000000/4000.0)));
  2420  000A70  0E07               	movlw	7
  2421  000A72  6E15               	movwf	??_getKey& (0+255),c
  2422  000A74  0E7D               	movlw	125
  2423  000A76                     u1787:
  2424  000A76  2EE8               	decfsz	wreg,f,c
  2425  000A78  D7FE               	bra	u1787
  2426  000A7A  2E15               	decfsz	??_getKey& (0+255),f,c
  2427  000A7C  D7FC               	bra	u1787
  2428  000A7E  F000               	nop	
  2429                           
  2430                           ;Keypad4X4.c: 177: buttonPressed = NO_KEY_TUNE;
  2431  000A80  0E0A               	movlw	10
  2432  000A82  6E16               	movwf	getKey@buttonPressed,c
  2433                           
  2434                           ;Keypad4X4.c: 178: KeypadStatus->keyPressIndicator = 1;
  2435  000A84  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2436  000A88  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2437  000A8C  80DF               	bsf	indf2,0,c
  2438                           
  2439                           ;Keypad4X4.c: 179: KeypadStatus->keyPressed = buttonPressed;
  2440  000A8E  EE20 F001          	lfsr	2,1
  2441  000A92  5013               	movf	getKey@KeypadStatus,w,c
  2442  000A94  26D9               	addwf	fsr2l,f,c
  2443  000A96  5014               	movf	getKey@KeypadStatus+1,w,c
  2444  000A98  22DA               	addwfc	fsr2h,f,c
  2445  000A9A  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2446                           
  2447                           ;Keypad4X4.c: 181: }
  2448                           
  2449                           ;Keypad4X4.c: 180: return;
  2450  000A9E  0012               	return	
  2451  000AA0                     l77:
  2452                           
  2453                           ;Keypad4X4.c: 183: else if ((PORTB & 0x10) == 0x00)
  2454  000AA0  B881               	btfsc	3969,4,c	;volatile
  2455  000AA2  D018               	goto	l79
  2456                           
  2457                           ;Keypad4X4.c: 184: {
  2458                           ;Keypad4X4.c: 185: _delay((unsigned long)((5)*(4000000/4000.0)));
  2459  000AA4  0E07               	movlw	7
  2460  000AA6  6E15               	movwf	??_getKey& (0+255),c
  2461  000AA8  0E7D               	movlw	125
  2462  000AAA                     u1797:
  2463  000AAA  2EE8               	decfsz	wreg,f,c
  2464  000AAC  D7FE               	bra	u1797
  2465  000AAE  2E15               	decfsz	??_getKey& (0+255),f,c
  2466  000AB0  D7FC               	bra	u1797
  2467  000AB2  F000               	nop	
  2468                           
  2469                           ;Keypad4X4.c: 186: buttonPressed = SP_FUNC_OFF;
  2470  000AB4  0E0E               	movlw	14
  2471  000AB6  6E16               	movwf	getKey@buttonPressed,c
  2472                           
  2473                           ;Keypad4X4.c: 187: KeypadStatus->keyPressIndicator = 1;
  2474  000AB8  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2475  000ABC  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2476  000AC0  80DF               	bsf	indf2,0,c
  2477                           
  2478                           ;Keypad4X4.c: 188: KeypadStatus->keyPressed = buttonPressed;
  2479  000AC2  EE20 F001          	lfsr	2,1
  2480  000AC6  5013               	movf	getKey@KeypadStatus,w,c
  2481  000AC8  26D9               	addwf	fsr2l,f,c
  2482  000ACA  5014               	movf	getKey@KeypadStatus+1,w,c
  2483  000ACC  22DA               	addwfc	fsr2h,f,c
  2484  000ACE  C016  FFDF         	movff	getKey@buttonPressed,indf2
  2485                           
  2486                           ;Keypad4X4.c: 190: }
  2487                           
  2488                           ;Keypad4X4.c: 189: return;
  2489  000AD2  0012               	return	
  2490  000AD4                     l79:
  2491                           
  2492                           ;Keypad4X4.c: 192: else {
  2493                           ;Keypad4X4.c: 193: KeypadStatus->keyPressIndicator = 0;
  2494  000AD4  C013  FFD9         	movff	getKey@KeypadStatus,fsr2l
  2495  000AD8  C014  FFDA         	movff	getKey@KeypadStatus+1,fsr2h
  2496  000ADC  90DF               	bcf	indf2,0,c
  2497                           
  2498                           ;Keypad4X4.c: 194: KeypadStatus->keyPressed = NONE;
  2499  000ADE  EE20 F001          	lfsr	2,1
  2500  000AE2  5013               	movf	getKey@KeypadStatus,w,c
  2501  000AE4  26D9               	addwf	fsr2l,f,c
  2502  000AE6  5014               	movf	getKey@KeypadStatus+1,w,c
  2503  000AE8  22DA               	addwfc	fsr2h,f,c
  2504  000AEA  0E10               	movlw	16
  2505  000AEC  6EDF               	movwf	indf2,c
  2506                           
  2507                           ;Keypad4X4.c: 195: return;
  2508  000AEE  0012               	return	
  2509  000AF0                     __end_of_getKey:
  2510                           	opt stack 0
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           intcon	equ	0xFF2
  2518                           intcon2	equ	0xFF1
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           fsr1l	equ	0xFE1
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _beep_ok *****************
  2530 ;; Defined at:
  2531 ;;		line 265 in file "main.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2545 ;;      Params:         0       0       0       0       0       0       0       0       0
  2546 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2547 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2548 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2549 ;;Total ram usage:        1 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    1
  2552 ;; This function calls:
  2553 ;;		Nothing
  2554 ;; This function is called by:
  2555 ;;		_main
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text13
  2560  000EE6                     __ptext13:
  2561                           	opt stack 0
  2562  000EE6                     _beep_ok:
  2563                           	opt stack 29
  2564                           
  2565                           ;main.c: 267: (LATAbits.LATA0 = 1);
  2566                           
  2567                           ;incstack = 0
  2568  000EE6  8089               	bsf	3977,0,c	;volatile
  2569                           
  2570                           ;main.c: 268: _delay((unsigned long)((2)*(8000000/4000.0)));
  2571  000EE8  0E06               	movlw	6
  2572  000EEA  6E13               	movwf	??_beep_ok& (0+255),c
  2573  000EEC  0E30               	movlw	48
  2574  000EEE                     u1807:
  2575  000EEE  2EE8               	decfsz	wreg,f,c
  2576  000EF0  D7FE               	bra	u1807
  2577  000EF2  2E13               	decfsz	??_beep_ok& (0+255),f,c
  2578  000EF4  D7FC               	bra	u1807
  2579  000EF6  D000               	nop2	
  2580                           
  2581                           ;main.c: 269: (LATAbits.LATA0 = 0);
  2582  000EF8  9089               	bcf	3977,0,c	;volatile
  2583                           
  2584                           ;main.c: 270: _delay((unsigned long)((1)*(8000000/4000.0)));
  2585  000EFA  0E03               	movlw	3
  2586  000EFC  6E13               	movwf	??_beep_ok& (0+255),c
  2587  000EFE  0E98               	movlw	152
  2588  000F00                     u1817:
  2589  000F00  2EE8               	decfsz	wreg,f,c
  2590  000F02  D7FE               	bra	u1817
  2591  000F04  2E13               	decfsz	??_beep_ok& (0+255),f,c
  2592  000F06  D7FC               	bra	u1817
  2593                           
  2594                           ;main.c: 271: (LATAbits.LATA0 = 1);
  2595  000F08  8089               	bsf	3977,0,c	;volatile
  2596                           
  2597                           ;main.c: 272: _delay((unsigned long)((2)*(8000000/4000.0)));
  2598  000F0A  0E06               	movlw	6
  2599  000F0C  6E13               	movwf	??_beep_ok& (0+255),c
  2600  000F0E  0E30               	movlw	48
  2601  000F10                     u1827:
  2602  000F10  2EE8               	decfsz	wreg,f,c
  2603  000F12  D7FE               	bra	u1827
  2604  000F14  2E13               	decfsz	??_beep_ok& (0+255),f,c
  2605  000F16  D7FC               	bra	u1827
  2606  000F18  D000               	nop2	
  2607                           
  2608                           ;main.c: 273: (LATAbits.LATA0 = 0);
  2609  000F1A  9089               	bcf	3977,0,c	;volatile
  2610  000F1C  0012               	return		;funcret
  2611  000F1E                     __end_of_beep_ok:
  2612                           	opt stack 0
  2613                           tblptru	equ	0xFF8
  2614                           tblptrh	equ	0xFF7
  2615                           tblptrl	equ	0xFF6
  2616                           tablat	equ	0xFF5
  2617                           prodh	equ	0xFF4
  2618                           prodl	equ	0xFF3
  2619                           intcon	equ	0xFF2
  2620                           intcon2	equ	0xFF1
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           postdec1	equ	0xFE5
  2624                           fsr1l	equ	0xFE1
  2625                           indf2	equ	0xFDF
  2626                           postinc2	equ	0xFDE
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _beep *****************
  2632 ;; Defined at:
  2633 ;;		line 258 in file "main.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;		None
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;		None
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      void 
  2640 ;; Registers used:
  2641 ;;		wreg
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2647 ;;      Params:         0       0       0       0       0       0       0       0       0
  2648 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2649 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2650 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2651 ;;Total ram usage:        1 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    1
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_main
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text14
  2662  000FD4                     __ptext14:
  2663                           	opt stack 0
  2664  000FD4                     _beep:
  2665                           	opt stack 29
  2666                           
  2667                           ;main.c: 260: (LATAbits.LATA0 = 1);
  2668                           
  2669                           ;incstack = 0
  2670  000FD4  8089               	bsf	3977,0,c	;volatile
  2671                           
  2672                           ;main.c: 261: _delay((unsigned long)((10)*(8000000/4000.0)));
  2673  000FD6  0E1A               	movlw	26
  2674  000FD8  6E13               	movwf	??_beep& (0+255),c
  2675  000FDA  0EF8               	movlw	248
  2676  000FDC                     u1837:
  2677  000FDC  2EE8               	decfsz	wreg,f,c
  2678  000FDE  D7FE               	bra	u1837
  2679  000FE0  2E13               	decfsz	??_beep& (0+255),f,c
  2680  000FE2  D7FC               	bra	u1837
  2681  000FE4  D000               	nop2	
  2682                           
  2683                           ;main.c: 262: (LATAbits.LATA0 = 0);
  2684  000FE6  9089               	bcf	3977,0,c	;volatile
  2685  000FE8  0012               	return		;funcret
  2686  000FEA                     __end_of_beep:
  2687                           	opt stack 0
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           intcon	equ	0xFF2
  2695                           intcon2	equ	0xFF1
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           postdec1	equ	0xFE5
  2699                           fsr1l	equ	0xFE1
  2700                           indf2	equ	0xFDF
  2701                           postinc2	equ	0xFDE
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function _arr_to_num *****************
  2707 ;; Defined at:
  2708 ;;		line 100 in file "main.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  arr             2   18[COMRAM] PTR unsigned char 
  2711 ;;		 -> main@keypressArray(10), 
  2712 ;;  num_of_eleme    1   20[COMRAM] unsigned char 
  2713 ;;  number          2   21[COMRAM] PTR unsigned char 
  2714 ;;		 -> main@locker_num(1), 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  a               1   24[COMRAM] unsigned char 
  2717 ;;  validity        1   25[COMRAM] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      unsigned char 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2727 ;;      Params:         5       0       0       0       0       0       0       0       0
  2728 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2729 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2730 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2731 ;;Total ram usage:        8 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    1
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_main
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text15
  2742  000D3E                     __ptext15:
  2743                           	opt stack 0
  2744  000D3E                     _arr_to_num:
  2745                           	opt stack 29
  2746                           
  2747                           ;main.c: 102: unsigned char validity = 0;
  2748                           
  2749                           ;incstack = 0
  2750  000D3E  0E00               	movlw	0
  2751  000D40  6E1A               	movwf	arr_to_num@validity,c
  2752                           
  2753                           ;main.c: 103: *number = 0;
  2754  000D42  C016  FFD9         	movff	arr_to_num@number,fsr2l
  2755  000D46  C017  FFDA         	movff	arr_to_num@number+1,fsr2h
  2756  000D4A  0E00               	movlw	0
  2757  000D4C  6EDF               	movwf	indf2,c
  2758                           
  2759                           ;main.c: 105: if(num_of_elements > 3)
  2760  000D4E  0E03               	movlw	3
  2761  000D50  6415               	cpfsgt	arr_to_num@num_of_elements,c
  2762  000D52  D002               	goto	l239
  2763                           
  2764                           ;main.c: 106: return validity;
  2765  000D54  501A               	movf	arr_to_num@validity,w,c
  2766  000D56  0012               	return	
  2767  000D58                     l239:
  2768                           
  2769                           ;main.c: 108: if((num_of_elements == 3) && (arr[0] == 2) && (arr[1] == 5) && (arr[2] == 
      +                          6))
  2770  000D58  0E03               	movlw	3
  2771  000D5A  1815               	xorwf	arr_to_num@num_of_elements,w,c
  2772  000D5C  A4D8               	btfss	status,2,c
  2773  000D5E  D01E               	goto	l241
  2774  000D60  C013  FFD9         	movff	arr_to_num@arr,fsr2l
  2775  000D64  C014  FFDA         	movff	arr_to_num@arr+1,fsr2h
  2776  000D68  0E02               	movlw	2
  2777  000D6A  18DE               	xorwf	postinc2,w,c
  2778  000D6C  A4D8               	btfss	status,2,c
  2779  000D6E  D016               	goto	l241
  2780  000D70  EE20 F001          	lfsr	2,1
  2781  000D74  5013               	movf	arr_to_num@arr,w,c
  2782  000D76  26D9               	addwf	fsr2l,f,c
  2783  000D78  5014               	movf	arr_to_num@arr+1,w,c
  2784  000D7A  22DA               	addwfc	fsr2h,f,c
  2785  000D7C  0E05               	movlw	5
  2786  000D7E  18DE               	xorwf	postinc2,w,c
  2787  000D80  A4D8               	btfss	status,2,c
  2788  000D82  D00C               	goto	l241
  2789  000D84  EE20 F002          	lfsr	2,2
  2790  000D88  5013               	movf	arr_to_num@arr,w,c
  2791  000D8A  26D9               	addwf	fsr2l,f,c
  2792  000D8C  5014               	movf	arr_to_num@arr+1,w,c
  2793  000D8E  22DA               	addwfc	fsr2h,f,c
  2794  000D90  0E06               	movlw	6
  2795  000D92  18DE               	xorwf	postinc2,w,c
  2796  000D94  A4D8               	btfss	status,2,c
  2797  000D96  D002               	goto	l241
  2798                           
  2799                           ;main.c: 109: return validity;
  2800  000D98  501A               	movf	arr_to_num@validity,w,c
  2801  000D9A  0012               	return	
  2802  000D9C                     l241:
  2803                           
  2804                           ;main.c: 110: for(unsigned char a = 0; a < num_of_elements; a++)
  2805  000D9C  0E00               	movlw	0
  2806  000D9E  6E19               	movwf	arr_to_num@a,c
  2807  000DA0  D018               	goto	l242
  2808  000DA2                     
  2809                           ;main.c: 111: {
  2810                           ;main.c: 112: *number = (*number * 10) + arr[a];
  2811  000DA2  5019               	movf	arr_to_num@a,w,c
  2812  000DA4  0D01               	mullw	1
  2813  000DA6  50F3               	movf	prodl,w,c
  2814  000DA8  2413               	addwf	arr_to_num@arr,w,c
  2815  000DAA  6ED9               	movwf	fsr2l,c
  2816  000DAC  50F4               	movf	prodh,w,c
  2817  000DAE  2014               	addwfc	arr_to_num@arr+1,w,c
  2818  000DB0  6EDA               	movwf	fsr2h,c
  2819  000DB2  50DF               	movf	indf2,w,c
  2820  000DB4  6E18               	movwf	??_arr_to_num& (0+255),c
  2821  000DB6  C016  FFD9         	movff	arr_to_num@number,fsr2l
  2822  000DBA  C017  FFDA         	movff	arr_to_num@number+1,fsr2h
  2823  000DBE  50DF               	movf	indf2,w,c
  2824  000DC0  0D0A               	mullw	10
  2825  000DC2  50F3               	movf	prodl,w,c
  2826  000DC4  2418               	addwf	??_arr_to_num,w,c
  2827  000DC6  C016  FFD9         	movff	arr_to_num@number,fsr2l
  2828  000DCA  C017  FFDA         	movff	arr_to_num@number+1,fsr2h
  2829  000DCE  6EDF               	movwf	indf2,c
  2830  000DD0  2A19               	incf	arr_to_num@a,f,c
  2831  000DD2                     l242:
  2832  000DD2  5015               	movf	arr_to_num@num_of_elements,w,c
  2833  000DD4  5C19               	subwf	arr_to_num@a,w,c
  2834  000DD6  A0D8               	btfss	status,0,c
  2835  000DD8  D7E4               	goto	l243
  2836                           
  2837                           ;main.c: 113: }
  2838                           ;main.c: 114: validity = 1;
  2839  000DDA  0E01               	movlw	1
  2840  000DDC  6E1A               	movwf	arr_to_num@validity,c
  2841                           
  2842                           ;main.c: 115: return validity;
  2843  000DDE  501A               	movf	arr_to_num@validity,w,c
  2844  000DE0  0012               	return	
  2845  000DE2                     __end_of_arr_to_num:
  2846                           	opt stack 0
  2847                           tblptru	equ	0xFF8
  2848                           tblptrh	equ	0xFF7
  2849                           tblptrl	equ	0xFF6
  2850                           tablat	equ	0xFF5
  2851                           prodh	equ	0xFF4
  2852                           prodl	equ	0xFF3
  2853                           intcon	equ	0xFF2
  2854                           intcon2	equ	0xFF1
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1l	equ	0xFE1
  2859                           indf2	equ	0xFDF
  2860                           postinc2	equ	0xFDE
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function _ISR *****************
  2866 ;; Defined at:
  2867 ;;		line 141 in file "main.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;		None
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;		None
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, status,2, status,0
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2881 ;;      Params:         0       0       0       0       0       0       0       0       0
  2882 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2883 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2884 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2885 ;;Total ram usage:       18 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		Interrupt level 2
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	intcode
  2895  000008                     __pintcode:
  2896                           	opt stack 0
  2897  000008                     _ISR:
  2898                           	opt stack 28
  2899                           
  2900                           ;incstack = 0
  2901  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2902  00000A  ED3B  F006         	call	int_func,f	;refresh shadow registers
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           intcon	equ	0xFF2
  2910                           intcon2	equ	0xFF1
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           postdec1	equ	0xFE5
  2914                           fsr1l	equ	0xFE1
  2915                           indf2	equ	0xFDF
  2916                           postinc2	equ	0xFDE
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921                           	psect	intcode_body
  2922  000C76                     __pintcode_body:
  2923                           	opt stack 28
  2924  000C76                     int_func:
  2925                           	opt stack 28
  2926  000C76  0006               	pop		; remove dummy address from shadow register refresh
  2927  000C78  CFFA F001          	movff	pclath,??_ISR
  2928  000C7C  CFFB F002          	movff	pclatu,??_ISR+1
  2929  000C80  CFE9 F003          	movff	fsr0l,??_ISR+2
  2930  000C84  CFEA F004          	movff	fsr0h,??_ISR+3
  2931  000C88  CFE1 F005          	movff	fsr1l,??_ISR+4
  2932  000C8C  CFE2 F006          	movff	fsr1h,??_ISR+5
  2933  000C90  CFD9 F007          	movff	fsr2l,??_ISR+6
  2934  000C94  CFDA F008          	movff	fsr2h,??_ISR+7
  2935  000C98  CFF3 F009          	movff	prodl,??_ISR+8
  2936  000C9C  CFF4 F00A          	movff	prodh,??_ISR+9
  2937  000CA0  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2938  000CA4  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2939  000CA8  CFF8 F00D          	movff	tblptru,??_ISR+12
  2940  000CAC  CFF5 F00E          	movff	tablat,??_ISR+13
  2941  000CB0  C042  F00F         	movff	btemp,??_ISR+14
  2942  000CB4  C043  F010         	movff	btemp+1,??_ISR+15
  2943  000CB8  C044  F011         	movff	btemp+2,??_ISR+16
  2944  000CBC  C045  F012         	movff	btemp+3,??_ISR+17
  2945                           
  2946                           ;main.c: 143: if(RBIF)
  2947  000CC0  A0F2               	btfss	intcon,0,c	;volatile
  2948  000CC2  D008               	goto	i2l262
  2949                           
  2950                           ;main.c: 144: {
  2951                           ;main.c: 145: RBIF = 0;
  2952  000CC4  90F2               	bcf	intcon,0,c	;volatile
  2953                           
  2954                           ;main.c: 146: ((volatile _io_reg*)&systemStateReg)->bit7 = 0;
  2955  000CC6  9E3C               	bcf	_systemStateReg,7,c	;volatile
  2956                           
  2957                           ;main.c: 148: timer1OVFcount = 0;
  2958  000CC8  0E00               	movlw	0
  2959  000CCA  6E39               	movwf	_timer1OVFcount,c	;volatile
  2960                           
  2961                           ;main.c: 149: T1CONbits.TMR1ON = 1;
  2962  000CCC  80CD               	bsf	4045,0,c	;volatile
  2963                           
  2964                           ;main.c: 151: if(PORTB)
  2965  000CCE  5081               	movf	3969,w,c	;volatile
  2966  000CD0  A4D8               	btfss	status,2,c
  2967                           
  2968                           ;main.c: 152: __nop();
  2969  000CD2  F000               	nop	
  2970  000CD4                     i2l262:
  2971                           
  2972                           ;main.c: 153: }
  2973                           ;main.c: 154: if(PIR1bits.TMR1IF)
  2974  000CD4  A09E               	btfss	3998,0,c	;volatile
  2975  000CD6  D00D               	goto	i2l263
  2976                           
  2977                           ;main.c: 155: {
  2978                           ;main.c: 156: timer1OVFcount++;
  2979  000CD8  2A39               	incf	_timer1OVFcount,f,c	;volatile
  2980                           
  2981                           ;main.c: 157: TMR1 = 0;
  2982  000CDA  0E00               	movlw	0
  2983  000CDC  6ECF               	movwf	4047,c	;volatile
  2984  000CDE  0E00               	movlw	0
  2985  000CE0  6ECE               	movwf	4046,c	;volatile
  2986                           
  2987                           ;main.c: 158: if(timer1OVFcount == 10)
  2988  000CE2  0E0A               	movlw	10
  2989  000CE4  1839               	xorwf	_timer1OVFcount,w,c	;volatile
  2990  000CE6  A4D8               	btfss	status,2,c
  2991  000CE8  D003               	goto	i2l264
  2992                           
  2993                           ;main.c: 159: {
  2994                           ;main.c: 160: ((volatile _io_reg*)&systemStateReg)->bit7 = 1;
  2995  000CEA  8E3C               	bsf	_systemStateReg,7,c	;volatile
  2996                           
  2997                           ;main.c: 161: T1CONbits.TMR1ON = 0;
  2998  000CEC  90CD               	bcf	4045,0,c	;volatile
  2999                           
  3000                           ;main.c: 162: ((volatile _io_reg*)&systemStateReg)->bit5 = 1;
  3001  000CEE  8A3C               	bsf	_systemStateReg,5,c	;volatile
  3002  000CF0                     i2l264:
  3003                           
  3004                           ;main.c: 164: }
  3005                           ;main.c: 165: PIR1bits.TMR1IF = 0;
  3006  000CF0  909E               	bcf	3998,0,c	;volatile
  3007  000CF2                     i2l263:
  3008  000CF2  C012  F045         	movff	??_ISR+17,btemp+3
  3009  000CF6  C011  F044         	movff	??_ISR+16,btemp+2
  3010  000CFA  C010  F043         	movff	??_ISR+15,btemp+1
  3011  000CFE  C00F  F042         	movff	??_ISR+14,btemp
  3012  000D02  C00E  FFF5         	movff	??_ISR+13,tablat
  3013  000D06  C00D  FFF8         	movff	??_ISR+12,tblptru
  3014  000D0A  C00C  FFF7         	movff	??_ISR+11,tblptrh
  3015  000D0E  C00B  FFF6         	movff	??_ISR+10,tblptrl
  3016  000D12  C00A  FFF4         	movff	??_ISR+9,prodh
  3017  000D16  C009  FFF3         	movff	??_ISR+8,prodl
  3018  000D1A  C008  FFDA         	movff	??_ISR+7,fsr2h
  3019  000D1E  C007  FFD9         	movff	??_ISR+6,fsr2l
  3020  000D22  C006  FFE2         	movff	??_ISR+5,fsr1h
  3021  000D26  C005  FFE1         	movff	??_ISR+4,fsr1l
  3022  000D2A  C004  FFEA         	movff	??_ISR+3,fsr0h
  3023  000D2E  C003  FFE9         	movff	??_ISR+2,fsr0l
  3024  000D32  C002  FFFB         	movff	??_ISR+1,pclatu
  3025  000D36  C001  FFFA         	movff	??_ISR,pclath
  3026  000D3A  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3027  000D3C  0011               	retfie		f
  3028  000D3E                     __end_of_ISR:
  3029                           	opt stack 0
  3030                           pclatu	equ	0xFFB
  3031                           pclath	equ	0xFFA
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           intcon	equ	0xFF2
  3039                           intcon2	equ	0xFF1
  3040                           postinc0	equ	0xFEE
  3041                           fsr0h	equ	0xFEA
  3042                           fsr0l	equ	0xFE9
  3043                           wreg	equ	0xFE8
  3044                           postdec1	equ	0xFE5
  3045                           fsr1h	equ	0xFE2
  3046                           fsr1l	equ	0xFE1
  3047                           indf2	equ	0xFDF
  3048                           postinc2	equ	0xFDE
  3049                           fsr2h	equ	0xFDA
  3050                           fsr2l	equ	0xFD9
  3051                           status	equ	0xFD8
  3052                           pclatu	equ	0xFFB
  3053                           pclath	equ	0xFFA
  3054                           tblptru	equ	0xFF8
  3055                           tblptrh	equ	0xFF7
  3056                           tblptrl	equ	0xFF6
  3057                           tablat	equ	0xFF5
  3058                           prodh	equ	0xFF4
  3059                           prodl	equ	0xFF3
  3060                           intcon	equ	0xFF2
  3061                           intcon2	equ	0xFF1
  3062                           postinc0	equ	0xFEE
  3063                           fsr0h	equ	0xFEA
  3064                           fsr0l	equ	0xFE9
  3065                           wreg	equ	0xFE8
  3066                           postdec1	equ	0xFE5
  3067                           fsr1h	equ	0xFE2
  3068                           fsr1l	equ	0xFE1
  3069                           indf2	equ	0xFDF
  3070                           postinc2	equ	0xFDE
  3071                           fsr2h	equ	0xFDA
  3072                           fsr2l	equ	0xFD9
  3073                           status	equ	0xFD8
  3074                           
  3075                           	psect	rparam
  3076  0000                     pclatu	equ	0xFFB
  3077                           pclath	equ	0xFFA
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon	equ	0xFF2
  3085                           intcon2	equ	0xFF1
  3086                           postinc0	equ	0xFEE
  3087                           fsr0h	equ	0xFEA
  3088                           fsr0l	equ	0xFE9
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1h	equ	0xFE2
  3092                           fsr1l	equ	0xFE1
  3093                           indf2	equ	0xFDF
  3094                           postinc2	equ	0xFDE
  3095                           fsr2h	equ	0xFDA
  3096                           fsr2l	equ	0xFD9
  3097                           status	equ	0xFD8
  3098                           
  3099                           	psect	temp
  3100  000042                     btemp:
  3101                           	opt stack 0
  3102  000042                     	ds	1
  3103  0000                     int$flags	set	btemp
  3104  0000                     wtemp6	set	btemp+1
  3105                           pclatu	equ	0xFFB
  3106                           pclath	equ	0xFFA
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           intcon	equ	0xFF2
  3114                           intcon2	equ	0xFF1
  3115                           postinc0	equ	0xFEE
  3116                           fsr0h	equ	0xFEA
  3117                           fsr0l	equ	0xFE9
  3118                           wreg	equ	0xFE8
  3119                           postdec1	equ	0xFE5
  3120                           fsr1h	equ	0xFE2
  3121                           fsr1l	equ	0xFE1
  3122                           indf2	equ	0xFDF
  3123                           postinc2	equ	0xFDE
  3124                           fsr2h	equ	0xFDA
  3125                           fsr2l	equ	0xFD9
  3126                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    14
    Data        5
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      65
    BANK0           160     17     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eepromCode	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    passcodeCompare@keybuffer1	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    clear_keyArray@arr	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    arr_to_num@arr	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 

    arr_to_num@number	PTR unsigned char  size(2) Largest target is 1
		 -> main@locker_num(BANK0[1]), 

    getKey@KeypadStatus	PTR struct . size(2) Largest target is 2
		 -> main@currentKeypadStatus(BANK0[2]), buttonPressedIndicator@keypad_state(COMRAM[2]), 

    eepromWriteCode@codeBuffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@keypressArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_passcodeCompare
    _passcodeCompare->_readEEPROM
    _eepromWriteCode->_writeEEPROM
    _check_password_presence->_readEEPROM
    _buttonPressedIndicator->_getKey

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    8218
                                              0 BANK0     17    17      0
                         _arr_to_num
                               _beep
                            _beep_ok
             _buttonPressedIndicator
            _check_lock_num_validity
            _check_password_presence
                     _clear_keyArray
                    _eepromWriteCode
                             _getKey
                   _initControllerIO
                         _initKeypad
                   _initStandbyTimer
                    _passcodeCompare
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _passcodeCompare                                     14    10      4     564
                                             19 COMRAM    14    10      4
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _initStandbyTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initControllerIO                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _eepromWriteCode                                      5     2      3     862
                                             21 COMRAM     5     2      3
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _writeEEPROM                                          3     2      1     456
                                             18 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _clear_keyArray                                       3     1      2     400
                                             18 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _check_password_presence                              4     4      0     114
                                             19 COMRAM     4     4      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _readEEPROM                                           1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_lock_num_validity                              2     2      0      69
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _buttonPressedIndicator                               2     2      0    1993
                                             22 COMRAM     2     2      0
                             _getKey
 ---------------------------------------------------------------------------------
 (1) _getKey                                               4     2      2    1778
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _beep_ok                                              1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _arr_to_num                                           8     3      5     747
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _arr_to_num
   _beep
   _beep_ok
   _buttonPressedIndicator
     _getKey
   _check_lock_num_validity
   _check_password_presence
     _readEEPROM
   _clear_keyArray
   _eepromWriteCode
     _writeEEPROM
   _getKey
   _initControllerIO
   _initKeypad
   _initStandbyTimer
   _passcodeCompare
     _readEEPROM
   _readEEPROM
   _writeEEPROM

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     11      75       5       73.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      41       1       69.1%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B6      11        0.0%
DATA                 0      0      B6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Mar 25 11:55:16 2018

                                l17 0EDC                                  l18 0EBE  
                                l51 086C                                  l61 0914  
                                l70 09CC                                  l54 0888  
                                l63 092C                                  l47 0844  
                                l72 0A00                                  l73 0A38  
                                l65 0960                                  l66 0990  
                                l58 08C0                                  l75 0A6C  
                                l59 08F0                                  l68 09B4  
                                l77 0AA0                                  l79 0AD4  
                       __CFG_BOR$ON 000000                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                               l311 0C6A                                 l241 0D9C  
                               l321 0E2E                                 l242 0DD2  
                               l322 0E04                                 l306 0C4A  
                               l243 0DA2                                 l251 0FB8  
                               l323 0E28                                 l324 0E2C  
                               l239 0D58                                 l255 0F76  
                               l319 0DFE                                 l249 0FB4  
                               l290 0BF6                                 l291 0BAE  
                               l284 0B3C                                 l277 0F86  
  eeprom_functions@eepromCodeBuffer 0060                        __CFG_CPB$OFF 000000  
                               _PR2 000FCB                        __CFG_CPD$OFF 000000  
                               _ISR 0008                                 prod 000FF3  
                               wreg 000FE8                        __CFG_LVP$OFF 000000  
                              ?_ISR 0001                        __CFG_WDT$OFF 000000  
                              l2000 0908                                l2040 097E  
                              l2050 09A8                                l2248 0F7E  
                              l2266 0DF8                                l2354 0BE8  
                              l2374 0C38                                l2378 0C44  
                              l1940 0832                                l1950 0860  
                              l1990 08DE                                l1898 0F20  
                              u1115 0F4A                                u1116 0F4C  
                              u1330 0FD0                                _LATB 000F8A  
                              u1470 0E5E                                u1707 091E  
                              u1717 0936                                u1807 0EEE  
                              u1727 096E                                u1647 081E  
                              u1817 0F00                                u1737 099A  
                              u1657 084E                                u1827 0F10  
                              u1747 09BE                                u1667 0876  
                              u1837 0FDC                                u1757 09D6  
                              u1677 0892                                u1767 0A0E  
                              u1687 08CE                                u1777 0A42  
                              u1697 08FA                                u1787 0A76  
                              u1797 0AAA                                _RBIF 007F90  
                              _TMR1 000FCE                     _passcodeCompare 0DE2  
                       arr_to_num@a 0019                                _beep 0FD4  
                              _main 0AF0                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 0042                                prodh 000FF4  
                              prodl 000FF3                                start 000E  
                     __CFG_IESO$OFF 000000                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                         _writeEEPROM 0F1E  
                             ??_ISR 0001                      _systemStateReg 003C  
   check_lock_num_validity@lock_num 0014                       __CFG_PLLDIV$1 000000  
                             ?_beep 0001                  writeEEPROM@address 0014  
                             ?_main 0001                               _EEADR 000FA9  
   check_lock_num_validity@validity 0013                               _CMCON 000FB4  
                             _T2CON 000FCA                               i2l262 0CD4  
                             i2l263 0CF2                               i2l264 0CF0  
                             _PORTB 000F81                     __end_of_beep_ok 0F1E  
                     __CFG_USBDIV$1 000000                               _TRISB 000F93  
                     __CFG_PWRT$OFF 000000                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBTRB$OFF 000000  
         ??_check_lock_num_validity 0013                               main@a 00C4  
            _factoryResetCodeLenght 0041                               pclath 000FFA  
                             tablat 000FF5                               status 000FD8  
                             wtemp6 0043                      __CFG_ICPRT$OFF 000000  
           __size_of_clear_keyArray 0024                     __initialization 0E62  
                      __end_of_beep 0FEA                        __end_of_main 0C76  
                   _systemStateReg2 003B                              ??_beep 0013  
                  _initStandbyTimer 0FEA                              ??_main 0022  
                     __activetblptr 000001               _tempCodeKeyPressCount 0035  
    eepromWriteCode@eepromWriteAddr 0019             __end_of_passcodeCompare 0E62  
                   __CFG_CCP2MX$OFF 000000                              _ADCON1 000FC1  
          __size_of_eepromWriteCode 003A                              _EEDATA 000FA8  
                            _CCPR1L 000FBE                              _EECON2 000FA7  
                     _keyPressCount 003A                   main@keypressArray 00C5  
                   _defaultPassCode 0801                              _TRISA3 007C93  
   passcodeCompare@storedCodeLenght 001F             main@currentKeypadStatus 00D3  
          ?_check_password_presence 0001                      __CFG_XINST$OFF 000000  
   __end_of_check_lock_num_validity 0FBC                       arr_to_num@arr 0013  
                  _factoryResetCode 003D                   ?_initControllerIO 0001  
                    __CFG_STVREN$ON 000000                              _getKey 0810  
           ?_buttonPressedIndicator 0001                           ??_beep_ok 0013  
                ??_initControllerIO 0013                              clear_0 0E88  
                            clear_1 0E94                        __pdataCOMRAM 003D  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                        __accesstop 0060             __end_of__initialization 0E9A  
                   __CFG_PBADEN$OFF 000000                       ___rparam_used 000001  
                    __pcstackCOMRAM 0001      __end_of_buttonPressedIndicator 0FD4  
        passcodeCompare@compareAddr 0017             __end_of_defaultPassCode 080A  
                  ?_passcodeCompare 0014                      _tempCodeBuffer 0079  
                        __pbssBANK0 0060                      _clear_keyArray 0F7A  
                 ??_eepromWriteCode 0019                        ?_writeEEPROM 0013  
                           ?_getKey 0013                             _CCP1CON 000FBD  
                  passcodeCompare@i 0020                          _eepromCode 002E  
                   clear_keyArray@a 0015                    _defaultPassCode2 080A  
                        _arr_to_num 0D3E              __end_of_clear_keyArray 0F9E  
     __end_of_defaultPassCodeLenght 080F                     __CFG_VREGEN$OFF 000000  
          __end_of_initStandbyTimer 0FFA                          _readEEPROM 1014  
         passcodeCompare@keybuffer1 0014                      main@locker_num 00D2  
            main@currentSystemState 00D0                             __Hparam 0000  
       check_password_presence@addr 0017                             __Lparam 0000  
                        _initKeypad 0FFA              _defaultPassCode2Lenght 080D  
                   __size_of_getKey 02E0                        __psmallconst 0800  
                           _beep_ok 0EE6                             __pcinit 0E62  
                           __ramtop 0800                             __ptext0 0AF0  
                           __ptext1 0DE2                             __ptext2 0FEA  
                           __ptext3 0FFA                             __ptext4 1008  
                           __ptext5 0EAC                             __ptext6 0F1E  
                           __ptext7 0F7A                             __ptext8 0F50  
                           __ptext9 1014                        __size_of_ISR 0D36  
                         _T1CONbits 000FCD                    eepromWriteCode@i 001A  
                    __pintcode_body 0C76                end_of_initialization 0E9A  
                   ?_clear_keyArray 0013                             int_func 0C76  
                 clear_keyArray@arr 0013             passcodeCompare@validity 0021  
                timer@timerOVFcount 0032                      _timer1OVFcount 0039  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                      _timer2OVFcount 0030  
                      _LASTPASSCODE 0036    __size_of_check_password_presence 002A  
          ?_check_lock_num_validity 0001                           _TRISAbits 000F92  
         __size_of_initControllerIO 000C                         ?_arr_to_num 0013  
                 readEEPROM@address 0013                          _soundStuff 0028  
                       ?_readEEPROM 0001                    writeEEPROM@datas 0013  
                       ?_initKeypad 0001                __size_of_writeEEPROM 0032  
                     __pidataCOMRAM 1020                      __end_of_getKey 0AF0  
               getKey@buttonPressed 0016                  arr_to_num@validity 001A  
               start_initialization 0E62                         __end_of_ISR 0D3E  
                   _eepromWriteCode 0EAC            __end_of_defaultPassCode2 080D  
               __size_of_arr_to_num 00A4                            ??_getKey 0015  
                  __CFG_LPT1OSC$OFF 000000                 __size_of_readEEPROM 000C  
                       __pbssCOMRAM 0022                       __pcstackBANK0 00C4  
                  arr_to_num@number 0016                 __size_of_initKeypad 000E  
          __size_of_passcodeCompare 0080                   ?_initStandbyTimer 0001  
                ??_initStandbyTimer 0013                           __pintcode 0008  
                          ?_beep_ok 0001                           _bufferPtr 0037  
           _check_password_presence 0F50             __end_of_eepromWriteCode 0EE6  
              main@numOfKeysPressed 00D1                         __smallconst 0800  
                         _keyBuffer 0092                    ??_clear_keyArray 0015  
         arr_to_num@num_of_elements 0015                    _initControllerIO 1008  
      passcodeCompare@compareLenght 0016                  getKey@KeypadStatus 0013  
          ??_buttonPressedIndicator 0017      __end_of_defaultPassCode2Lenght 080E  
                          _LATAbits 000F89               _defaultPassCodeLenght 080E  
                          _PIE1bits 000F9D               writeEEPROM@gie_Status 0015  
                          _PIR1bits 000F9E                    __CFG_WDTPS$32768 000000  
   check_password_presence@lock_num 0015     check_password_presence@validity 0016  
                      ??_arr_to_num 0018                         _INTCON2bits 000FF1  
                         copy_data0 0E76    __size_of_check_lock_num_validity 001E  
                      ??_readEEPROM 0013                          _EECON1bits 000FA6  
                          __Hrparam 0000                            __Lrparam 0000  
                      __Lsmallconst 0800                        ??_initKeypad 0013  
                 ??_passcodeCompare 0018           ??_check_password_presence 0014  
                     _timerOVFcount 0034                  __end_of_arr_to_num 0DE2  
                  __size_of_beep_ok 0038                    ?_eepromWriteCode 0016  
             __CFG_FOSC$INTOSCIO_EC 000000                  __end_of_readEEPROM 1020  
                          __ptext10 0F9E                            __ptext11 0FBC  
                          __ptext12 0810                            __ptext13 0EE6  
                          __ptext14 0FD4                            __ptext15 0D3E  
                __end_of_initKeypad 1008                       __size_of_beep 0016  
                     __size_of_main 0186     __size_of_buttonPressedIndicator 0018  
          check_password_presence@a 0014                       ??_writeEEPROM 0014  
                          int$flags 0042                            main@addr 00CF  
                          _soundOut 0022               __CFG_CPUDIV$OSC1_PLL2 000000  
                        _INTCONbits 000FF2     __end_of_check_password_presence 0F7A  
                          intlevel2 0000                   _currentTimerState 0033  
             _wrongCodeEnteredCount 0038                    _eepromCodeBuffer 00AB  
          __end_of_initControllerIO 1014  buttonPressedIndicator@keypad_state 0017  
               __end_of_writeEEPROM 0F50           __size_of_initStandbyTimer 0010  
            _buttonPressedIndicator 0FBC             _check_lock_num_validity 0F9E  
         eepromWriteCode@codeBuffer 0017           eepromWriteCode@codeLenght 0016  
